<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/docker/</link>
    <description>Recent content in Docker on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker(4)——备份和恢复</title>
      <link>https://ac-lm.github.io/posts/docker/docker4%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker4%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</guid>
      <description>1.docker容器的导出备份 docker export -o 容器导出文件(格式为tar压缩文件) 容器ID或容器名称 docker export -o $(pwd)/newtomcat.tar mytomcat ----------------------------------------------------- docker export 容器ID或容器名称 &amp;gt; 容器导出文件(格式为tar压缩文件) docker export mytomcat &amp;gt; $(pwd)/newtomcat.tar +++++++++++++++++++++++++++++++++++++++++++++++++++++ 注释： $(pwd)是docker支持的获取当前目录路径的方法，与linux的pwd类似 $(pwd)/newtomcat.tar 表示在当前目录下生成一个newtomcat.tar压缩文件 2.docker容器的导入恢复 docker import 容器导出文件(格式为tar压缩文件) 新镜像名称[:版本号] docker import $(pwd)/newtomcat.tar newtomcat:v1.0 ------------------------------------------------------ docker import /URL 新镜像名称[:版本号] docker import http://example.com/exampleimage.tgz example/imagerepo 3.docker镜像的导出备份 docker save -o 镜像导出文件(格式为tar压缩文件) 镜像ID或镜像名称[:版本号] docker save -o $(pwd)/mytomcat.tar newtomcat:v1.0 ---------------------------------------------------------------------- docker save 镜像ID或镜像名称[:版本号] &amp;gt; 镜像导出文件(格式为tar压缩文件) docker save newtomcat:v1.0 &amp;gt; $(pwd)/mytomcat.tar 4.docker镜像的导入恢复 docker load -i 镜像导出文件(格式为tar压缩文件) docker load -i $(pwd)/mytomcat.</description>
    </item>
    
    <item>
      <title>Docker(3)——设置国内镜像源</title>
      <link>https://ac-lm.github.io/posts/docker/docker3%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker3%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</guid>
      <description>创建或修改 /etc/docker/daemon.json 文件
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https//hub-mirror.c.163.com&amp;#34;] } Docker中国区官方镜像 https://registry.docker-cn.com
网易 http://hub-mirror.c.163.com
中国科技大学 https://docker.mirrors.ustc.edu.cn</description>
    </item>
    
    <item>
      <title>Docker(2)——后台运行</title>
      <link>https://ac-lm.github.io/posts/docker/docker2%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker2%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid>
      <description>1.使用参数 -d docker run -d python bash 需要注意的是，docker 在后台运行时，必须有一个前台进程。如果这个进程运行的命令不是能一直挂起的命令（如 ping，sleep），那么在执行完命令后，进程就会退出，同时 docker 也就会停止。
2.解决方法 1.执行挂起阻塞命令 docker run -d python sleep 99999999999999 2.使用交互界面后退出容器 docker run -it python /bin/bash</description>
    </item>
    
    <item>
      <title>Docker(1)——常用命令</title>
      <link>https://ac-lm.github.io/posts/docker/docker1%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker1%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1.运行docker docker version # 查看docker版本 systemctl start docker # 运行docker systemctl status docker # 查看docker状态 systemctl enable docker # 自启动docker 2.查看容器 docker ps -a # 查看容器，包括未运行 docker ps # 查看容易，正在运行的 docker rm name # 删除 docker rm -f name # 强制删除 docker rm $(docker ps -aq) # 删除全部容器  docker inspect -f {{&amp;#34;.NetworkSettings.IPAddress&amp;#34;}} python3.9 3.启动容器 docker run --name python3.9 --privileged=true -v /root/pythonScript:/pythonScript -it python /bin/bash # name 名字，privileged 权限，-v 挂载目录，-it 以shell模式 docker rename gallant_swartz python3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ac-lm.github.io/posts/docker/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/untitled/</guid>
      <description>Docker网络和容器的通信 - 风住 - 博客园 (cnblogs.com)</description>
    </item>
    
  </channel>
</rss>
