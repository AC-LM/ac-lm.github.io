<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyQt5 on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/pyqt5/</link>
    <description>Recent content in PyQt5 on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/pyqt5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyQt5(1)——安装</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt51%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt51%E5%AE%89%E8%A3%85/</guid>
      <description>PyQt5是对Qt所有类的Python封装，结合Python简洁的语法用户可以使用PyQt5高效、简单地开发出自己想要的程序。
pip install PyQt5 pip install PyQt5-tools # 安装工具，QTdesigner路径Lib\site-packages\qt5_applications\Qt\bin\designer.exe </description>
    </item>
    
    <item>
      <title>PyQt5(14)——程序的启动</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt514%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt514%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8/</guid>
      <description>1.启动的代码 apps = QApplication(sys.argv) myWin = MyWindow() # 创建Qt类 myWin.show() # 展示 sys.exit(apps.exec_()) 2.QApplication(sys.argv) 运行程序时候获取命令行参数，使Qt的各种类能获取到程序返回的参数
3.sys.exit(apps.exec_()) 使得指程序一直循环运行直到主窗口被关闭终止进程（如果没有这句话，程序运行时会一闪而过），作用是给予系统一个结束程序的状态判断</description>
    </item>
    
    <item>
      <title>PyQt5(12)——消息对话框类QMessageBox</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt512%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BBqmessagebox/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt512%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BBqmessagebox/</guid>
      <description>1.QMessageBox information(QWdiget parent,title,text,buttons,defaultButton) #| 弹出消息对话框  question（QWidget parent,title,text,buttons,defaultButton） #| 弹出问答对话框 warning（QWidget parent,title,text,buttons,defaultButton） #| 弹出警告对话框  critical（QWidget parent,title,text,buttons,defaultButton） #| 弹出严重错误对话框  about（QWidget parent,title,text） #| 弹出关于对话框  # 参数------------------------------------------------------------------------------ parent：指定的父窗口控件 title：对话框标题 text：对话框文本 buttons：标准按钮，默认为ok按钮，可以有多个，用 | 进行分隔 defaultButton：关闭对话框默认返回的按钮 # 方法------------------------------------------------------------------------------ setTitle() # 设置标题 setText() # 设置正文消息 setIcon() # 设置弹出对话框的图片  2.QMessageBox的标准按钮类型 QMessage.Ok #| 同意操作 | QMessage.Cancel #| 取消操作 | QMessage.Yes #| 同意操作 | QMessage.No #| 取消操作 | QMessage.Abort #| 终止操作 | QMessage.Retry #| 重试操作 | QMessage.</description>
    </item>
    
    <item>
      <title>PyQt5(13)——非模式显示show与模式exec_</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt513%E9%9D%9E%E6%A8%A1%E5%BC%8F%E6%98%BE%E7%A4%BAshow%E4%B8%8E%E6%A8%A1%E5%BC%8Fexec_/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt513%E9%9D%9E%E6%A8%A1%E5%BC%8F%E6%98%BE%E7%A4%BAshow%E4%B8%8E%E6%A8%A1%E5%BC%8Fexec_/</guid>
      <description>1.非模式显示show() 对话框弹出后，控制权即刻返回给调用函数，在显示期间，用户可以切换同程序下的其它窗口，程序照常运行。
2.模式显示exec_() 对话框弹出后，锁住程序直到用户关闭该对话框为止，函数返回一个DialogCode结果。在显示期间，用户不可以切换同程序下的其它窗口。
3.模式与非模式  模式对话框，就是在弹出窗口的时候，整个程序就被锁定了，处于等待状态，直到对话框被关闭。这时往往是需要对话框的返回值进行下面的操作。如：确认窗口（选择“是”或“否”）。 非模式对话框，在调用弹出窗口之后，调用即刻返回，继续下面的操作。这里只是一个调用指令的发出，不等待也不做任何处理。如：查找框。  两者的返回值不同。exec()有返回值，show()没有返回值。其次这两个方法的作用也不同。调用show()的作用仅仅是将widget及其上的内容都显示出来，控制权即刻返回给调用函数。而调用exec()后，调用线程将会被阻塞，锁住程序直到用户关闭该对话框，期间用户不可以切换同程序下的其它窗口直到Dialog关闭。</description>
    </item>
    
    <item>
      <title>PyQt5(4)——退出事件的重写</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt54%E9%80%80%E5%87%BA%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%87%8D%E5%86%99/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt54%E9%80%80%E5%87%BA%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%87%8D%E5%86%99/</guid>
      <description>import sys from PyQt5 import QtWidgets from PyQt5.QtGui import QFont # QtWidgets不包含QFont必须调用QtGui class MessageBox(QtWidgets.QWidget): def __init__(self,parent = None): # parent = None代表此QWidget属于最上层的窗口,也就是MainWindows. QtWidgets.QWidget.__init__(self) # 因为继承关系，要对父类初始化 # 通过super初始化父类，__init__()函数无self，若直接QtWidgets.QWidget.__init__(self)，括号里是有self的 self.setGeometry(300, 300, 1000,1000) # setGeometry()设置窗口在屏幕上的位置和设置窗口本身的大小。它的前两个参数是窗口在屏幕上的x和y坐标。后两个参数是窗口本身的宽和高 self.setToolTip(u&amp;#39;&amp;lt;b&amp;gt;程序&amp;lt;/b&amp;gt;提示&amp;#39;) # 调用setToolTip()方法,该方法接受富文本格式的参数,css之类。 QtWidgets.QToolTip.setFont(QFont(&amp;#39;华文楷体&amp;#39;, 10)) # 设置字体以及字体大小 #------------------------------------------------------------------------------ #当我们关闭一个窗口时，在PyQt中就会触发一个QCloseEvent的事件，正常情况下会直接关闭这个窗口， #但是我们不希望这样的事情发生，所以我们需要重新定义QCloseEvent，函数名称为closeEvent不可变 #-------------------------------------------------------------------------------- def closeEvent(self,event): # 函数名固定不可变 reply=QtWidgets.QMessageBox.question(self,u&amp;#39;警告&amp;#39;,u&amp;#39;确认退出?&amp;#39;,QtWidgets.QMessageBox.Yes,QtWidgets.QMessageBox.No) # QtWidgets.QMessageBox.question(self,u&amp;#39;弹窗名&amp;#39;,u&amp;#39;弹窗内容&amp;#39;,选项1,选项2) if reply==QtWidgets.QMessageBox.Yes: event.accept() # 关闭窗口 else: event.ignore() # 忽视点击X事件 app=QtWidgets.QApplication(sys.argv) window=MessageBox() window.show() sys.exit(app.exec_()) </description>
    </item>
    
    <item>
      <title>PyQt5(5)——最大最小关闭按钮的隐藏</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt55%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%B3%E9%97%AD%E6%8C%89%E9%92%AE%E7%9A%84%E9%9A%90%E8%97%8F/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt55%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%B3%E9%97%AD%E6%8C%89%E9%92%AE%E7%9A%84%E9%9A%90%E8%97%8F/</guid>
      <description># 1、直接隐藏界面整个头部内容 setWindowFlags(Qt.FramelessWindowHint) # 2、显示最小化按钮 setWindowFlags(Qt.WindowMinimizeButtonHint) # 3、显示最大化按钮 setWindowFlags(Qt.WindowMaximizeButtonHint) # 4、显示最小化和最大化按钮 setWindowFlags(Qt.WindowMinMaxButtonsHint) # 5、显示关闭按钮 setWindowFlags(Qt.WindowCloseButtonHint) # 6、固定界面大小尺寸，不能进行缩放（三种方法都可以） setWindowFlags(Qt.MSWindowsFixedSizeDialogHint) setFixedSize(width, height) setMinimumSize(800, 700) setMaximumSize(800, 700) # 7、取消最小化和最大化，及关闭按钮（利用固定大小方法） setWindowFlags(Qt.WindowMaximizeButtonHint | Qt.MSWindowsFixedSizeDialogHint) </description>
    </item>
    
    <item>
      <title>PyQt5(10)——文本元件QLineEdit</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt510%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6qlineedit/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt510%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6qlineedit/</guid>
      <description>1.常用方法 setText(str) # 设置普通文本 Text() # -&amp;gt; str返回普通文本 2.使用掩码限制格式 ipLineEdit.setInputMask(&amp;#39;000.000.000.000;_&amp;#39;) macLineEdit.setInputMask(&amp;#39;HH:HH:HH:HH:HH:HH;_&amp;#39;) dateLineEdit.setInputMask(&amp;#39;0000-00-00&amp;#39;) licenseLineEdit.setInputMask(&amp;#39;&amp;gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&amp;#39;) #---掩码类型------------------------------------------------------------ A ASCII字母字符是必须输入的(A-Z、a-z) a ASCII字母字符是允许输入的,但不是必需的(A-Z、a-z) N ASCII字母字符是必须输入的(A-Z、a-z、0-9) n ASII字母字符是允许输入的,但不是必需的(A-Z、a-z、0-9) X 任何字符都是必须输入的 x 任何字符都是允许输入的,但不是必需的 9 ASCII数字字符是必须输入的(0-9) 0 ASCII数字字符是允许输入的,但不是必需的(0-9) D ASCII数字字符是必须输入的(1-9) d ASCII数字字符是允许输入的,但不是必需的(1-9) # ASCI数字字符或加减符号是允许输入的,但不是必需的 H 十六进制格式字符是必须输入的(A-F、a-f、0-9) h 十六进制格式字符是允许输入的,但不是必需的(A-F、a-f、0-9) B 二进制格式字符是必须输入的(0,1) b 二进制格式字符是允许输入的,但不是必需的(0,1) &amp;gt; 所有的字母字符都大写 &amp;lt; 所有的字母字符都小写 ! 关闭大小写转换 \ 使用&amp;#34;\&amp;#34;转义上面列出的字符 #--------------------------------------------------------------------- </description>
    </item>
    
    <item>
      <title>PyQt5(11)——文本元件QTextEdit</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt511%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6qtextedit/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt511%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6qtextedit/</guid>
      <description>1.占位文本的使用 setPlaceholderText() #| 设置占位文本 placeholderText() #| 获取占位文本 2. 设置文本格式 setPlainText(str) #| 设置普通文本 insertPlainText(str) #| 插入普通文本 toPlainText() #| -&amp;gt; str 返回普通文本 setHtml(str) #| 设置Html文本 insertHtml(str) #| 插入Html文本 toHtml() #| -&amp;gt; str 返回Html 文本 setText(str) #| 设置文本（自动识别） append(str) #| 追加文本 clear() #| 清空文本 3.设置字体和大小 setFontPointSize(float) # 设置字体大小 setFontFamily(str) # 设置字体 </description>
    </item>
    
    <item>
      <title>PyQt5(2)——焦点控制</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt52%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt52%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6/</guid>
      <description>setFocus() #设置指定控件获取焦点 setFocusPolicy(Policy) #设置焦点获取策略 # Policy--------------------------------------------------- Qt.TabFocus() #通过Tab键获取焦点 Qt.ClickFocus() #通过被单击获取焦点 Qt.StrongFocus() #可以通过上面两种方式获取焦点 Qt.NoFocus() #不能通过上面两种方式获取焦点 # Policy---------------------------------------------------- clearFocus() #取消焦点 FocusWidget() #获取子控件当前聚焦的控件 FocusNextChild() #聚焦下一个子控件 FocusPrevious() #聚焦上一个子控件 FocusNextPreviousChild(bool) # True:下一个 False:上一个 setTabOrder(pro_widget,next_widget) #静态方法 设置子控件获取焦点的先后顺序 </description>
    </item>
    
    <item>
      <title>PyQt5(3)——进度条QProgressDialog</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt53%E8%BF%9B%E5%BA%A6%E6%9D%A1qprogressdialog/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt53%E8%BF%9B%E5%BA%A6%E6%9D%A1qprogressdialog/</guid>
      <description>1.QProgressDialog 进度条使用steps的概念。在指定最小和最大可能的step值后，它将显示已经完成的step的百分比。百分比是通过将进度 (value() - minimum()) / (maximum() - minimum())来计算的。
可以使用setMinimum()和setMaximum()指定最小和最大steps。默认值是0和99。当前的step由setValue()设置。进度条可以通过reset()重新开始。
如果最小值和最大值都设置为0，那么栏会显示一个繁忙的指示符，而不是步骤的百分比
2.常用方法 setMinimum() # 设置操作中的“steps”数量 setMaximum() # 设置操作中的“steps”数量 setValue() # 任意选择步数 setAutoReset() # 自动重置 setAutoClose() # 自动关闭 setRange(0,num) # 设置最小和最大值 wasCanceled() # 是否按下取消按钮 3.实例 def showDialog(self): num = int(self.edit.text()) progress = QProgressDialog(self) progress.setWindowTitle(&amp;#34;请稍等&amp;#34;) progress.setLabelText(&amp;#34;正在操作...&amp;#34;) progress.setCancelButtonText(&amp;#34;取消&amp;#34;) progress.setMinimumDuration(5) progress.setWindowModality(Qt.WindowModal) progress.setRange(0,num) for i in range(num): progress.setValue(i) if progress.wasCanceled(): QMessageBox.warning(self,&amp;#34;提示&amp;#34;,&amp;#34;操作失败&amp;#34;) break else: progress.setValue(num) QMessageBox.information(self,&amp;#34;提示&amp;#34;,&amp;#34;操作成功&amp;#34;) </description>
    </item>
    
    <item>
      <title>PyQt5(6)——信号和槽</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt56%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt56%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</guid>
      <description>1.概述 信号和槽机制是 QT 的核心机制，其是一种高级接口，应用于对象之间的通信，它是 QT 的核心特性，也是 QT 区别于其它工具包的重要地方。信号和槽是 QT 自行定义的一种通信机制，它独立于标准的 C/C++ 语言，因此要正确的处理信号和槽，必须借助一个称为moc(Meta Object Compiler)的 QT 工具，该工具是一个 C++ 预处理程序，它为高层次的事件处理自动生成所需要的附加代码。
在其它的 GUI 工具包中，窗口部件 (widget) 都有一个回调函数用于响应它们能触发的每个动作，这个回调函数通常是一个指向某个函数的指针。在 QT 中信号和槽取代了这些凌乱的函数指针，使得我们编写这些通信程序更为简洁明了。信号和槽能携带任意数量和任意类型的参数，且其的类型是完全安全的，不会像回调函数那样产生 core dumps。
所有从 QObject 或其子类 ( 例如 Qwidget ）派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不需要知道另一端是谁在接收这个信号。这也就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，主要是普通的对象成员函数，同样的一个槽并不知道是否有任何信号与自己相连接。
2.信号与槽的关联 通过调用 QObject 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。该函数的定义如下：
bool QObject::connect( const QObject * sender, const char * signal, const QObject * receiver, const char * member ) [static] connect 函数将信号发送者 sender 对象中的信号 signal 与接受者 receiver 中的 member 槽函数联系起来。注意的是，当指定信号 signal时必须使用宏SIGNAL，当指定槽函数时必须使用宏SLOT。</description>
    </item>
    
    <item>
      <title>PyQt5(7)——消息提示类QDialog</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt57%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E7%B1%BBqdialog/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt57%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E7%B1%BBqdialog/</guid>
      <description>1.QDialog的子类 QMessageBox，QFileDialog，QColorDialog，QFontDialog，QInputDialog等
2.QDialog类中的常用方法 setWindowTitle() #设置对话框标题 setWindowModality() #设置窗口模态 #-值----------------------------------------------- Qt.NonModal：非模态，可以和程序的其他窗口进行交互 Qt.WindowModal:窗口模态，程序在未处理玩当前对话框时，将阻止和对话框的父窗口进行交互 Qt.ApplicationModal：应用程序模态，阻止和任何其他窗口进行交互 </description>
    </item>
    
    <item>
      <title>PyQt5(8)——文件类QFileDialog</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt58%E6%96%87%E4%BB%B6%E7%B1%BBqfiledialog/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt58%E6%96%87%E4%BB%B6%E7%B1%BBqfiledialog/</guid>
      <description>1.调用文件对话框获取文件信息 #主要接口 QFileDialog.getExistingDirectory() # 返回选中的文件夹路径 QFileDialog.getOpenFileName() # 返回选中的文件路径 QFileDialog.getOpenFileNames() # 返回选中的多个文件路径 QFileDialog.getSaveFileName() # 存储文件 2.返回选中的文件夹路径 QFileDialog.getExistingDirectory(None, &amp;#34;请选择文件夹路径&amp;#34;, &amp;#34;D:\\Qt_ui&amp;#34;) QFileDialog.getExistingDirectory(self, &amp;#34;请选择文件夹路径&amp;#34;, &amp;#34;D:\\Qt_ui&amp;#34;) #--------------------------------------------------- 第一个参数，有self的话用self，没有的话用None。 第二个参数，设置窗口名。 第三个参数，设置默认打开路径。 3.获取单个文件的路径 QFileDialog.getOpenFileName(myWin, directory=&amp;#39;.&amp;#39;, filter=&amp;#39;Excel files(*.xlsx ; *.xls)&amp;#39;) #------------------------------------------------------------------- 第一个参数：parent 用于指定父组件。PS:很多Qt组件的构造函数都会有这么一个parent参数，并提供一个默认值0 第二个参数：caption 是对话框的标题 第三个参数：dir 是对话框显示时默认打开的目录。&amp;#34;.&amp;#34; 代表程序运行目录，&amp;#34;/&amp;#34; 代表当前盘符的根目录 第四个参数：filter 是对话框的后缀名过滤器。如果显示该目录下的全部文件可以 *.* ，需要什么类型文件修改后面的 * ，即正则 第六个参数：options，是对话框的一些参数设定，比如只显示文件夹等等 4.获取多文件路径实例 QFileDialog.getOpenFileNames(None, &amp;#34;请选择要添加的文件&amp;#34;, path, &amp;#34;Text Files (*.xls;*.xlsx);;All Files (*)&amp;#34;) #----------------------------------------------------------- 第四个参数，列出可以进行筛选的参数，第一个是默认的，多个用双分号分开。 </description>
    </item>
    
    <item>
      <title>PyQt5(9)——输入对话框类QInputDialog</title>
      <link>https://ac-lm.github.io/posts/pyqt5/pyqt59%E8%BE%93%E5%85%A5%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BBqinputdialog/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/pyqt5/pyqt59%E8%BE%93%E5%85%A5%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BBqinputdialog/</guid>
      <description>QInputDialog 继承自 QDialog 提供了一种简单的对话框来获得用户的单个输入信息
class QInputDialog(QDialog) | QInputDialog(QWidget parent=None, Qt.WindowFlags flags=0) 常用以下方法获取对话框的信息
 字符串型 QInputDialog.getText Int类型数据 QInputDialog.getInt double类型数据 QInputDialog.getDouble 下拉列表框的条目 QInputDialog.getItem  1.QInputDialog.getText QString getText( QWidget * parent, #标准输入对话框的父窗口 const QString &amp;amp; title, #输入对话框的标题名 const QString &amp;amp; label,#标准输入对话框的标签提示 const QString &amp;amp; text = QString(), #标准字符串输入对话框弹出时QLineEdit控件中默认出现的文字 bool * ok = 0, #用于指示标准输入对话框的哪个按钮被触发，若ok为true，则表示用户单击了OK（确定）按钮，若ok为false，则表示用户单击了Cancel（取消）按钮 Qt::WindowFlags flags = 0, #知名标准输入对话框的窗体标识 Qt::InputMethodHints inputMethodHints = Qt::ImhNone ); [static] 2.QInputDialog.getItem QString getItem( QWidget * parent, #标准输入对话框的父窗口 const QString &amp;amp; title, #标准输入对话框的标题名 const QString &amp;amp; label, #标准输入对话框的标签提示 const QStringList &amp;amp; list, #指定标准输入对话框中QComboBox控件显示的可选条目，为一个QStringList对象 int current = 0, #指定标准输入对话框中QComboBox控件显示的可选条目，为一个QStringList对象 bool editable = true, #指定QComboBox控件中显示的文字是否可编辑； bool * ok = 0, #用于指定标准输入对话框的哪个那妞被触发，若ok为false，则表示用户单击了Cancel（取消）按钮； Qt::WindowFlags f = 0 ) ; [static] #用于指定标准输入对话框的哪个那妞被触发，若ok为false，则表示用户单击了Cancel（取消）按钮； 3.</description>
    </item>
    
  </channel>
</rss>
