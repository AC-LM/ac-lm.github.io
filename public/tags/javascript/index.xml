<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web开发(17)—scrollIntoView 视图滚动</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9117scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9117scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</guid>
      <description>1.scrollIntoView() scrollIntoView()方法可以将调用它的元素滚动到浏览器窗口的可见区域。
var element = document.getElementById(&amp;#34;box&amp;#34;); element.scrollIntoView(); element.scrollIntoView(false); element.scrollIntoView({block: &amp;#34;end&amp;#34;}); element.scrollIntoView({behavior: &amp;#34;instant&amp;#34;, block: &amp;#34;end&amp;#34;, inline: &amp;#34;nearest&amp;#34;}); </description>
    </item>
    
    <item>
      <title>Web开发(18)—箭头函数与 function 的 this 指向问题</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9118%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function-%E7%9A%84-this-%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9118%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function-%E7%9A%84-this-%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</guid>
      <description>1.定义 // function function fn(a, b){ return a + b; } // arrow function var foo = (a, b)=&amp;gt;{ return a + b }; 2.This 的指向 使用function定义的函数，this的指向随着调用环境的变化而变化的，而箭头函数中的this指向是固定不变的，一直指向的是定义函数的环境
// 使用function定义的函数 function foo(){ console.log(this); } var obj = { aa: foo }; foo(); //Window obj.aa() //obj { aa: foo }  // 使用箭头函数定义函数 var foo = () =&amp;gt; { console.log(this) }; var obj = { aa:foo }; foo(); //Window obj.aa(); //Window 3.构造函数 仅能通过 function 方法定义构造函数</description>
    </item>
    
    <item>
      <title>Web开发(16)—获取节点</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9116%E8%8E%B7%E5%8F%96%E5%AD%90%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9116%E8%8E%B7%E5%8F%96%E5%AD%90%E8%8A%82%E7%82%B9/</guid>
      <description>1.获取子节点 a.通过获取 dom 方式直接获取子节点 var a = document.getElementById(&amp;#34;test&amp;#34;).getElementsByTagName(&amp;#34;div&amp;#34;); b. 通过 childNodes 获取子节点 var b =document.getElementById(&amp;#34;test&amp;#34;).childNodes; c.通过 children 来获取子节点 var getFirstChild = document.getElementById(&amp;#34;test&amp;#34;).children[0]; 2.获取父节点 a.parentNode获取父节点 var p = document.getElementById(&amp;#34;test&amp;#34;).parentNode; 3.获取兄弟节点 a.通过获取父亲节点再获取子节点来获取兄弟节点 var brother1 = document.getElementById(&amp;#34;test&amp;#34;).parentNode.children[1]; b.获取上一个兄弟节点 var brother2 = document.getElementById(&amp;#34;test&amp;#34;).previousElementSibling; c.获取下一个兄弟节点 var brother4 = document.getElementById(&amp;#34;test&amp;#34;).nextElementSibling; </description>
    </item>
    
    <item>
      <title>Web开发(15)—ES6-ES12的开发技巧</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9115es6-es12-%E7%9A%84%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9115es6-es12-%E7%9A%84%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</guid>
      <description>参考原文：ES6-ES12的开发技巧 @Sunshine_Lin 
 ES6 1.let 和 const 在 ES6 出现了新的变量 let 和 const ，与 var 相比：
 var有变量提升，值可变，允许重复声明 let没有变量提升，值可变，不允许重复声明 const没有变量提升，值不可变，但如果是定义对象，则属性可变  // let 无变量提升 t = 2; console.log(t); let t; // Cannot access &amp;#39;t&amp;#39; before initialization console.log(t); let t; // t is not defined t1 = 2; console.log(t1); var t1; // 2 console.log(t1); var t1; // undefined PS：变量提升(声明提升)：函数声明和变量声明总是会被解释器悄悄地被&amp;quot;提升&amp;quot;到方法体的最顶部。
x = 5; // 变量 x 设置为 5 console.log(x)； var x; // 声明 x 实际上，上述代码等于下述代码，在运行时，x 的的声明被提升到最顶部</description>
    </item>
    
    <item>
      <title>Web开发(14)—JavaScript 的 Url 编解码</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9114javascript-%E7%9A%84-url-%E7%BC%96%E8%A7%A3%E7%A0%81/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9114javascript-%E7%9A%84-url-%E7%BC%96%E8%A7%A3%E7%A0%81/</guid>
      <description>escape() escape() 不能直接用于URL编码，它的作用是返回一个字符的 Unicode 编码值。比如&amp;quot;春节&amp;quot;的返回结果是%u6625%u8282，escape() 仅不对+进行编码，其主要用于汉字编码。
console.log(escape(&amp;#34;春节+国庆&amp;#34;)) // %u6625%u8282+%u56FD%u5E86 console.log(escape(&amp;#34;春节=+=国庆&amp;#34;)) // %u6625%u8282%3D+%3D%u56FD%u5E86 console.log(unescape(&amp;#39;%u6625%u8282%3D+%3D%u56FD%u5E86&amp;#39;)) // 春节=+=国庆 encodeURI() encodeURI() 是用来对 URL 编码的函数。函数会编码整个 URL 地址，但对特殊含义的符号 ; / ? : @ &amp;amp; = + $ , # 不进行编码。
console.log(encodeURI(&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;)) // http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3 console.log(decodeURI(&amp;#39;http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3&amp;#39;)) // http://baidu.com?hello=您好&amp;amp;word=文档 encodeURIComponent() encodeURIComponent() 能编码如; / ? : @ &amp;amp; = + $ , #这些特殊字符
console.log(encodeURIComponent(&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;)) // http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3 console.log(decodeURIComponent(&amp;#39;http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3&amp;#39;)) // http://baidu.com?hello=您好&amp;amp;word=文档 </description>
    </item>
    
    <item>
      <title>Web开发(13)—控制台输出</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9113%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9113%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</guid>
      <description>1.清空控制台 console.clear()clear()2.信息输出 console.log() 用于输出普通信息console.info() 用于输出提示性信息console.error() 用于输出错误信息console.warn() 用于输出警示信息console.debug() 用于输出调试信息3.换行 shift+ enter
4.占位符 支持字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）四种
console.log(&#39;%d年%d月%d日&#39;,2011,3,26); console.log(&#39;圆周率是%f&#39;,3.1415926);5.断言 let isDebug = false;console.assert(isDebug,&#39;为false时输出的信息&#39;);</description>
    </item>
    
    <item>
      <title>Web开发(12)—attribute 和 property 的区别</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9112attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9112attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>参考原文：JS中attribute和property的区别 @L_mj 
 1.介绍 property属性和attribute特性非常容易混淆，但两者不是同一个东西，property是DOM中的属性，是JavaScript里的对象；attribute是HTML标签上的特性，它的值只能够是字符串；简单理解，attribute就是DOM节点自带的属性，例如HTML中常用的id、class、title、align等。而property是这个DOM元素作为对象，其附加的内容，例如childNodes、firstChild等。
&amp;lt;div id=&amp;#34;div1&amp;#34; class=&amp;#34;divClass&amp;#34; title=&amp;#34;divTitle&amp;#34; title1=&amp;#34;divTitle1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 如上述的div标签，当我们使用var in1=document.getElementById(&amp;quot;div1&amp;quot;)获取这个元素并打印时console.log(in1)，可以看到如下图的属性。
 
可以发现有一个名为attributes的属性，类型是NamedNodeMap，同时也可以找到标签自带的属性id和className、但明显没有titles这个自定义的属性。这是因为每一个DOM对象在创建的时候，只会创建如id, className这些基本属性，而们在TAG标签中自定义的属性是不会直接放到DOM中的。我们可以在attributes属性中找到我们自定义的属性。
 
从这里就可以看出，attributes是属于property的一个子集，它保存了HTML标签上定义属性。
2.设置 常用的attribute，例如id、class等，已经被作为property附加到DOM对象上，可以和property一样取值和赋值。
attribute取值赋值 使用setAttribute()和getAttribute()进行操作，注意，setAttribute()的两个参数，都必须是字符串。
var id = div1.getAttribute(&amp;#34;id&amp;#34;); var className1 = div1.getAttribute(&amp;#34;class&amp;#34;); var title = div1.getAttribute(&amp;#34;title&amp;#34;); var title1 = div1.getAttribute(&amp;#34;title1&amp;#34;); //自定义特性  div1.setAttribute(&amp;#39;class&amp;#39;, &amp;#39;a&amp;#39;); div1.setAttribute(&amp;#39;title&amp;#39;, &amp;#39;b&amp;#39;); div1.setAttribute(&amp;#39;title1&amp;#39;, &amp;#39;c&amp;#39;); div1.setAttribute(&amp;#39;title2&amp;#39;, &amp;#39;d&amp;#39;); property取值赋值 property取值赋值只需要使用.就可以了。对属性property可以赋任何类型的值。
var id = div1.id; var className = div1.className; var childNodes = div1.childNodes; var attrs = div1.attributes; div1.className = &amp;#39;a&amp;#39;; div1.</description>
    </item>
    
    <item>
      <title>Web开发(11)—异步POST</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9111%E5%BC%82%E6%AD%A5-post/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9111%E5%BC%82%E6%AD%A5-post/</guid>
      <description>1.$ajax $.ajax({ url: &amp;#39;http://&amp;#39;, type: &amp;#39;post&amp;#39;, dataType: &amp;#39;json&amp;#39;, data: {name: &amp;#34;xu&amp;#34;, foo: &amp;#39;bar&amp;#39;}, cache: false, headers: { &amp;#34;Authorization&amp;#34;: &amp;#34;Bearer token&amp;#34;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39; }, success: function(res){}, error: function(e){}, }); </description>
    </item>
    
    <item>
      <title>Web开发(10)—jQuery 实现界面刷新</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9110jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%9110jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</guid>
      <description>1.使用Load实现的局部刷新 在jQuery中load方法可以加载本地Html文件里的某个元素，使用这个特性可以实现Html的局部更新
$(&amp;#34;#content&amp;#34;).load(&amp;#34;list .table&amp;#34;) 2.使用location实现全局刷新 window.location.reload() </description>
    </item>
    
    <item>
      <title>Web开发(9)—下拉表单插件 bootstrap-select</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%919%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%919%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</guid>
      <description> 参考文献：github.com-bootstrap-select @silviomoreto  &amp;amp; blogs @懒得安分
 1.引用 &amp;lt;link href=&amp;#34;Content/bootstrap/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;Content/bootstrap-select/css/bootstrap-select.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;Content/jquery-1.9.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;Content/bootstrap/js/bootstrap.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;Content/bootstrap-select/js/bootstrap-select.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 2.使用 &amp;lt;select class=&amp;#34;selectpicker&amp;#34; multiple&amp;gt; &amp;lt;option value=&amp;#34;1&amp;#34;&amp;gt;广东省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;2&amp;#34;&amp;gt;广西省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;3&amp;#34;&amp;gt;福建省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;4&amp;#34;&amp;gt;湖南省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;5&amp;#34;&amp;gt;山东省&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; 3.取值 关于组件取值保持原生的jquery方法，比如 var value = $(&#39;#sel&#39;).val(); ，需要注意的是，如果是多选，这里得到的value变量是一个数组变量，形如 [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]
4.赋值 组件赋值就需要稍微变换一下了，如果你直接 $(&#39;#sel&#39;).val(&#39;1&#39;); 这样赋值将会无效，正确的赋值方法为：
$(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, &amp;#39;1&amp;#39;); 注意，赋值的值为option的value属性！！
在一些级联选择的使用场景中，经常需要在赋值的时候顺便触发一下组件的change事件，我们可以这么做。
$(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, &amp;#39;1&amp;#39;).trigger(&amp;#34;change&amp;#34;); 如果是多选的赋值，也是一样
$(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;]).trigger(&amp;#34;change&amp;#34;); 恢复原状 $(&amp;#39;#initializePartyAProject&amp;#39;).on(&amp;#39;click&amp;#39;, function () { //回到初始状态  $(&amp;#39;#party_a_project_name&amp;#39;).selectpicker(&amp;#39;val&amp;#39;,[&amp;#39;noneSelectedText&amp;#39;]) //对party_a_project_name这个下拉框进行重置刷新  $(&amp;#34;#party_a_project_name&amp;#34;).selectpicker(&amp;#39;refresh&amp;#39;); }); </description>
    </item>
    
    <item>
      <title>Web开发(8)—定位点击位置</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%918%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%918%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</guid>
      <description>1.实现代码 $(&amp;#39;body&amp;#39;).click(function(e) { // 在页面任意位置点击而触发此事件  // e.target表示被点击的目标  if($(e.target).attr(&amp;#34;id&amp;#34;) == &amp;#39;btn_my_mesg&amp;#39;){ //要隐藏或显示的元素  $(&amp;#34;.myMsgs&amp;#34;).css(&amp;#34;display&amp;#34;,&amp;#34;block&amp;#34;); }else{ $(&amp;#34;.myMsgs&amp;#34;).css(&amp;#34;display&amp;#34;,&amp;#34;none&amp;#34;); } }) </description>
    </item>
    
    <item>
      <title>Web开发(7)—Jquery 消息提示插件 toastr</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%917jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%917jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</guid>
      <description> 参考文献： github-toastr @CodeSeven 
 toastr是一个基于jQuery简单、漂亮的消息提示插件，使用简单、方便，可以设置超时时间自动消失。
1.引入toastr的js、css文件 &amp;lt;script src=&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.css&amp;#34;&amp;gt; 2.使用 //常规消息提示，默认背景为浅蓝色 toastr.info(&amp;#34;你有新消息了!&amp;#34;); //成功消息提示，默认背景为浅绿色 toastr.success(&amp;#34;你有新消息了!&amp;#34;); //警告消息提示，默认背景为橘黄色 toastr.warning(&amp;#34;你有新消息了!&amp;#34;); //错误消息提示，默认背景为浅红色 toastr.error(&amp;#34;你有新消息了!&amp;#34;); //带标题的消息框 toastr.success(&amp;#34;你有新消息了!&amp;#34;,&amp;#34;消息提示&amp;#34;); //另一种调用方法 toastr[&amp;#34;info&amp;#34;](&amp;#34;你有新消息了!&amp;#34;,&amp;#34;消息提示&amp;#34;); 3.自定义参数 toastr.options = { closeButton: false, debug: false, progressBar: true, positionClass: &amp;#34;toast-bottom-center&amp;#34;, onclick: null, showDuration: &amp;#34;300&amp;#34;, hideDuration: &amp;#34;1000&amp;#34;, timeOut: &amp;#34;2000&amp;#34;, extendedTimeOut: &amp;#34;1000&amp;#34;, showEasing: &amp;#34;swing&amp;#34;, hideEasing: &amp;#34;linear&amp;#34;, showMethod: &amp;#34;fadeIn&amp;#34;, hideMethod: &amp;#34;fadeOut&amp;#34; }; 4.参数说明 closeButton：false，是否显示关闭按钮（提示框右上角关闭按钮）； debug：false，是否为调试； progressBar：false，是否显示进度条（设置关闭的超时时间进度条）； positionClass，消息框在页面显示的位置 toast-top-left 顶端左边 toast-top-right 顶端右边 toast-top-center 顶端中间 toast-top-full-width 顶端，宽度铺满整个屏幕 toast-botton-right toast-bottom-left toast-bottom-center toast-bottom-full-width onclick，点击消息框自定义事件 showDuration: “300”，显示动作时间 hideDuration: “1000”，隐藏动作时间 timeOut: “2000”，自动关闭超时时间 extendedTimeOut: “1000” showEasing: “swing”, hideEasing: “linear”, showMethod: “fadeIn” 显示的方式，和jquery相同 hideMethod: “fadeOut” 隐藏的方式，和jquery相同 </description>
    </item>
    
    <item>
      <title>Web开发(6)—常用小知识</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%916%E5%B8%B8%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%916%E5%B8%B8%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
      <description>1.屏蔽链接 href=&amp;#34;javascript:void(0);&amp;#34; &amp;lt;script&amp;gt;window.alert(&amp;#34;sometext&amp;#34;)&amp;lt;/script&amp;gt; 2.min文件 min，Minimized的缩写，是压缩后的js或css文件。里面的功能与没有min的文件是一样的。
js或css文件一般都是从服务器上下载到本地浏览器上解释执行的，如果js文件过大，这样必然会导致网页加载速度变慢。所以，有了压缩js文件的做法。
实际压缩原理很简单，就是把原来js文件中的空格，回车符，注释全部清除。因此这种js文件通常是不可读的，因为压缩后，文件是一行写到尾。
3.li标签间的间隔删除 li标签间的间隔是由于：行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符，这些空白也会被应用样式，占据空间，所以会有间隔。可以将闭合标签写到开头
&amp;lt;li&amp;gt;BAT &amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;BAT&amp;lt;/li&amp;gt; 也可以通过设置 li 标签的 font-size 为 0，解决该问题。
4.CSS样式覆盖  规则一：由于继承而发生样式冲突时，最近祖先/父元素获胜（最近原则） 规则二：继承的样式和直接指定的样式冲突时，直接指定的样式获胜（最直接原则） 规则三：直接指定的样式发生冲突时，样式权值高者获胜。内联样式的权值&amp;raquo;ID选择器&amp;raquo;类选择器&amp;raquo;标签选择器 规则四：样式权值相同时，后者获胜。注意样式表的出现位置 规则五：!important的样式属性不被覆盖  5.页面跳转 window.location.replace(&amp;#34;网址&amp;#34;); window.location.href = &amp;#34;网址&amp;#34;; $(location).attr(&amp;#39;href&amp;#39;, ‘网址’); $(window).attr(&amp;#39;location&amp;#39;,‘网址’); $(location).prop(&amp;#39;href&amp;#39;,‘网址’) 6.js将html字符串转换成node节点 innerHTML function createNode(txt) { const template = `&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;`; let tempNode = document.createElement(&amp;#39;div&amp;#39;); tempNode.innerHTML = template; return tempNode.firstChild; } const container = document.getElementById(&amp;#39;container&amp;#39;); container.appendChild(createNode(&amp;#39;hello&amp;#39;)); DOMParser function createDocument(txt) { const template = `&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;`; let doc = new DOMParser().</description>
    </item>
    
    <item>
      <title>Web开发(5)—实现摄像头开启</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%915%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%915%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</guid>
      <description>1.HTML实现 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- 样式部分可以忽略 --&amp;gt; &amp;lt;style&amp;gt; * { padding: 0; margin: 0; } div { width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; } .btn { width: 100px; height: 50px; border-radius: 10px; background: #ff9900; line-height: 50px; text-align: center; color: #fff; box-shadow: 0 0 10px #999; } video, canvas { width: 300px; height: 300px; border: 5px solid #000; border-radius: 10px; margin-left: 5px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;#34;play&amp;#34; class=&amp;#34;btn&amp;#34;&amp;gt;开启摄像&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;take&amp;#34; class=&amp;#34;btn&amp;#34;&amp;gt;拍照&amp;lt;/div&amp;gt; &amp;lt;video id=&amp;#34;video&amp;#34;&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Web开发(4)—JS 实现页面跳转</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%914js-%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%914js-%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</guid>
      <description>1 页面跳转（原页面跳转） （1）a标签实现 &amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34;&amp;gt;BAT&amp;lt;/a&amp;gt; （2）window.location.href实现 window.location.href=&amp;#34;https://www.baidu.com&amp;#34;; 2 页面跳转 （打开新标签页） （1）a标签实现 &amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;BAT&amp;lt;/a&amp;gt; （2）window.open()实现 window.open(&amp;#34;https://www.baidu.com&amp;#34;); </description>
    </item>
    
  </channel>
</rss>
