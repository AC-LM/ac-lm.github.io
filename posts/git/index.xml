<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/git/</link>
    <description>Recent content in Git on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git(4)——.gitlab-ci.yml文件配置</title>
      <link>https://ac-lm.github.io/posts/git/git4.gitlab-ci.yml-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/git/git4.gitlab-ci.yml-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
      <description>参考原文：.gitlab-ci.yml语法 @hellojinni 
 .gitlab-ci.yml 文件 GitLab CI 使用 YAML文件(.gitlab-ci.yml) 来管理项目配置，用来配置 CI 在你的项目中做哪些操作，这个文件位于仓库的根目录。
当有新内容 push 到仓库，或者有代码合并后， GitLab 会查找是否有 .gitlab-ci.yml 文件，如果文件存在， Runners 将会根据该文件的内容开始 build 本次 commit 。
.gitlab-ci.yml 使用 YAML 语法， 你需要格外注意缩进格式，要用空格来缩进，不能用 tabs 来缩进。
Stages Stages 表示构建阶段，说白了就是上面提到的流程。默认有3个 stages ： build , test , deploy 。我们可以在一次 Pipeline 中定义多个 Stages ，这些 Stages 会有以下特点：
 所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始 只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功 如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败  Jobs Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs ，Jobs 是由Runners接管并且由服务器中runner执行。这些 Jobs 会有以下特点：</description>
    </item>
    
    <item>
      <title>Git(2)——SSH配置</title>
      <link>https://ac-lm.github.io/posts/git/git2ssh-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/git/git2ssh-%E9%85%8D%E7%BD%AE/</guid>
      <description>1.配置SSH 打开 Git 命令行工具，输入以下命令，使用邮箱创建密码对
ssh-keygen -t rsa -b 2048 -C &amp;#34;email@example.com&amp;#34; 有此结果，在对应目录【/home/user/.ssh/id_rsa】下找到生成的公钥文件 id_rsa.pub，记事本打开，将里面的内容复制到剪贴板
Generating public/private rsa key pair. Enter file in which to save the key (/home/user/.ssh/id_rsa): 打开新建的github或者gitlab账户，找到 SSH Keys 选项 【setting-&amp;gt;SSH keys】，将剪贴板内容粘贴到内容框中，title可以用默认的邮箱名字，最后点击add。这就代表这个用户被远程仓库所承认了
选择克隆的项目，复制 SSH 克隆URL，进行克隆
git clone + 库的地址 2.创建SSH的目的 SSH KEY的作用是来识别你的电脑，相当于人的身份证号，在你的C盘用户目录下面 (:\Users\LX) 存在一个 .ssh 目录，这个目录下有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</description>
    </item>
    
    <item>
      <title>Git(3)——gitlab-runner安装配置</title>
      <link>https://ac-lm.github.io/posts/git/git3gitlab-runner-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/git/git3gitlab-runner-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>1.Linux 注册 gitlab-runner sudo gitlab-runner register Runtime platform arch=amd64 os=linux pid=3639 revision=943fc252 version=13.7.0 Running in system-mode. Enter the GitLab instance URL (for example, https://gitlab.com/): # http://gitlab.hison.net/ Enter the registration token: # WDKcwQGUoXRC-NR3rUns Enter a description for the runner: #  Enter the tags for the runner: #  Enter the runner executor: # shell ——————————————————————————————————————————————————————————————————————————————————————————————————————————— # 文档 sudo gitlab-runner register Enter your GitLab instance URL (also known as the gitlab-ci coordinator URL).</description>
    </item>
    
    <item>
      <title>Git(1)——Git版本管理工具</title>
      <link>https://ac-lm.github.io/posts/git/git1git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/git/git1git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>1.Git搭载 搭载 Git 环境，下载安装 Git，Git官网下载 
在 github 或者 gitlab 上存在账户
注意：git 无法追踪一个空文件夹，当用户需要追踪一个空文件夹的时候，可以将一个称为 .gitkeep 的文件放在文件夹里
2.配置用户名与邮箱 git config --global user.name &amp;#34;???&amp;#34; git config --global user.email &amp;#34;????&amp;#34; # --global 去除则针对单个项目 3.克隆仓库 git clone ssh://url cd somethingtest touch README.md git add -A git commit -m &amp;#34;new&amp;#34; git push -u origin master 4.上传文件创建仓库 cd existing_folder git init git remote add origin ssh://url git add -A //. git commit -m &amp;#34;Initial commit&amp;#34; git push -u origin master 5.</description>
    </item>
    
  </channel>
</rss>
