<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/web/</link>
    <description>Recent content in Web on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web开发—双击修改的实现</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>1.实现 $(&amp;#39;.edit&amp;#39;).on(&amp;#39;dblclick&amp;#39;, function(event){ let e = event.target if(e.innerHTML.indexOf(&amp;#39;type=&amp;#34;text&amp;#34;&amp;#39;) &amp;gt; 0 ){ //判断是否进入编辑状态  return } let newdiv = document.createElement( &amp;#39;input&amp;#39; )//创建一个input标签  newdiv.type = &amp;#39;text&amp;#39; //设置标签类型  newdiv.className = &amp;#39;edit-input&amp;#39; newdiv.value = e.innerHTML //将原来文本内容赋值给input标签  e.innerHTML = &amp;#39;&amp;#39; //清除原来的内容  e.appendChild(newdiv) //将input标签添加到元素中  newdiv.setSelectionRange(0, e.innerHTML.length) //设置光标选中位置  newdiv.focus() //设置元素获得焦点，失去焦点触发onblur  newdiv.onblur = blur //设置失去焦点事件  function blur(){ e.innerHTML = this.value //将文本内容重新赋值给元素  } newdiv.onkeyup = function(key){ //设置回车时执行失去焦点事件  if(key.key == &amp;#39;Enter&amp;#39;){ newdiv.</description>
    </item>
    
    <item>
      <title>Web开发—上传进度获取</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E8%8E%B7%E5%8F%96/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E8%8E%B7%E5%8F%96/</guid>
      <description>1.javascript 的 XMLHttpRequest:progress 事件 var formData = new FormData(); formData.append(&amp;#34;file&amp;#34;, document.getElementById(&amp;#39;file&amp;#39;).files[0]); formData.append(&amp;#34;token&amp;#34;, token_value); var xhr = new XMLHttpRequest(); xhr.open(&amp;#39;POST&amp;#39;, &amp;#39;/uploadurl&amp;#39;); // 上传完成后的回调函数 xhr.onload = function () { if (xhr.status === 200) { console.log(&amp;#39;上传成功&amp;#39;); } else { console.log(&amp;#39;上传出错&amp;#39;); } }; // 获取上传进度 xhr.upload.onprogress = function (event) { if (event.lengthComputable) { var percent = Math.floor(event.loaded / event.total * 100) ; // 设置进度显示  $(&amp;#34;#J_upload_progress&amp;#34;).progress(&amp;#39;set progress&amp;#39;, percent); } }; xhr.send(formData); 2.jQuery 封装的 xhr var formData = new FormData(); formData.</description>
    </item>
    
    <item>
      <title>Web开发—scrollIntoView 视图滚动</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</guid>
      <description>1.scrollIntoView() scrollIntoView()方法可以将调用它的元素滚动到浏览器窗口的可见区域。
var element = document.getElementById(&amp;#34;box&amp;#34;); element.scrollIntoView(); element.scrollIntoView(false); element.scrollIntoView({block: &amp;#34;end&amp;#34;}); element.scrollIntoView({behavior: &amp;#34;instant&amp;#34;, block: &amp;#34;end&amp;#34;, inline: &amp;#34;nearest&amp;#34;}); </description>
    </item>
    
    <item>
      <title>Web开发—箭头函数与 function</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function/</guid>
      <description>1.定义 // function function fn(a, b){ return a + b; } // arrow function var foo = (a, b)=&amp;gt;{ return a + b }; 2.This 的指向 使用function定义的函数，this的指向随着调用环境的变化而变化的，而箭头函数中的this指向是固定不变的，一直指向的是定义函数的环境
// 使用function定义的函数 function foo(){ console.log(this); } var obj = { aa: foo }; foo(); //Window obj.aa() //obj { aa: foo }  // 使用箭头函数定义函数 var foo = () =&amp;gt; { console.log(this) }; var obj = { aa:foo }; foo(); //Window obj.aa(); //Window 3.构造函数 仅能通过 function 方法定义构造函数</description>
    </item>
    
    <item>
      <title>Web开发—获取节点</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/</guid>
      <description>1.通过获取 dom 方式直接获取子节点 var child = document.getElementById(&amp;#34;test&amp;#34;).getElementsByTagName(&amp;#34;div&amp;#34;); 2. 通过 childNodes 获取子节点 var child =document.getElementById(&amp;#34;test&amp;#34;).childNodes; 3.通过 children 来获取子节点 var child = document.getElementById(&amp;#34;test&amp;#34;).children[0]; 4.通过 parentNode 获取父节点 var parent = document.getElementById(&amp;#34;test&amp;#34;).parentNode; 5.通过获取父节点再获取子节点来获取兄弟节点 var brother = document.getElementById(&amp;#34;test&amp;#34;).parentNode.children[1]; 6.获取上一个兄弟节点 var brother = document.getElementById(&amp;#34;test&amp;#34;).previousElementSibling; 7.获取下一个兄弟节点 var brother = document.getElementById(&amp;#34;test&amp;#34;).nextElementSibling; </description>
    </item>
    
    <item>
      <title>Web开发—杂项1</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B91/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B91/</guid>
      <description>参考原文：ES6-ES12的开发技巧 @Sunshine_Lin 
 ES6 1.let 和 const  var：有变量提升，值可变，允许重复声明 let：没有变量提升，值可变，不允许重复声明 const：没有变量提升，值不可变，但如果是定义对象，则属性可变  // let 无变量提升 t = 2; console.log(t); let t; // Cannot access &amp;#39;t&amp;#39; before initialization console.log(t); let t; // t is not defined t1 = 2; console.log(t1); var t1; // 2 console.log(t1); var t1; // undefined PS：变量提升(声明提升)：函数声明和变量声明总是会被解释器悄悄地被&amp;quot;提升&amp;quot;到方法体的最顶部。
x = 5; // 变量 x 设置为 5 console.log(x); var x; // 声明 x 实际上，上述代码等于下述代码，在运行时，x 的的声明被提升到最顶部
var x; // 声明 x x = 5; // 变量 x 设置为 5 console.</description>
    </item>
    
    <item>
      <title>Web开发—Url 编解码</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91url-%E7%BC%96%E8%A7%A3%E7%A0%81/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91url-%E7%BC%96%E8%A7%A3%E7%A0%81/</guid>
      <description>1.escape() escape() 不能直接用于 URL 编码，它的作用是返回一个字符的 Unicode 编码值。比如&amp;quot;春节&amp;quot;的返回结果是 %u6625%u8282 ，escape() 不对+进行编码，其主要用于汉字编码。
console.log(escape(&amp;#34;春节+国庆&amp;#34;)) // %u6625%u8282+%u56FD%u5E86 console.log(escape(&amp;#34;春节=+=国庆&amp;#34;)) // %u6625%u8282%3D+%3D%u56FD%u5E86 console.log(unescape(&amp;#39;%u6625%u8282%3D+%3D%u56FD%u5E86&amp;#39;)) // 春节=+=国庆 2.encodeURI() encodeURI() 是用来对 URL 编码的函数。函数会编码整个 URL 地址，但对特殊含义的符号 ; / ? : @ &amp;amp; = + $ , # 不进行编码。
console.log(encodeURI(&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;)) // http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3 console.log(decodeURI(&amp;#39;http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3&amp;#39;)) // http://baidu.com?hello=您好&amp;amp;word=文档 3.encodeURIComponent() encodeURIComponent() 能编码如; / ? : @ &amp;amp; = + $ , #这些特殊字符
console.log(encodeURIComponent(&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;)) // http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3 console.log(decodeURIComponent(&amp;#39;http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3&amp;#39;)) // http://baidu.com?hello=您好&amp;amp;word=文档 </description>
    </item>
    
    <item>
      <title>Web开发—控制台输出</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</guid>
      <description>1.清空控制台 console.clear()clear()2.信息输出 console.log() 用于输出普通信息console.info() 用于输出提示性信息console.error() 用于输出错误信息console.warn() 用于输出警示信息console.debug() 用于输出调试信息3.换行 shift + enter
4.占位符 支持字符 %s、整数 %d %i、浮点数 %f 和对象 %o 四种
console.log(&#39;%d年%d月%d日&#39;, 2011,3,26); console.log(&#39;圆周率是%f&#39;, 3.1415926);5.断言 let isDebug = false;console.assert(isDebug, &#39;为false时输出的信息&#39;);</description>
    </item>
    
    <item>
      <title>Web开发—attribute 和 property 的区别</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>参考原文：JS中attribute和property的区别 @L_mj 
 1.介绍 property和attribute虽然都称为属性，但两者不是同一个东西，property是 DOM 中的属性，是 JavaScript 里的对象；attribute是 HTML 标签上的属性，它的值只能够是字符串；简单理解，attribute就是 DOM 节点自带的属性，例如 HTML 中常用的id、class、title、align等。而property是这个 DOM 元素作为对象，其附加的内容，例如childNodes、firstChild等。
&amp;lt;div id=&amp;#34;div1&amp;#34; class=&amp;#34;divClass&amp;#34; title=&amp;#34;divTitle&amp;#34; title1=&amp;#34;divTitle1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 如上述的div标签，当我们使用var in1=document.getElementById(&amp;quot;div1&amp;quot;)获取这个元素并打印时console.log(in1)，可以看到如下图的属性。
 
可以发现有一个名为attributes的属性，类型是NamedNodeMap，同时也可以找到标签自带的属性id和className、但明显没有titles这个自定义的属性。这是因为每一个 DOM 对象在创建的时候，只会创建如id, className这些基本属性，而们在 TAG 标签中自定义的属性是不会直接放到 DOM 中的。
 
从这里就可以看出，attributes是属于property的一个子集。
2.attribute 取值赋值 attribute 使用setAttribute()和getAttribute()进行操作，注意，setAttribute()的两个参数，都必须是字符串。
var id = div.getAttribute(&amp;#34;id&amp;#34;); var className = div.getAttribute(&amp;#34;class&amp;#34;); var title = div.getAttribute(&amp;#34;title&amp;#34;); var value = div.getAttribute(&amp;#34;value&amp;#34;); // 自定义属性 div.setAttribute(&amp;#39;class&amp;#39;, &amp;#39;a&amp;#39;); div.setAttribute(&amp;#39;title&amp;#39;, &amp;#39;b&amp;#39;); div.setAttribute(&amp;#39;title&amp;#39;, &amp;#39;c&amp;#39;); div.setAttribute(&amp;#39;value&amp;#39;, &amp;#39;d&amp;#39;); 3.property 取值赋值 property取值赋值只需要使用点.</description>
    </item>
    
    <item>
      <title>Web开发—异步POST</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%BC%82%E6%AD%A5post/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%BC%82%E6%AD%A5post/</guid>
      <description>1.$ajax $.ajax({ url: &amp;#39;http://&amp;#39;, type: &amp;#39;post&amp;#39;, dataType: &amp;#39;json&amp;#39;, data: {name: &amp;#34;x&amp;#34;, foo: &amp;#39;bar&amp;#39;}, cache: false, headers: { &amp;#34;Authorization&amp;#34;: &amp;#34;Bearer token&amp;#34;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;, }, success: function(res){ }, error: function(e){ }, }); </description>
    </item>
    
    <item>
      <title>Web开发—jQuery 实现界面刷新</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</guid>
      <description>1.使用 Load 实现的局部刷新 在jQuery中load方法可以加载本地Html文件里的某个元素，使用这个特性可以实现Html的局部更新
$(&amp;#34;#content&amp;#34;).load(&amp;#34;list .table&amp;#34;) 2.使用 location 实现全局刷新 window.location.reload() </description>
    </item>
    
    <item>
      <title>Web开发—下拉表单插件 bootstrap-select</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</guid>
      <description>参考文献：github.com-bootstrap-select @silviomoreto  &amp;amp; blogs @懒得安分
 1.引用 &amp;lt;link href=&amp;#34;Content/bootstrap/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;Content/bootstrap-select/css/bootstrap-select.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;Content/jquery-1.9.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;Content/bootstrap/js/bootstrap.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;Content/bootstrap-select/js/bootstrap-select.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 2.使用 &amp;lt;select class=&amp;#34;selectpicker&amp;#34; multiple&amp;gt; &amp;lt;option value=&amp;#34;1&amp;#34;&amp;gt;广东省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;2&amp;#34;&amp;gt;广西省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;3&amp;#34;&amp;gt;福建省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;4&amp;#34;&amp;gt;湖南省&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;5&amp;#34;&amp;gt;山东省&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; 3.取值 var value = $(&#39;#sel&#39;).val(); ，需要注意的是，如果是多选，这里得到的 value 变量是一个数组变量，形如 [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]
4.赋值 $(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, &amp;#39;1&amp;#39;); 注意，所操作的值为 option 的 value 属性
在一些级联选择的使用场景中，若需要在赋值的时候触发组件的 change 事件，可以：
$(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, &amp;#39;1&amp;#39;).trigger(&amp;#34;change&amp;#34;); 多选的赋值
$(&amp;#39;.selectpicker&amp;#39;).selectpicker(&amp;#39;val&amp;#39;, [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;]).trigger(&amp;#34;change&amp;#34;); 5.恢复原状 $(&amp;#39;#initializePartyAProject&amp;#39;).on(&amp;#39;click&amp;#39;, function () { // 回到初始状态  $(&amp;#39;#party_a_project_name&amp;#39;).</description>
    </item>
    
    <item>
      <title>Web开发—定位点击位置</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</guid>
      <description>1.实现 $(&amp;#39;body&amp;#39;).click(function(even) { // 在页面任意位置点击而触发此事件  // even.target 表示被点击的目标  console.log($(even.target).attr(&amp;#34;id&amp;#34;)) }) </description>
    </item>
    
    <item>
      <title>Web开发—jQuery 消息提示插件 toastr</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</guid>
      <description> 参考文献： github-toastr @CodeSeven 
 toastr 是一个基于 jQuery 简单、漂亮的消息提示插件，使用简单、方便，可以设置超时时间自动消失。
1.引入toastr的js、css文件 &amp;lt;script src=&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.css&amp;#34;&amp;gt; 2.使用 // 常规消息提示，默认背景为浅蓝色 toastr.info(&amp;#34;你有新消息了!&amp;#34;); // 成功消息提示，默认背景为浅绿色 toastr.success(&amp;#34;你有新消息了!&amp;#34;); // 警告消息提示，默认背景为橘黄色 toastr.warning(&amp;#34;你有新消息了!&amp;#34;); // 错误消息提示，默认背景为浅红色 toastr.error(&amp;#34;你有新消息了!&amp;#34;); // 带标题的消息框 toastr.success(&amp;#34;你有新消息了!&amp;#34;,&amp;#34;消息提示&amp;#34;); // 另一种调用方法 toastr[&amp;#34;info&amp;#34;](&amp;#34;你有新消息了!&amp;#34;,&amp;#34;消息提示&amp;#34;); 3.自定义参数 toastr.options = { closeButton: false, debug: false, progressBar: true, positionClass: &amp;#34;toast-bottom-center&amp;#34;, onclick: null, showDuration: &amp;#34;300&amp;#34;, hideDuration: &amp;#34;1000&amp;#34;, timeOut: &amp;#34;2000&amp;#34;, extendedTimeOut: &amp;#34;1000&amp;#34;, showEasing: &amp;#34;swing&amp;#34;, hideEasing: &amp;#34;linear&amp;#34;, showMethod: &amp;#34;fadeIn&amp;#34;, hideMethod: &amp;#34;fadeOut&amp;#34; }; 4.参数说明 closeButton：false，是否显示关闭按钮（提示框右上角关闭按钮）； debug：false，是否为调试； progressBar：false，是否显示进度条（设置关闭的超时时间进度条）； positionClass，消息框在页面显示的位置 toast-top-left 顶端左边 toast-top-right 顶端右边 toast-top-center 顶端中间 toast-top-full-width 顶端，宽度铺满整个屏幕 toast-botton-right toast-bottom-left toast-bottom-center toast-bottom-full-width onclick，点击消息框自定义事件 showDuration: “300”，显示动作时间 hideDuration: “1000”，隐藏动作时间 timeOut: “2000”，自动关闭超时时间 extendedTimeOut: “1000” showEasing: “swing”, hideEasing: “linear”, showMethod: “fadeIn” 显示的方式，和jquery相同 hideMethod: “fadeOut” 隐藏的方式，和jquery相同 </description>
    </item>
    
    <item>
      <title>Web开发—杂项2</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B92/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B92/</guid>
      <description>1.屏蔽链接 &amp;lt;a href=&amp;#34;javascript:void(0);&amp;#34;&amp;gt;something&amp;lt;/a&amp;gt; 2.min 文件 min，Minimized 的缩写，是压缩后的 js 或 css 文件。里面的功能与没有 min 的文件是一样的。
js 或 css 文件一般都是从服务器上下载到本地浏览器上解释执行的，如果 js 文件过大，这样必然会导致网页加载速度变慢。所以，有了压缩 js 文件的做法。
实际压缩原理很简单，就是把原来 js 文件中的空格，回车符，注释全部清除。因此这种 js 文件通常是不可读的，因为压缩后，文件是一行写到尾。
3.li 标签间的间隔删除 li 标签间的间隔是由于行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符，这些空白也会被应用样式，占据空间，所以会有间隔。解决方法可以将闭合标签写到开头
&amp;lt;li&amp;gt;BAT &amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;BAT&amp;lt;/li&amp;gt; 也可以通过设置 li 标签的 font-size 为 0，解决该问题。
4.CSS 样式覆盖  规则一：由于继承而发生样式冲突时，最近祖先/父元素获胜（最近原则） 规则二：继承的样式和直接指定的样式冲突时，直接指定的样式获胜（最直接原则） 规则三：直接指定的样式发生冲突时，样式权值高者获胜。内联样式的权值 &amp;raquo; ID 选择器 &amp;raquo; 类选择器 &amp;raquo; 标签选择器 规则四：样式权值相同时，后者获胜。注意样式表的出现位置 规则五：!important 的样式属性不被覆盖  5.页面跳转 window.location.replace(&amp;#34;网址&amp;#34;); window.location.href = &amp;#34;网址&amp;#34;; $(location).attr(&amp;#39;href&amp;#39;, ‘网址’); $(window).attr(&amp;#39;location&amp;#39;,‘网址’); $(location).prop(&amp;#39;href&amp;#39;,‘网址’) 6.将 html 字符串转换成 node 节点 1.innerHTML function createNode(txt) { const template = &amp;#34;&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;&amp;#34;; let tempNode = document.</description>
    </item>
    
    <item>
      <title>Web开发—实现摄像头开启</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</guid>
      <description>1.HTML 实现 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- 样式部分可以忽略 --&amp;gt; &amp;lt;style&amp;gt; * { padding: 0; margin: 0; } div { width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; } .btn { width: 100px; height: 50px; border-radius: 10px; background: #ff9900; line-height: 50px; text-align: center; color: #fff; box-shadow: 0 0 10px #999; } video, canvas { width: 300px; height: 300px; border: 5px solid #000; border-radius: 10px; margin-left: 5px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;#34;play&amp;#34; class=&amp;#34;btn&amp;#34;&amp;gt;开启摄像&amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;take&amp;#34; class=&amp;#34;btn&amp;#34;&amp;gt;拍照&amp;lt;/div&amp;gt; &amp;lt;video id=&amp;#34;video&amp;#34;&amp;gt;&amp;lt;/video&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Web开发—页面跳转</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</guid>
      <description>1.页面跳转（原页面跳转） 通过 a 标签实现 &amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34;&amp;gt;BAT&amp;lt;/a&amp;gt; 通过 window.location.href 实现 window.location.href=&amp;#34;https://www.baidu.com&amp;#34;; 2.页面跳转 （打开新标签页） 通过 a 标签实现 &amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;BAT&amp;lt;/a&amp;gt; 通过 window.open() 实现 window.open(&amp;#34;https://www.baidu.com&amp;#34;); </description>
    </item>
    
    <item>
      <title>Web开发—PHP&#43;MariaDB 数据库操作</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
      <description>1.连接数据库 &amp;lt;?php if (extension_loaded(&amp;#39;mysqli&amp;#39;)){ echo &amp;#39;yes&amp;#39;; }else{ echo &amp;#39;no&amp;#39;; } # 判断 mysqli 组件是否已经被加载  $db = new mysqli(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;admin&amp;#39;, &amp;#39;test&amp;#39;); # 数据库地址，用户名，密码，表单  if (mysqli_connect_errno()){ echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Connect DB error&amp;#39;; exit; } # 判断数据库是否连接 ?&amp;gt;2.一个用户注册和系统登录 a、创建数据库、表和用户。 DROP DATABASE IF EXISTS &amp;#39;test&amp;#39;; CREATE DATABASE &amp;#39;test&amp;#39; USE &amp;#39;test&amp;#39;; DROP TABLE IF EXISTS &amp;#39;tbl_user&amp;#39;; CREATE TABLE &amp;#39;tbl_user&amp;#39; ( &amp;#39;username&amp;#39; varchar(32) NOT NULL default &amp;#39;&amp;#39;, &amp;#39;password&amp;#39; varchar(32) NOT NULL default &amp;#39;&amp;#39;, PRIMARY KEY (&amp;#39;username&amp;#39;) ) ENGINE=InnoDB DEFAULT CHARSET=gb2312; c、注册的代码： # register_do.</description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 解决乱码</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</guid>
      <description>1.问题 当 Nginx 服务器运行时，有时用户访问中文内容会出现乱码
2.解决 此时需要修改 Nginx 的 server 配置内容，增加字段：charset utf-8;
upstream you.example.com { server 127.0.0.1:8081; } server { listen 80; server_name you.example.com; charset utf-8; location /examples { return 403; } ...... } </description>
    </item>
    
    <item>
      <title>Web服务器—动-静态网页</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</guid>
      <description>1.静态网页  在静态 Web 程序中，客户端使用 Web 浏览器通过网络，使用 HTTP 协议向服务器发送一个请求（Request），告诉服务器需要得到某个页面，之后 Web 服务器会根据用户的需要，从文件系统（存放了所有静态页面的磁盘）取出内容返回给客户端，客户端接收到内容之后经过浏览器渲染解析，得到显示的效果。 运行在客户端的程序、网页、插件、组件，属于静态网页，它们可以脱离服务器运行于浏览器客户端。 静态网页的内容相对稳定，URL 地址相对于动态网页的更加容易被搜索引擎识别,所以网站进行 SEO 优化的时候一般都是建议采用静态网页。 静态网页无需数据库的支持，所以访问速度上较之动态网页比较快，不过随着浏览器以及宽带速度提升，这种差别会越来越小。  2.动态网页  动态 Web 中，程序依然使用客户端和服务端，客户端依然使用浏览器通过 HTTP 协议发送请求（Request），但现在的所有请求都要先经过一个 Web Server来处理。 如果客户端请求的是静态资源，则将请求直接转交给 Web 服务器，之后 Web 服务器从文件系统中取出内容，发送回客户端浏览器进行解析执行。 如果客户端请求的是动态资源，则先将请求转交给 Web Container，在 Web Container 中连接数据库，从数据库中取出数据并完成一系列操作后，动态拼凑页面的展示内容，最后把所有的展示内容交给 Web 服务器返回。 运行在服务器端的程序、网页、组件，属于动态网页，它们会随不同客户、不同时间，返回不同的网页。  3.静态网页和动态网页的区别  静态页面中，设计者把页面上所有东西都设定好，不管是谁在任何时候看到的页面内容都是一样的。静态网页的页面文件，可以直接用本地的浏览器打开。静态页面放到什么地方都能运行的，动态页面则不行。 程序是否在服务器端运行，这个是判断网页属不属于动态网页的重要标志。动态网页需要服务器进行解析，动态网页的内容一般都是依靠服务器端的程序来生成的，不同人、不同时候访问页面，页面显示的内容都可能不同。 动态网页相比静态网页的交互性更高，可以实现更多的功能，如用户注册、登录等一系列用户需要与网站发生互动的功能。需要注意的是动态网页与网页上的各种动画、滚动字幕等视觉上的“动态效果”没有直接关系，动态网页的动态关注的是用户与服务器的数据交互。 动态网页不是一个独立存在服务器上的网页，当用户发送请求时，服务器可能还要拼凑其他元素才会返回一个完整的网页，而静态网页一旦上传到服务器上，就是实实在在保存在服务器上的网页文件。 静态网页适合更新较少的网站，一般适用于展示型的网站，而动态网页则更新较多，一般用于用户互动较多的网站。  </description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 反向代理</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>1.什么是正向代理与反向代理 正向代理隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端通过代理服务器来访问服务端，客户端所有的请求都通过代理服务器来发送。某些科学上网工具就是典型的正向代理角色，通过在国外搭建一台代理服务器，让代理代替我去发送请求，然后代理服务器再把响应返回给我。
反向代理隐藏了真实的服务端，客户不知道真正提供服务人的是谁，客户只需要访问反向代理服务器便可以获取到响应。例如，当我们请求百度的时候，可能有成千上万台服务器准备为我们服务，但具体是哪一台就不清楚了。但实际上，我们不需要知道这个，只需要知道反向代理服务器 www.baidu.com 就可以了，反向代理服务器会帮我们把请求转发到真实的服务器那里去。
两者的区别在于代理的对象不一样： 正向代理是为客户端代理，反向代理是为服务端代理。
在现代，通常会使用 Nginx 作为反向代理服务器。
2.Nginx的配置文件  
1.全局块 该部分配置 Nginx 全局内容，包括下面几个部分：
 配置运行 Nginx 服务器用户（组） worker process 数 Nginx 进程 PID 存放路径 错误日志的存放路径 外部配置文件的引入  user user [group]; user nobody nobody; # 指定可以运行 Nginx 服务器的用户，如果 user 指令不配置或者配置为 nobody nobody，则默认所有用户都可以启动 Nginx 进程 ------------------------------------------------------------------------------- worker_processes number; # number：Nginx 进程最多可以产生的 worker process 数，配置为 auto：Nginx 进程将自动检测 ------------------------------------------------------------------------------- error_log file; # file：日志输出到某个文件 file，配置为 stderr 日志输出到标准错误输出 error_log logs/error.log; # 将日志输出到 logs/error.</description>
    </item>
    
  </channel>
</rss>
