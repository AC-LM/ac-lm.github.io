<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/flutter/</link>
    <description>Recent content in Flutter on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter—路由 initialRoute 与 home 的区别</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E8%B7%AF%E7%94%B1-initialroute-%E4%B8%8E-home-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%B7%AF%E7%94%B1-initialroute-%E4%B8%8E-home-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>1.优先级 在 MaterialApp 中，initialRoute 和 home 都指向首页，但其优先级不同
  有 home，无 initialRoute，无 routes，只显示 home
  有 home，有 initialRoute，无 routes，若 initialRoute 是 &amp;quot; / &amp;ldquo;，则正常显示 home；若不是 &amp;quot; / &amp;ldquo;，则程序会报错，但是仍然能显示 home
  有 home，无 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;ldquo;，则程序会报错；若 routes 不包含 &amp;quot; / &amp;quot; ，则显示 home
  有 home，有 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;ldquo;，则程序会报错；若 routes 不包含 &amp;quot; / &amp;quot; ，则会先显示 home，再显示 initialRoute ，从 initialRoute 可以返回到 home，这个特性可以用来实现启动页</description>
    </item>
    
    <item>
      <title>Flutter—异步编程</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid>
      <description>参考原文：Flutter 异步编程：Future、Isolate 和事件循环
 1.Dart 是一种单线程语言 Dart 是一种单线程语言，意味着同一时刻程序只能执行一个操作，其他操作在这个操作完成后执行，只要这个操作还在执行，它就不会被其他 Dart 代码中断。依赖于 Dart 的 Flutter 也是如此。
void myBigLoop(){ for (int i = 0; i &amp;lt; 1000000; i++){ _doSomethingSynchronously(); } } 在上述例子中，myBigLoop() 方法在执行完成前永远不会被中断，在整个方法执行期间应用将会被阻塞。
2.运行模型 在这里需要关注的是 Dart 的代码序列器（事件循环）。
当你启动一个 Flutter 或 Dart 应用时，应用将创建并启动一个新的线程进程 Isolate，这个线程将是整个应用的主线程。
在主线程启动后，应用会在此初始化 2 个 FIFO（先进先出）队列，MicroTask和 Event队列，在上述操作执行完成后，才会执行main()方法，并启动事件循环。
事件循环是一种由一个内部时钟控制的无限循环，在每个时钟周期内，如果没有其他 Dart 代码执行，则执行以下操作：
void eventLoop(){ while (microTaskQueue.isNotEmpty){ fetchFirstMicroTaskFromQueue(); executeThisMicroTask(); return; } if (eventQueue.isNotEmpty){ fetchFirstEventFromQueue(); executeThisEventRelatedCode(); } } 可以注意到，这个操作的作用是从MicroTask和 Event队列提取出事件到循环中执行，直到两个队列中所有事件执行完成。
a.MicroTask 队列 MicroTask队列用于非常简短且需要异步执行的内部动作，这些动作需要在其他事件完成之后并在将执行权送还给Event队列之前运行。
b.Event 队列 大多数需要使用异步的动作都使用Event队列进行处理，如外部事件 I/O，绘图等。值得注意的是，Future 操作也通过Event队列处理。</description>
    </item>
    
    <item>
      <title>Flutter—状态(数据)监听</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E7%9B%91%E5%90%AC/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E7%9B%91%E5%90%AC/</guid>
      <description>1.ValueListenableBuilder 该Widget配合ValueNotifier可以实现对数据的监听
/// 定义 ValueNotifier 这里传递的数据类型为 String ValueNotifier&amp;lt;String&amp;gt; _testValueNotifier = ValueNotifier&amp;lt;String&amp;gt;(&amp;#39;&amp;#39;); /// 定义数据变化后监听的 Widget Widget buildValueListenableBuilder() { return ValueListenableBuilder( /// 数据发生变化时回调,变化的布局  builder: (context, value, child) { if(value == &amp;#39;&amp;#39;){ return Text(&amp;#39;空&amp;#39;); }else{ return Text(value); } }, /// 监听的数据  valueListenable: _testValueNotifier, ); } /// 数据变化  void testFunction() { /// 赋值更新  _testValueNotifier.value = &amp;#39;传递的测试数据&amp;#39;; } </description>
    </item>
    
    <item>
      <title>Flutter—apk 瘦身</title>
      <link>https://ac-lm.github.io/posts/flutter/flutterapk-%E7%98%A6%E8%BA%AB/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutterapk-%E7%98%A6%E8%BA%AB/</guid>
      <description>1.打包 Flutter 在打包编译时，会根据 CPU 架构（x86_64、arm64-v8a、armeabi-v7a）的不同打出对应的二进制库，体现在 apk 的 lib 文件中。
PS：x86_64 一般是模拟器和平板使用， arm64-v8a 就是 arm 64 位，大部分新手机使用。 armeabi 虽然不是现在主流的 CPU 架构，但是高版本的都会对其进行兼容，所以主流的 App 如果只想发一个版本的上线，可以只使用 armeabi 。
使用命令
flutter build apk --release --target-platform android-armflutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi</description>
    </item>
    
    <item>
      <title>Flutter—读取手机文件路径</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</guid>
      <description>参考原文： 【Flutter 实战】文件系统目录 @老孟程序员 
 1.添加依赖 在项目的 pubspec.yaml 文件中添加依赖：
dependencies: path_provider: ^1.6.14 执行命令：
flutter pub get 2.获取文件路径   getTemporaryDirectory
临时目录，适用于下载的缓存文件，此目录随时可以清除，此目录为应用程序私有目录，其他应用程序无法访问此目录。
  getApplicationSupportDirectory
应用程序可以在其中放置应用程序支持文件的目录的路径。
  getLibraryDirectory
应用程序可以在其中存储持久性文件，备份文件以及对用户不可见的文件的目录路径，例如storage.sqlite.db。
  getApplicationDocumentsDirectory
应用程序可能在其中放置用户生成的数据或应用程序无法重新创建的数据的目录路径。
  getExternalStorageDirectory
应用程序可以访问顶级存储的目录的路径。由于此功能仅在Android上可用，因此应在发出此函数调用之前确定当前操作系统。
  getExternalCacheDirectories
存储特定于应用程序的外部缓存数据的目录的路径。 这些路径通常位于外部存储（如单独的分区或SD卡）上。 电话可能具有多个可用的存储目录。
  getExternalStorageDirectories
可以存储应用程序特定数据的目录的路径。 这些路径通常位于外部存储（如单独的分区或SD卡）上。
  getDownloadsDirectory
存储下载文件的目录的路径，这通常仅与台式机操作系统有关。
  3.Android 文件存储 Android 文件存储分为内部存储和外部存储。
a.内部存储 用于保存应用的私有文件，其他应用无法访问这些数据，创建的文件在此应用的包名目录下，没有 root 权限 的手机无法在手机的 文件管理 应用中看到此目录，不过可以通过 Android Studio 工具查看，路径为：data/data/包名。包名下具体的目录结构为：</description>
    </item>
    
    <item>
      <title>Flutter—时间</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%97%B6%E9%97%B4/</guid>
      <description>1.时间 var today = DateTime.now(); print(&amp;#39;当前时间是：$today&amp;#39;); var date1 = today.millisecondsSinceEpoch; print(&amp;#39;当前时间戳：$date1&amp;#39;); var date2 = DateTime.fromMillisecondsSinceEpoch(date1); print(&amp;#39;时间戳转日期：$date2&amp;#39;); // 拼接成 date var dentistAppointment = new DateTime(2019, 6, 20, 17, 30,20); print(dentistAppointment); // 字符串转 date DateTime date3 = DateTime.parse(&amp;#34;2019-06-20 15:32:41&amp;#34;); print(date3); // 时间比较 print(today.isBefore(date3));// 在之前 print(today.isAfter(date3)); // 在之后 print(date3.isAtSameMomentAs(date3));// 相同 print(date3.compareTo(today));// 大于返回1；等于返回0；小于返回-1  // 时间增加 var fiftyDaysFromNow = today.add(new Duration(days: 5)); print(&amp;#39;today加5天：$fiftyDaysFromNow&amp;#39;); // 时间减少 DateTime fiftyDaysAgo = today.subtract(new Duration(days: 5)); print(&amp;#39;today减5天：$fiftyDaysAgo&amp;#39;); // 时间差，两个时间相差，小时数 print(&amp;#39;比较两个时间差，小时数：${fiftyDaysFromNow.</description>
    </item>
    
    <item>
      <title>Flutter—内置对话框</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E5%86%85%E7%BD%AE%E5%AF%B9%E8%AF%9D%E6%A1%86/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%86%85%E7%BD%AE%E5%AF%B9%E8%AF%9D%E6%A1%86/</guid>
      <description>参考原文：Flutter内置show @老孟Flutter 
 1.showDialog showDialog 用于弹出普通 Material 风格的对话框，用法如下：
showDialog( context: context, builder: (context) { return AlertDialog( ... ); } ); 2.showCupertinoDialog showCupertinoDialog 用于弹出 ios 风格对话框，基本用法如下：
showCupertinoDialog( context: context, builder: (context) { return CupertinoAlertDialog( ... ); }); 3.showAboutDialog AboutDialog 用于描述当前 App 信息，底部提供 2 个按钮：查看许可按钮和关闭按钮。AboutDialog 需要和 showAboutDialog 配合使用，用法如下：
showAboutDialog( context: context, applicationIcon: Image.asset( &amp;#39;images/bird.png&amp;#39;, height: 100, width: 100, ), applicationName: &amp;#39;应用程序&amp;#39;, applicationVersion: &amp;#39;1.0.0&amp;#39;, applicationLegalese: &amp;#39;copyright 老孟，一枚有态度的程序员&amp;#39;, children: &amp;lt;Widget&amp;gt;[ Container( height: 30, color: Colors.</description>
    </item>
    
    <item>
      <title>Flutter—CupertinoPicker 滚轮选择器</title>
      <link>https://ac-lm.github.io/posts/flutter/fluttercupertinopicker-%E6%BB%9A%E8%BD%AE%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/fluttercupertinopicker-%E6%BB%9A%E8%BD%AE%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description>1.组件使用 Container( height: 120, width: 100, child: CupertinoPicker( itemExtent: 27, onSelectedItemChanged: (position) {}, children: [ Text(&amp;#34;192&amp;#34;) ] ),), </description>
    </item>
    
    <item>
      <title>Flutter—Fluttertoast 插件弹出提示</title>
      <link>https://ac-lm.github.io/posts/flutter/flutterfluttertoast-%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutterfluttertoast-%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA/</guid>
      <description>1.引入插件 在 pubspec.yaml 中添加依赖:
fluttertoast: ^4.0.1 2.使用 import &amp;#39;package:fluttertoast/fluttertoast.dart&amp;#39;; RaisedButton( child: Text(&amp;#34;弹出toast&amp;#34;), onPressed: () { Fluttertoast.showToast( msg: &amp;#34;你今天真好看&amp;#34;, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.BOTTOM, timeInSecForIosWeb: 1, backgroundColor: Colors.black45, textColor: Colors.white, fontSize: 16.0); }, ) </description>
    </item>
    
    <item>
      <title>Flutter—Row 子控件两端对齐</title>
      <link>https://ac-lm.github.io/posts/flutter/flutterrow-%E5%AD%90%E6%8E%A7%E4%BB%B6%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutterrow-%E5%AD%90%E6%8E%A7%E4%BB%B6%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/</guid>
      <description>1.使用 spaceBetween 对齐方式 new Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ new Text(&amp;#34;left&amp;#34;), new Text(&amp;#34;right&amp;#34;) ] ); 2.中间使用 Expanded 自动扩展 Row( children: &amp;lt;Widget&amp;gt;[ FlutterLogo(),//左对齐  Expanded(child: SizedBox()),//自动扩展挤压  FlutterLogo(),//右对齐  ], ); 3.使用 Spacer 自动填充 Row( children: &amp;lt;Widget&amp;gt;[ FlutterLogo(), Spacer(), FlutterLogo(), ], ); 4.使用 Flexible Row( children: &amp;lt;Widget&amp;gt;[ FlutterLogo(), Flexible(fit: FlexFit.tight, child: SizedBox()), FlutterLogo(), ], ); </description>
    </item>
    
    <item>
      <title>Flutter—滚动视图的位置保存</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BF%9D%E5%AD%98/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BF%9D%E5%AD%98/</guid>
      <description>参考原文：how-to-get-flutter-scrollcontroller-to-save @stackoverflow 
 使用 AutomaticKeepAliveClientMixin 保存状态 class GetListView extends StatefulWidget{ @override State&amp;lt;StatefulWidget&amp;gt; createState() =&amp;gt;_GetListViewState(); } class _GetListViewState extends State&amp;lt;GetListView&amp;gt; with AutomaticKeepAliveClientMixin&amp;lt;GetListView&amp;gt;{ @override Widget build(BuildContext context){ return ListView.builder( itemCount: 2000, itemBuilder: (context, i) { return ListTile( title: Text( i.toString(), textScaleFactor: 1.5, style: TextStyle(color: Colors.blue), )); }); } @override bool get wantKeepAlive =&amp;gt; true; } 使用 PageStorageKey 保存偏移 ListView.builder( key: PageStorageKey&amp;lt;String&amp;gt;(&amp;#34;controllerA&amp;#34;), controller: ScrollController(keepScrollOffset: true), itemCount: 2000, itemBuilder: (context, i) { print(&amp;#34;Rebuilded 1&amp;#34;); return ListTile( title: Text( i.</description>
    </item>
    
    <item>
      <title>Flutter—为真机添加网络权限</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA%E7%9C%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%9D%83%E9%99%90/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA%E7%9C%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%9D%83%E9%99%90/</guid>
      <description>1.网络权限 在 AndroidManifest.xml 中添加下列代码，注意不要放到 application 中.
// android/app/src/main/AndroidManifest.xml &amp;lt;uses-permission android:name=&amp;#34;android.permission.READ_PHONE_STATE&amp;#34; /&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.INTERNET&amp;#34; /&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_NETWORK_STATE&amp;#34; /&amp;gt; &amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_WIFI_STATE&amp;#34; /&amp;gt; </description>
    </item>
    
    <item>
      <title>Flutter—关闭界面</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E5%85%B3%E9%97%AD%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%85%B3%E9%97%AD%E7%95%8C%E9%9D%A2/</guid>
      <description>1.POP 通过将将当前界面 pop 出来关闭界面
Navigator.pop(context);Navigator.of(context).pop();</description>
    </item>
    
    <item>
      <title>Flutter—setState 更新原理和流程</title>
      <link>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>参考原文：Flutter的setState更新原理和流程 @flutter开发精选 
 1.Flutter 的状态类  StatelessWidget：无状态类，没有状态更新，界面一经创建无法更改 StatefulWidget：有状态类，当状态改变，调用 setState() 方法会触发 StatefulWidget 的 UI 状态更新，自定义继承 StatefulWidget 的子类须重写 createState() 方法  2.mounted 调用 setState() 必须是没有调用过 dispose() 方法，不然出错，可通过 mounted 属性来判断调用此方法是否合法。
if (mounted) {setState(() {});}3.流程 a.条件判断  1.生命周期判断 2.是否可以进行刷新：mounted  b.添加脏链表 _dirty = true  1.脏链表是待更新的链表 2.更新过后就不脏了 3._active=false 的时候直接返回  c.管理类  告诉管理类方法自己需要被重新构建 owner.scheduleBuildFor(this)  d.调用 window.scheduleFrame() =&amp;gt;native 方法  RegisterNatives() 完成 native 方法的注册 最终会注册 vsync 回调。 等待下一次 vsync 信号的到来， 然后再经过层层调用最终会调用到 Window::BeginFrame() UI 的绘制逻辑是在 Render 树中实现的  e.</description>
    </item>
    
    <item>
      <title>Flutter—读取 app 安装包资源</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96-app-%E5%AE%89%E8%A3%85%E5%8C%85%E8%B5%84%E6%BA%90/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96-app-%E5%AE%89%E8%A3%85%E5%8C%85%E8%B5%84%E6%BA%90/</guid>
      <description>参考原文：Flutter 读取应用资源并显示 @飘香豆腐 
 1.资源加载 在 flutter 中，如果需要加载资源的话，需要在 pubspec.yaml 指定 APP 所需要的资源。这样的话，指定的每个 Asset （资源）都会被打包在 APP 中，并且在 APP 运行时可以访问到这些资源。
最常见的 Asset 类型就是图片，指定图片资源后即可以在 APP 页面使用图片控件加载资源了。
# pubspec.yaml flutter: assets: - assets/images/logo.png // lib/main.dart Image.asset(&amp;#39;assets/images/logo.png&amp;#39;) 2.使用 rootBundle 对象访问资源 APP 还可以通过引入 services 包使用 rootBundle 对象来访问资源。
import &amp;#39;package:flutter/services.dart&amp;#39;; 比如访问文件 test.txt，txt 文件内容是 测试文字，可以使用 rootBundle 对象的 loadString 方法。当然，前提也是需要在 pubspec.yaml 中指定资源才能访问的到。
rootBundle.loadString(&amp;#39;assets/txt/test.txt&amp;#39;).then((data){ print(data); }); // 测试文字 因为 loadString() 返回的是 Future，所以需要用 then() 接受返回的 String 类型的数据。Future 类似于 ES6 中的 Promise，当异步任务执行完成后会把结果返回给 then()。</description>
    </item>
    
    <item>
      <title>Flutter—主题颜色</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</guid>
      <description>1.primarySwatch flutter 的主题（build下面的theme）中有个主题颜色（primarySwatch），该主题颜色(primarySwatch)只有以下的几个值可以选择，其他的暂不支持:
red,pink,purple,deepPurple,indigo,blue,lightBlue,cyan,teal,green,lightGreen,lime,yellow,amber,orange,deepOrange,brown,blueGrey,2.primaryColor 如果要把顶部导航栏和状态栏的颜色修改成黑色或者白色，需要用到这个属性。
primaryColor:Colors.white</description>
    </item>
    
    <item>
      <title>Flutter—为 BottomNavigationBar 设置背景色</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA-bottomnavigationbar-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E8%89%B2/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA-bottomnavigationbar-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E8%89%B2/</guid>
      <description>BottomNavigationBar BottomNavigationBar 不能直接设置背景色，但是可以通过设置主题画布色达到相同的效果
bottomNavigationBar: new Theme( data: Theme.of(context).copyWith( //设置背景色`BottomNavigationBar`  canvasColor: Colors.green, //设置高亮文字颜色  primaryColor: Colors.red, //设置一般文字颜色  textTheme: Theme.of(context).textTheme.copyWith(caption: new TextStyle(color: Colors.yellow))), child: new BottomNavigationBar( type: BottomNavigationBarType.fixed, currentIndex: 0, items: [ new BottomNavigationBarItem( icon: new Icon(Icons.add), title: new Text(&amp;#34;新增&amp;#34;), ), new BottomNavigationBarItem( icon: new Icon(Icons.delete), title: new Text(&amp;#34;删除&amp;#34;), ) ], ), ), </description>
    </item>
    
    <item>
      <title>Flutter—加载动画</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</guid>
      <description>参考原文：Flutter做一个加载动画 @limhGeek 
 1.根据情况返回不同布局 在加载的时候返回加载的布局，不加载的时候返回登陆页面布局，_childLayout()方法
void main() =&amp;gt; runApp(MyApp()); class MyApp extends StatelessWidget { ......... } class MyHomePage extends StatefulWidget { ......... } class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; { bool _loading = false; //标志！是否加载状态  @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: _childLayout(), ); } Widget _childLayout() { if (_loading) { return Center( child: Container( child: CircularProgressIndicator(), ), ); } else { return Center( child: RaisedButton( onPressed: () { _loading = !</description>
    </item>
    
    <item>
      <title>Flutter—setState 报错</title>
      <link>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%8A%A5%E9%94%99/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%8A%A5%E9%94%99/</guid>
      <description> 参考原文：setState() called after dispose() @Songzh
 1.报错 ERROR:flutter/shell/common/shell.cc(181)] Dart Error: Unhandled exception: setState() called after dispose(): _ShelfState#5b9c1(lifecycle state: defunct, not mounted) 2.原因 在 Flutter 构件树被销毁后仍然执行了 setState 方法改变页面状态，当 setState 方法改变页面状态时，需要改变的页面被销毁了。使用场景为，当触发 setState 方法时从当前页面切换到其他页面。
3.解决 在 setState 之前加一句判断，判断当前页面是否存在于构件树中。
// mounted 为 true 表示当前页面挂在到构件树中，为 false 时未挂载当前页面 if (mounted) { setState(() { // xxxx  }) } </description>
    </item>
    
    <item>
      <title>Flutter—SDK27 不支持 HTTP 协议</title>
      <link>https://ac-lm.github.io/posts/flutter/fluttersdk27-%E4%B8%8D%E6%94%AF%E6%8C%81-http-%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/fluttersdk27-%E4%B8%8D%E6%94%AF%E6%8C%81-http-%E5%8D%8F%E8%AE%AE/</guid>
      <description>参考原文：Insecure HTTP is not allowed by platform @csdn 
 1.报错 DioError [DioErrorType.DEFAULT]: Bad state: Insecure HTTP is not allowed by platform2.原因 平台不支持不安全的 HTTP 协议，即不允许访问 HTTP 域名的地址。这是因为 IOS 和 Android 9.0 对网络请求做了一些限制，不能直接访问 HTTP 域名的地址。
3.解决方案 降低 SDK 版本至 27 或 27 以下</description>
    </item>
    
    <item>
      <title>Flutter—TabController 的两次回调</title>
      <link>https://ac-lm.github.io/posts/flutter/fluttertabcontroller-%E7%9A%84%E4%B8%A4%E6%AC%A1%E5%9B%9E%E8%B0%83/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/fluttertabcontroller-%E7%9A%84%E4%B8%A4%E6%AC%A1%E5%9B%9E%E8%B0%83/</guid>
      <description>1.TabController 的回调 TabController 监听在点击切换 tab 的时候会回调两次，左右滑动切换 tab 正常调用一次，这是由于在点击切换 tab 的时候会执行一个动画效果，滑动切换的时候是没有的，在这个过程中多触发了一次 Listener。
因此，在设计时需要注意该问题，以避免监听出错。</description>
    </item>
    
    <item>
      <title>Flutter—下载环境配置</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%8B%E8%BD%BD%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%8B%E8%BD%BD%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>1.环境设置 由于Flutter默认配置的下载服务器在国外，往往会出现网络波动无法下载的情况，因此需要重新配置国内镜像，避免出现无法下载情况。在终端命令或 Windows 环境变量中增加键值
export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn </description>
    </item>
    
    <item>
      <title>Flutter—混合开发</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</guid>
      <description>参考原文：《Flutter实战》@wendux 
 1.原生开发 原生应用程序是指某一个移动平台（比如iOS或安卓）所特有的应用，使用相应平台支持的开发工具和语言，并直接调用系统提供的SDK API。比如Android原生应用就是指使用Java或Kotlin语言直接调用Android SDK开发的应用程序；而iOS原生应用就是指通过Objective-C或Swift语言直接调用iOS SDK开发的应用程序。原生开发有以下主要优势：
 可访问平台全部功能（GPS、摄像头）； 速度快、性能高、可以实现复杂动画及绘制，整体用户体验好；  主要缺点：
 平台特定，开发成本高；不同平台必须维护不同代码，人力成本随之变大； 内容固定，动态化弱，大多数情况下，有新功能更新时只能发版；  在移动互联网发展初期，业务场景并不复杂，原生开发还可以应对产品需求迭代。 但近几年，随着物联网时代到来、移动互联网高歌猛进，日新月异，在很多业务场景中，传统的纯原生开发已经不能满足日益增长的业务需求。主要表现在：
 动态化内容需求增大；当需求发生变化时，纯原生应用需要通过版本升级来更新内容，但应用上架、审核是需要周期的，这对高速变化的互联网时代来说是很难接受的，所以，对应用动态化(不发版也可以更新应用内容)的需求就变的迫在眉睫。 业务需求变化快，开发成本变大；由于原生开发一般都要维护Android、iOS两个开发团队，版本迭代时，无论人力成本，还是测试成本都会变大。  总结一下，纯原生开发主要面临动态化和开发成本两个问题，而针对这两个问题，诞生了一些跨平台的动态化框架。
2.跨平台技术简介 针对原生开发面临问题，人们一直都在努力寻找好的解决方案，而时至今日，已经有很多跨平台框架(注意，本书中所指的跨平台若无特殊说明，即特指Android和iOS两个平台)，根据其原理，主要分为三类：
 H5+原生（Cordova、Ionic、微信小程序） JavaScript开发+原生渲染 （React Native、Weex、快应用） 自绘UI+原生(QT for mobile、Flutter)  在接下来的章节中我们逐个来看看这三类框架的原理及优缺点。
a.H5+原生混合开发 这类框架主要原理就是将APP的一部分需要动态变动的内容通过H5来实现，通过原生的网页加载控件WebView (Android)或WKWebView（iOS）来加载（以后若无特殊说明，我们用WebView来统一指代android和iOS中的网页加载控件）。这样以来，H5部分是可以随时改变而不用发版，动态化需求能满足；同时，由于h5代码只需要一次开发，就能同时在Android和iOS两个平台运行，这也可以减小开发成本，也就是说，H5部分功能越多，开发成本就越小。我们称这种h5+原生的开发模式为混合开发，采用混合模式开发的APP我们称之为混合应用或Hybrid APP ，如果一个应用的大多数功能都是H5实现的话，我们称其为Web APP 。
目前混合开发框架的典型代表有：Cordova、Ionic 和微信小程序，值得一提的是微信小程序目前是在webview中渲染的，并非原生渲染，但将来有可能会采用原生渲染。
如之前所述，原生开发可以访问平台所有功能，而混合开发中，H5代码是运行在WebView中，而WebView实质上就是一个浏览器内核，其JavaScript依然运行在一个权限受限的沙箱中，所以对于大多数系统能力都没有访问权限，如无法访问文件系统、不能使用蓝牙等。所以，对于H5不能实现的功能，都需要原生去做。而混合框架一般都会在原生代码中预先实现一些访问系统能力的API， 然后暴露给WebView以供JavaScript调用，这样一来，WebView就成为了JavaScript与原生API之间通信的桥梁，主要负责JavaScript与原生之间传递调用消息，而消息的传递必须遵守一个标准的协议，它规定了消息的格式与含义，我们把依赖于WebView的用于在JavaScript与原生之间通信并实现了某种消息传输协议的工具称之为WebView JavaScript Bridge, 简称 JsBridge，它也是混合开发框架的核心。
b.JavaScript开发+原生渲染 React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和Android两个平台。RN使用Javascript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。
c.自绘UI+原生 在本篇中，我们看看最后一种跨平台技术：自绘UI+原生。这种技术的思路是，通过在不同平台实现一个统一接口的渲染引擎来绘制UI，而不依赖系统原生控件，所以可以做到不同平台UI的一致性。注意，自绘引擎解决的是UI的跨平台问题，如果涉及其它系统能力调用，依然要涉及原生开发。这种平台技术的优点如下：
 性能高；由于自绘引擎是直接调用系统API来绘制UI，所以性能和原生控件接近。 灵活、组件库易维护、UI外观保真度和一致性高；由于UI渲染不依赖原生控件，也就不需要根据不同平台的控件单独维护一套组件库，所以代码容易维护。由于组件库是同一套代码、同一个渲染引擎，所以在不同平台，组件显示外观可以做到高保真和高一致性；另外，由于不依赖原生控件，也就不会受原生布局系统的限制，这样布局系统会非常灵活。  不足：
 动态性不足；为了保证UI绘制性能，自绘UI系统一般都会采用AOT模式编译其发布包，所以应用发布后，不能像Hybrid和RN那些使用JavaScript（JIT）作为开发语言的框架那样动态下发代码。 开发效率低：QT使用C++作为其开发语言，而编程效率是直接会影响APP开发效率的，C++作为一门静态语言，在UI开发方面灵活性不及JavaScript这样的动态语言，另外，C++需要开发者手动去管理内存分配，没有JavaScript及Java中垃圾回收（GC）的机制。  也许你已经猜到Flutter就属于这一类跨平台技术，没错，Flutter正是实现一套自绘引擎，并拥有一套自己的UI布局系统。不过，自绘制引擎的思路并不是什么新概念，Flutter并不是第一个尝试这么做的，在它之前有一个典型的代表，即大名鼎鼎的QT。</description>
    </item>
    
    <item>
      <title>Flutter—例程</title>
      <link>https://ac-lm.github.io/posts/flutter/flutter%E4%BE%8B%E7%A8%8B/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%BE%8B%E7%A8%8B/</guid>
      <description>参考原文：《Flutter实战》@wendux 
 1.例程代码 void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#34;Flutter Demo&amp;#34;, theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(title: &amp;#34;Flutter Demo Home Page&amp;#34;), ); } } class MyHomePage extends StatefulWidget { MyHomePage({Key key, this.title}) : super(key: key); final String title; @override _MyHomePageState createState() =&amp;gt; _MyHomePageState(); } class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; { int _counter = 0; void _incrementCounter() { setState(() { _counter++; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.</description>
    </item>
    
  </channel>
</rss>
