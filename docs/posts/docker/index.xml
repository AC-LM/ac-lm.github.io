<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/posts/docker/</link>
    <description>Recent content in Docker on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/posts/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker—网络</title>
      <link>https://ac-lm.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</guid>
      <description>1.基本原理 Docker 的本地网络实现依赖于 Linux 上的网络命名空间和虚拟网络设备。直观上看，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）与外界相通，并可以收发数据包。此外，如果不同子网之间要进行通信，还需要额外的路由机制。
Docker 中的网络接口默认都是虚拟接口。虚拟接口的最大优势就是转发效率极高。这是因为 Linux 通过在内核中进行数据复制来实现虚拟接口之间的数据转发，即发送接口的发送缓存中的数据包将被直接复制到接收接口的接收缓存中，而无需通过外部物理网络设备进行交换。对于本地系统和容器内系统来看，虚拟接口跟一个正常的以太网卡相比并无区别，只是它速度要快得多。
Docker 在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通，这样的一对接口叫做 veth pair 。
 
一般情况下，Docker 在创建一个容器时，会具体执行如下操作：
 创建一对虚拟接口，分别放到本地主机和新容器的命名空间中 本地主机一端的虚拟接口连接到默认的 docker0 网桥或指定网桥上，并具有一个以 veth 开头的唯一名字，如veth1234 容器一端的虚拟接口将放到新创建的容器中，并修改名字作为 eth0，这个接口只在容器的命名空间可见 从网桥可用地址段中获取一个空闲地址分配给容器的 eth0（例如172.17.0.2/16），并配置默认路由网关为docker0 网卡的内部接口 docker0 的IP地址（例如172.17.42.1/16） 完成上述操作后，容器就可以使用 eth0 虚拟网卡来连接其他网络或外网  2.Docker 的网络模式 Docker 默认有三个网络模式，可以使用 docker network ls查看
 bridge：此模式会为每一个容器分配、设置IP等，并将容器连接到一个 docker0 虚拟网桥，通过 docker0 网桥以及 Iptables nat 表配置与宿主机通信，默认使用。 host：容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。 null：该模式关闭了容器的网络功能。   
在使用 docker run 命令启动容器的时候，可以通过 --net 参数来指定容器的网络配置。
 --net=bridge：默认值，在 Docker 网桥 docker0 上为容器创建新的网络栈。 --net=none：让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置，之后，用户可以自行进行配置。 --net=container:NAME_or_ID：让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 lo 环回接口通信。 --net=host：告诉 Docker 不要将容器网络放到隔离的命名空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其他 root 进程一样打开低范围的端口，可以访问本地网络服务，还可以让容器做一些影响整个主机系统的事情，比如重启主机。 --net=user_defined_network：用户自行用 network 相关命令创建一个网络，通过这种方式将容器连接到指定的已有网络上去。  3.</description>
    </item>
    
    <item>
      <title>Docker—备份和恢复</title>
      <link>https://ac-lm.github.io/posts/docker/docker%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</guid>
      <description>1.docker 容器的导出备份 docker export -o 容器导出文件(格式为tar压缩文件) 容器ID或容器名称 docker export -o $(pwd)/newtomcat.tar mytomcat ----------------------------------------------------- docker export 容器ID或容器名称 &amp;gt; 容器导出文件(格式为tar压缩文件) docker export mytomcat &amp;gt; $(pwd)/newtomcat.tar +++++++++++++++++++++++++++++++++++++++++++++++++++++ 注释： $(pwd)是docker支持的获取当前目录路径的方法，与linux的pwd类似 $(pwd)/newtomcat.tar 表示在当前目录下生成一个newtomcat.tar压缩文件 2.docker 容器的导入恢复 docker import 容器导出文件(格式为tar压缩文件) 新镜像名称[:版本号] docker import $(pwd)/newtomcat.tar newtomcat:v1.0 ------------------------------------------------------ docker import /URL 新镜像名称[:版本号] docker import http://example.com/exampleimage.tgz example/imagerepo 3.docker 镜像的导出备份 docker save -o 镜像导出文件(格式为tar压缩文件) 镜像ID或镜像名称[:版本号] docker save -o $(pwd)/mytomcat.tar newtomcat:v1.0 ---------------------------------------------------------------------- docker save 镜像ID或镜像名称[:版本号] &amp;gt; 镜像导出文件(格式为tar压缩文件) docker save newtomcat:v1.0 &amp;gt; $(pwd)/mytomcat.tar 4.</description>
    </item>
    
    <item>
      <title>Docker—设置国内镜像源</title>
      <link>https://ac-lm.github.io/posts/docker/docker%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</guid>
      <description>修改配置文件 创建或修改 /etc/docker/daemon.json 文件
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https//hub-mirror.c.163.com&amp;#34;] }  Docker中国区官方镜像：https://registry.docker-cn.com 网易：http://hub-mirror.c.163.com 中国科技大学 ：https://docker.mirrors.ustc.edu.cn 上述镜像似乎已过期，不建议使用  </description>
    </item>
    
    <item>
      <title>Docker—后台运行</title>
      <link>https://ac-lm.github.io/posts/docker/docker%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid>
      <description>1.使用参数 -d docker run -d python bash 需要注意的是，docker 在后台运行时，必须有一个前台进程。如果这个进程运行的命令不是能一直挂起的命令（如 ping，sleep），那么在执行完命令后，进程就会退出，同时 docker 也就会停止。
2.解决方法 1.执行挂起阻塞命令 docker run -d python sleep 99999999999999 2.使用交互界面后退出容器 docker run -it python /bin/bash </description>
    </item>
    
    <item>
      <title>Docker—Bash 命令</title>
      <link>https://ac-lm.github.io/posts/docker/dockerbash-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/dockerbash-%E5%91%BD%E4%BB%A4/</guid>
      <description>1.运行 docker docker version # 查看docker版本 systemctl start docker # 运行docker systemctl status docker # 查看docker状态 systemctl enable docker # 自启动docker 2.查看容器 docker ps -a # 查看容器，包括未运行 docker ps # 查看容易，正在运行的 docker rm name # 删除 docker rm -f name # 强制删除 docker rm $(docker ps -aq) # 删除全部容器  3.启动容器 docker run --name python3.9 --privileged=true -v /root/pythonScript:/pythonScript -it python /bin/bash # name 名字，privileged 权限，-v 挂载目录，-it 以shell模式 # -p 宿主机:容器 docker rename gallant_swartz python3.</description>
    </item>
    
    <item>
      <title>Docker—修改容器端口映射</title>
      <link>https://ac-lm.github.io/posts/docker/docker%E4%BF%AE%E6%94%B9%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/docker/docker%E4%BF%AE%E6%94%B9%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</guid>
      <description>1.找到docker的配置文件 使用 docker ps -a 命令找到要修改容器的 CONTAINER ID
 
运行 docker inspect 【CONTAINER ID】 | grep Id 命令，根据容器ID找到文件ID
 
执行 cd /var/lib/docker/containers 命令进入 docker 容器文件夹，找到与 文件ID 相同的目录
 
2.修改docker的配置文件 停止 docker 引擎服务，systemctl stop docker 或者 service docker stop
进入对应 文件ID 所在目录，修改 hostconfig.json 两个文件
 
把 8080 映照到 80，重启服务 systemctl start docker
【PS】或修改 vi config.v2.json，找到 ExposedPorts 和 Ports 对应项，还是仿照原先的内容添加自己所需要的端口映射</description>
    </item>
    
  </channel>
</rss>
