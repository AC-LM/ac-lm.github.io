<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务器 on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in 服务器 on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web开发—PHP&#43;MariaDB 数据库操作</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
      <description>1.连接数据库 &amp;lt;?php if (extension_loaded(&amp;#39;mysqli&amp;#39;)){ echo &amp;#39;yes&amp;#39;; } else{ echo &amp;#39;no&amp;#39;; } # mysqli组件是否已经被加载  $db = new mysqli(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;admin&amp;#39;, &amp;#39;test&amp;#39;); #数据库地址，用户名，密码，表单  if (mysqli_connect_errno()){ echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Connect DB error&amp;#39;; exit; } #数据库是否连接 ?&amp;gt;2.一个用户注册和系统登录 a、创建数据库、表和用户。 DROP DATABASE IF EXISTS `test`; CREATE DATABASE `test` USE `test`; DROP TABLE IF EXISTS `tbl_user`; CREATE TABLE `tbl_user` ( `username` varchar(32) NOT NULL default &amp;#39;&amp;#39;, `password` varchar(32) NOT NULL default &amp;#39;&amp;#39;, PRIMARY KEY (`username`) ) ENGINE=InnoDB DEFAULT CHARSET=gb2312; c、注册的代码： # register_do.</description>
    </item>
    
    <item>
      <title>Web开发—PHP 实例</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php-%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php-%E5%AE%9E%E4%BE%8B/</guid>
      <description>1.PHP 信息页 &amp;lt;?php phpinfo();?&amp;gt;2.数据库连接实现 &amp;lt;?php $db = new mysqli(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;123456&amp;#39;, &amp;#39;ztest&amp;#39;); if (mysqli_connect_errno()) { echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Connect DB error&amp;#39;; exit; } else { echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Connect DB success&amp;#39;; } echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Test start&amp;#39;; $query = &amp;#34;select * from login&amp;#34;; $result=$db-&amp;gt;query($query); if ($result-&amp;gt;num_rows &amp;gt; 0) { // 输出数据  while($row = $result-&amp;gt;fetch_assoc()) { echo &amp;#34;&amp;lt;p&amp;gt;&amp;#34; . &amp;#34;username: &amp;#34; . $row[&amp;#34;username&amp;#34;]. &amp;#34; - password: &amp;#34; . $row[&amp;#34;password&amp;#34;]; } } else { echo &amp;#34;0 结果&amp;#34;; } $db-&amp;gt;close(); ?</description>
    </item>
    
    <item>
      <title>Web开发—War 文件</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91war-%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91war-%E6%96%87%E4%BB%B6/</guid>
      <description>1.War 文件 War包一般是在进行Web开发时，一个网站Project下的所有源码的集合，里面包含前台HTML/CSS/JS/JSP等的代码，也包含编译Java的代码。当开发人员在自己的开发机器上调试所有代码并通过后，为了交给测试人员测试和未来进行产品发布，都需要将开发人员的源码打包成War进行发布。
War包可以放在Tomcat下的webapps或者word目录下，随着tomcat服务器的启动，它可以自动被解压。
2.扩展 | Jar、war、EAR 的区别 Jar、war、EAR、在文件结构上，三者并没有什么不同，它们都采用zip或jar档案文件压缩格式。但是它们的使用目的有所区别：
 Jar文件（扩展名为. Jar，Java Application Archive）包含Java类的普通库、资源（resources）、辅助文件（auxiliary files）等。通常是开发时要引用的通用类，打成包便于存放管理。简单来说，jar包就是别人已经写好的一些类，然后对这些类进行打包。可以将这些jar包引入到你的项目中，可以直接使用这些jar包中的类和属性，这些jar包一般放在lib目录下。 War文件（扩展名为.War,Web Application Archive）包含全部Web应用程序。在这种情形下，一个Web应用程序被定义为单独的一组文件、类和资源，用户可以对jar文件进行封装，并把它作为小型服务程序（servlet）来访问。 war包是一个可以直接运行的web模块，通常用于网站，打成包部署到容器中。以Tomcat来说，将war包放置在其\webapps\目录下,然后启动Tomcat，这个包就会自动解压，就相当于发布了。war包是Sun提出的一种web应用程序格式，与jar类似，是很多文件的压缩包。war包中的文件按照一定目录结构来组织。根据其根目录下包含有html和jsp文件，或者包含有这两种文件的目录，另外还有WEB-INF目录。通常在WEB-INF目录下含有一个web.xml文件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的servlet类和jsp，或者servlet所依赖的其他类（如JavaBean）。通常这些所依赖的类也可以打包成jar包放在WEB-INF下的lib目录下。 Ear文件（扩展名为.Ear,Enterprise Application Archive）包含全部企业应用程序。在这种情形下，一个企业应用程序被定义为多个jar文件、资源、类和Web应用程序的集合。  </description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 解决乱码</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</guid>
      <description>问题 当 Nginx 服务器运行时，有时用户访问中文内容会出现乱码
解决 此时需要修改 Nginx 的 server 配置内容，增加字段：charset utf-8;
upstream you.example.com { server 127.0.0.1:8081; } server { listen 80; server_name you.example.com; charset utf-8; location /examples { return 403; } ...... } </description>
    </item>
    
    <item>
      <title>Web服务器—Apache &amp; Tomcat</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8apache-tomcat/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8apache-tomcat/</guid>
      <description>1.Apache  C语言实现的，专门用来提供HTTP服务的程序 特性：简单、速度快、性能稳定、可配置（代理），主要用于解析静态文本，并发性能高，侧重于HTTP服务 支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP等 具有很强的可扩展性，可以通过插件支持PHP，还可以单向Apache连接Tomcat实现连通。Apache是世界使用排名第一的Web服务器  2.Tomcat  是Java开发的一个符合JavaEE的Servlet规范的JSP服务器（Servlet容器），是 Apache 的扩展。免费的Java应用服务器 主要用于解析JSP/Servlet，侧重于Servlet引擎 支持静态页，但效率没有Apache高；支持Servlet、JSP请求 Tomcat本身也内置了一个HTTP服务器用于支持静态内容，可以通过Tomcat的配置管理工具实现与Apache整合  3.Apache + Tomcat 如果请求是静态网页则由Apache处理，并将结果返回；如果是动态请求，Apache会将解析工作转发给Tomcat处理，Tomcat处理后将结果通过Apache返回。这样可以达到分工合作，提高系统的性能的效果。</description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 反向代理</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>1.什么是正向代理与反向代理 正向代理隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端通过代理服务器来访问服务端，客户端所有的请求都通过代理服务器来发送。某些科学上网工具就是典型的正向代理角色，通过在国外搭建一台代理服务器，让代理代替我去发送请求，然后代理服务器再把响应返回给我。
反向代理隐藏了真实的服务端，客户不知道真正提供服务人的是谁，客户只需要访问反向代理服务器便可以获取到响应。例如，当我们请求百度的时候，可能有成千上万台服务器准备为我们服务，但具体是哪一台就不清楚了。但实际上，我们不需要知道这个，只需要知道反向代理服务器 www.baidu.com 就可以了，反向代理服务器会帮我们把请求转发到真实的服务器那里去。
两者的区别在于代理的对象不一样： 正向代理是为客户端代理，反向代理是为服务端代理。
2.通过Nginx实现反向代理 Nginx是最为流行的反向代理服务器之一，而且能用来实现负载均衡。
什么是负载均衡？就是把项目部署在不同的服务器上，但是通过统一的域名进入，由Nginx对请求进行分发，最终减轻服务器的压力。此时，Nginx服务器仅作为分发服务器，而真正的内容可以放在其他的服务器上，这样来，还能起到一层安全隔壁的作用，Nginx作为隔离层。其次，Nginx还能解决跨域的问题。
3.Nginx的配置文件  
1.全局块 该部分配置主要影响Nginx全局，通常包括下面几个部分：
 配置运行Nginx服务器用户（组） worker process数 Nginx进程PID存放路径 错误日志的存放路径 配置文件的引入  2.events块 该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：
 设置网络连接的序列化 是否允许同时接收多个网络连接 事件驱动模型的选择 最大连接数的配置  3.http块 这部分是负责网页相关的配置
 定义MIMI-Type 自定义服务日志 允许sendfile方式传输文件 连接超时时间 单连接请求数上限  4.server块 这部分是负责服务器相关的配置
 配置网络监听 基于名称的虚拟主机配置 基于IP的虚拟主机配置  5.location块 本地文件配置
 请求根目录配置 更改location的URI 网站默认首页配置  4. 代码解析 1. 全局块&amp;mdash;-配置运行Nginx服务器用户（组） user user [group]; #user：指定可以运行Nginx服务器的用户 #group：可选项，可以运行Nginx服务器的用户组 user nobody nobody; #如果user指令不配置或者配置为nobody nobody，则默认所有用户都可以启动Nginx进程 ------------------------------------------------------------------------------- worker_processes number | auto; #number：Nginx进程最多可以产生的worker process数 #auto：Nginx进程将自动检测 worker_processes 3; #在后台查看进程//ps -aux | grep nginx//能发现开启了3个worker process进程 ------------------------------------------------------------------------------- error_log file | stderr; #file：日志输出到某个文件file #stderr：日志输出到标准错误输出 error_log logs/error.</description>
    </item>
    
  </channel>
</rss>
