<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务器 on AC-LM &#39;s blog</title>
    <link>https://ac-lm.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in 服务器 on AC-LM &#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ac-lm.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web开发—PHP&#43;MariaDB 数据库操作</title>
      <link>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E5%BC%80%E5%8F%91php&#43;mariadb-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
      <description>1.连接数据库 &amp;lt;?php if (extension_loaded(&amp;#39;mysqli&amp;#39;)){ echo &amp;#39;yes&amp;#39;; }else{ echo &amp;#39;no&amp;#39;; } # 判断 mysqli 组件是否已经被加载  $db = new mysqli(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;admin&amp;#39;, &amp;#39;test&amp;#39;); # 数据库地址，用户名，密码，表单  if (mysqli_connect_errno()){ echo &amp;#39;&amp;lt;p&amp;gt;&amp;#39; . &amp;#39;Connect DB error&amp;#39;; exit; } # 判断数据库是否连接 ?&amp;gt;2.一个用户注册和系统登录 a、创建数据库、表和用户。 DROP DATABASE IF EXISTS &amp;#39;test&amp;#39;; CREATE DATABASE &amp;#39;test&amp;#39; USE &amp;#39;test&amp;#39;; DROP TABLE IF EXISTS &amp;#39;tbl_user&amp;#39;; CREATE TABLE &amp;#39;tbl_user&amp;#39; ( &amp;#39;username&amp;#39; varchar(32) NOT NULL default &amp;#39;&amp;#39;, &amp;#39;password&amp;#39; varchar(32) NOT NULL default &amp;#39;&amp;#39;, PRIMARY KEY (&amp;#39;username&amp;#39;) ) ENGINE=InnoDB DEFAULT CHARSET=gb2312; c、注册的代码： # register_do.</description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 解决乱码</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</guid>
      <description>1.问题 当 Nginx 服务器运行时，有时用户访问中文内容会出现乱码
2.解决 此时需要修改 Nginx 的 server 配置内容，增加字段：charset utf-8;
server { listen 80; server_name you.example.com; charset utf-8; location /examples { return 403; } } </description>
    </item>
    
    <item>
      <title>Web服务器—Nginx 反向代理</title>
      <link>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ac-lm.github.io/posts/web/web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
      <description>1.正向代理与反向代理 正向代理隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端通过代理服务器来访问服务端，客户端所有的请求都通过代理服务器来发送。某些科学上网工具就是典型的正向代理角色，通过在国外搭建一台代理服务器，让代理代替我去发送请求，然后代理服务器再把响应返回给我。
反向代理隐藏了真实的服务端，客户不知道真正提供服务人的是谁，客户只需要访问反向代理服务器便可以获取到响应。例如，当我们请求百度的时候，可能有成千上万台服务器准备为我们服务，而我们不需要知道是哪台服务器为我们提供服务，只需要知道反向代理服务器 www.baidu.com 就可以了。反向代理服务器会帮我们把请求转发到真实的服务器。
两者的区别在于代理的对象不一样： 正向代理是为客户端代理，反向代理是为服务端代理。
在现代，通常会使用 Nginx 作为反向代理服务器。
2.Nginx的配置文件  
1.全局块 该部分配置 Nginx 全局内容，包括下面几个部分：
 配置运行 Nginx 服务器用户（组） worker process 数 Nginx 进程 PID 存放路径 错误日志的存放路径 外部配置文件的引入  user user [group]; user nobody nobody; # 指定可以运行 Nginx 服务器的用户，如果 user 指令不配置或者配置为 nobody nobody，则默认所有用户都可以启动 Nginx 进程 ------------------------------------------------------------------------------- worker_processes number; # number：Nginx 进程最多可以产生的 worker process 数，配置为 auto：Nginx 进程将自动检测 ------------------------------------------------------------------------------- error_log file; # file：日志输出到某个文件 file，配置为 stderr 日志输出到标准错误输出 error_log logs/error.log; # 将日志输出到 logs/error.</description>
    </item>
    
  </channel>
</rss>
